{"version":3,"file":"static/js/voice-recorder.5e7de16d.chunk.js","mappings":"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","sources":["context/TicketContext.js","utils/validators.js","components/VoiceRecorderPage.js"],"sourcesContent":["import React, { createContext, useContext, useMemo } from 'react';\nimport { useDraftTickets } from './DraftTicketContext';\nimport { useTicketForm } from './TicketFormContext';\nimport { useTicketSubmission } from './TicketSubmissionContext';\nimport { useTicketView } from './TicketViewContext';\n\n// This is a backward compatibility layer that combines the focused contexts\n// to provide the original TicketContext API for existing components\n\n// Create the context\nconst TicketContext = createContext();\n\n/**\n * Provider component for ticket context\n * This is a backward compatibility layer that uses the new focused contexts\n * but provides the original API for existing components\n * \n * @param {Object} props - Component props\n * @returns {React.Component} Provider component\n */\nexport const TicketProvider = ({ children }) => {\n  // We don't need to implement any state or logic here\n  // Instead, we'll pass through to the actual provider\n  return children;\n};\n\n/**\n * Custom hook to use the ticket context\n * This combines all the focused contexts to provide the original API\n * \n * @returns {Object} Ticket context value\n */\nexport const useTicket = () => {\n  const context = useContext(TicketContext);\n  \n  // Always call hooks at the top level, regardless of whether we use them\n  // Add fallbacks to prevent errors if any context is undefined\n  const draftTickets = useDraftTickets() || {};\n  const ticketForm = useTicketForm() || {};\n  const ticketSubmission = useTicketSubmission() || {};\n  const ticketView = useTicketView() || {};\n  \n  // Create a combined context value that matches the original API\n  const combinedContext = useMemo(() => ({\n    // Combined context properties here\n    // View state from TicketViewContext with fallbacks\n    viewMode: ticketView.viewMode || 'landing',\n    setViewMode: ticketView.navigateTo || (() => console.warn('navigateTo not available')),\n    ticketMode: ticketView.ticketMode || null, // Default to null to ensure LandingPage displays\n    setTicketMode: ticketView.setTicketMode || (() => console.warn('setTicketMode not available')),\n    \n    // Form state from TicketFormContext\n    formData: ticketForm.formData,\n    setFormData: ticketForm.setFormData,\n    updateFormData: ticketForm.updateFormField,\n    handleInputChange: ticketForm.handleInputChange,\n    resetForm: ticketForm.resetForm,\n    addPart: ticketForm.addPart,\n    removePart: ticketForm.removePart,\n    \n    // Draft state from DraftTicketContext\n    draftTickets: draftTickets.draftTickets,\n    setDraftTickets: () => console.warn('setDraftTickets is deprecated, use DraftTicketContext methods instead'),\n    selectedDraftTicket: draftTickets.selectedDraftTicket,\n    setSelectedDraftTicket: draftTickets.setSelectedDraftTicket,\n    saveJobTicketAsDraft: draftTickets.saveDraft,\n    deleteDraftTicket: draftTickets.deleteDraft,\n    loadDraftIntoForm: draftTickets.loadDraftIntoForm,\n    \n    // Submission state from TicketSubmissionContext\n    submitJobTicket: ticketSubmission.submitJobTicket,\n    isSubmitting: ticketSubmission.isSubmitting,\n    submitError: ticketSubmission.submitError,\n    submitSuccess: ticketSubmission.submitSuccess\n  }), [\n    ticketView,\n    ticketForm,\n    draftTickets,\n    ticketSubmission\n  ]);\n  \n  // Return the legacy context if available, otherwise use the combined context\n  return context || combinedContext;\n};\n\nexport default TicketContext;\n","/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useVoice } from '../context/VoiceContext';\nimport VoiceRecorder from './VoiceRecorder';\n\n/**\n * VoiceRecorderPage component\n * Dedicated page for voice-based job ticket creation\n */\nconst VoiceRecorderPage = () => {\n  const { t } = useLanguage();\n  const { startVoiceRecording } = useVoice();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Start voice recording when the component mounts\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n      startVoiceRecording();\n    }, 500);\n    \n    return () => clearTimeout(timer);\n  }, [startVoiceRecording]);\n  \n  // Handle back button click\n  const handleBackClick = () => {\n    navigate('/dashboard');\n  };\n  \n  return (\n    <div className=\"container mx-auto px-4 py-6\">\n      {/* Header with back button */}\n      <div className=\"mb-6 flex items-center\">\n        <button \n          onClick={handleBackClick}\n          className=\"mr-4 p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors\"\n          aria-label={t('common.back')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n          </svg>\n        </button>\n        <h1 className=\"text-2xl font-bold\">{t('jobTicket.createByVoice')}</h1>\n      </div>\n      \n      {/* Voice recorder container */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6\">\n        <VoiceRecorder />\n      </div>\n    </div>\n  );\n};\n\nexport default VoiceRecorderPage;\n"],"names":["TicketContext","createContext","TicketProvider","_ref","children","useTicket","context","useContext","draftTickets","useDraftTickets","ticketForm","useTicketForm","ticketSubmission","useTicketSubmission","ticketView","useTicketView","combinedContext","useMemo","viewMode","setViewMode","navigateTo","console","warn","ticketMode","setTicketMode","formData","setFormData","updateFormData","updateFormField","handleInputChange","resetForm","addPart","removePart","setDraftTickets","selectedDraftTicket","setSelectedDraftTicket","saveJobTicketAsDraft","saveDraft","deleteDraftTicket","deleteDraft","loadDraftIntoForm","submitJobTicket","isSubmitting","submitError","submitSuccess","isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","VoiceRecorderPage","t","useLanguage","startVoiceRecording","useVoice","navigate","useNavigate","isLoading","setIsLoading","useState","useEffect","timer","setTimeout","clearTimeout","_jsxs","className","_jsx","onClick","handleBackClick","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","VoiceRecorder"],"sourceRoot":""}