{"version":3,"file":"static/js/948.2e967722.chunk.js","mappings":"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","sources":["components/tickets/DraftTicketList.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, Button, Modal, VirtualList, LoadingSpinner } from '../ui';\nimport { useMemoizedCallback } from '../../hooks';\n\n/**\n * Draft Ticket List component\n * Displays a table of all draft job tickets with edit functionality\n */\nconst DraftTicketList = () => {\n  const { t } = useLanguage();\n  const { draftTickets, setSelectedDraftTicket, setViewMode, deleteDraftTicket, setTicketMode } = useTicket();\n  \n  // State for confirmation modal\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  \n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return dateString;\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n  \n  // Handle view ticket - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticket) => {\n    setSelectedDraftTicket(ticket);\n    setViewMode('draft');\n  }, [setSelectedDraftTicket, setViewMode]);\n  \n  // Handle edit ticket - memoized to prevent recreation on each render\n  const handleEditTicket = useCallback((ticket) => {\n    setSelectedTicket(ticket);\n    setShowConfirmModal(true);\n  }, [setSelectedTicket]);\n  \n  // Confirm edit and load draft into form - memoized to prevent recreation on each render\n  const confirmEditDraft = useCallback(() => {\n    if (selectedTicket) {\n      // Set the selected draft ticket\n      setSelectedDraftTicket(selectedTicket);\n      \n      // Set ticket mode to manual to ensure form loads properly\n      setTicketMode('manual');\n      \n      // Change view mode to form to load the appropriate form component\n      setViewMode('form');\n      \n      // Remove the draft from the list\n      deleteDraftTicket(selectedTicket.id);\n    }\n    setShowConfirmModal(false);\n  }, [selectedTicket, setSelectedDraftTicket, setTicketMode, setViewMode, deleteDraftTicket]);\n  \n  // Cancel edit - memoized to prevent recreation on each render\n  const cancelEditDraft = useCallback(() => {\n    setSelectedTicket(null);\n    setShowConfirmModal(false);\n  }, []);\n  \n  // Handle delete ticket - memoized to prevent recreation on each render\n  const handleDeleteTicket = useCallback((ticketId) => {\n    deleteDraftTicket(ticketId);\n  }, [deleteDraftTicket]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.drafts')}\n      </h1>\n      \n      <Card className=\"overflow-hidden\">\n        {/* Table Header - Fixed to improve scrolling performance */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider w-24\">\n                  {t('common.edit')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                  {t('jobTicket.date')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.company')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.location')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                  {t('jobTicket.hours')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('jobTicket.description')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('common.actions')}\n                </th>\n              </tr>\n            </thead>\n            \n            {/* Table Body - Use VirtualList for large datasets */}\n            {draftTickets.length === 0 ? (\n              <tbody>\n                <tr>\n                  <td colSpan=\"7\" className=\"px-6 py-4\">\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400\">{t('jobTicket.noDrafts')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            ) : (\n              <tbody className=\"divide-y divide-gray-700\">\n                <VirtualList\n                  items={draftTickets}\n                  height={400}\n                  itemHeight={64}\n                  renderItem={(ticket) => (\n                    <TicketRow\n                      key={ticket.id}\n                      ticket={ticket}\n                      formatDate={formatDate}\n                      handleEditTicket={handleEditTicket}\n                      handleViewTicket={handleViewTicket}\n                      handleDeleteTicket={handleDeleteTicket}\n                      t={t}\n                    />\n                  )}\n                  overscan={5}\n                  emptyComponent={\n                    <tr>\n                      <td colSpan=\"7\" className=\"px-6 py-4\">\n                        <div className=\"text-center py-8\">\n                          <LoadingSpinner size=\"md\" />\n                        </div>\n                      </td>\n                    </tr>\n                  }\n                />\n              </tbody>\n            )}\n          </table>\n        </div>\n      </Card>\n      \n      {/* Confirmation Modal */}\n      <Modal\n        isOpen={showConfirmModal}\n        onClose={cancelEditDraft}\n        title={t('jobTicket.editConfirmation')}\n        size=\"md\"\n        footer={\n          <>\n            <Button variant=\"secondary\" onClick={cancelEditDraft}>\n              {t('common.no')}\n            </Button>\n            <Button variant=\"primary\" onClick={confirmEditDraft} className=\"ml-3\">\n              {t('common.yes')}\n            </Button>\n          </>\n        }\n      >\n        <p>{t('jobTicket.editConfirmationMessage')}</p>\n      </Modal>\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleEditTicket, handleViewTicket, handleDeleteTicket, t }) => {\n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleEditTicket(ticket)}\n          className=\"text-orange-500 hover:text-orange-400 font-medium\"\n          aria-label={`${t('common.edit')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.edit')}\n        </Button>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.jobDate)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.companyName || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {ticket.workTotalHours || '0'}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.workDescription || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <div className=\"flex flex-col sm:flex-row justify-end sm:space-x-3 space-y-2 sm:space-y-0\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleViewTicket(ticket)}\n            className=\"text-blue-500 hover:text-blue-400\"\n            aria-label={`${t('common.view')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.view')}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleDeleteTicket(ticket.id)}\n            className=\"text-red-500 hover:text-red-400\"\n            aria-label={`${t('common.delete')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.delete')}\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketList);\n"],"names":["DraftTicketList","t","useLanguage","draftTickets","setSelectedDraftTicket","setViewMode","deleteDraftTicket","setTicketMode","useTicket","showConfirmModal","setShowConfirmModal","useState","selectedTicket","setSelectedTicket","formatDate","useCallback","dateString","e","handleViewTicket","text","maxLength","arguments","length","undefined","concat","substring","ticket","handleEditTicket","confirmEditDraft","id","cancelEditDraft","handleDeleteTicket","ticketId","_jsxs","className","children","_jsx","Card","colSpan","VirtualList","items","height","itemHeight","renderItem","TicketRow","overscan","emptyComponent","LoadingSpinner","size","Modal","isOpen","onClose","title","footer","_Fragment","Button","variant","onClick","React","_ref","companyName","jobDate","location","workTotalHours","workDescription"],"sourceRoot":""}