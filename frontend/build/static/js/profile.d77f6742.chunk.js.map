{"version":3,"file":"static/js/profile.d77f6742.chunk.js","mappings":"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","sources":["components/profile/ProfilePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { Card, Button, Input, LoadingSpinner } from '../ui';\n\n/**\n * ProfilePage Component\n * \n * Displays and allows editing of user profile information\n * - Personal details\n * - Job preferences\n * - Account settings\n */\nconst ProfilePage = () => {\n  const { user, updateUserProfile, isLoading } = useAuth();\n  const { t } = useLanguage();\n  \n  // Local state for form fields\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    job_type: '',\n    preferred_language: '',\n    phone: ''\n  });\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  \n  // Populate form with user data when available\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        job_type: user.job_type || '',\n        preferred_language: user.preferred_language || '',\n        phone: user.phone || ''\n      });\n    }\n  }, [user]);\n  \n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSaving(true);\n    setSaveSuccess(false);\n    setSaveError(null);\n    \n    try {\n      await updateUserProfile(formData);\n      setIsEditing(false);\n      setSaveSuccess(true);\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSaveSuccess(false);\n      }, 3000);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      setSaveError(error.message || 'Failed to update profile');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">{t('profile.title') || 'Profile'}</h1>\n      \n      {saveSuccess && (\n        <Card className=\"bg-green-900 bg-opacity-20 border border-green-700 mb-6\">\n          <p className=\"text-green-400 p-3\">{t('profile.saveSuccess') || 'Profile updated successfully!'}</p>\n        </Card>\n      )}\n      \n      {saveError && (\n        <Card className=\"bg-red-900 bg-opacity-20 border border-red-700 mb-6\">\n          <p className=\"text-red-400 p-3\">{saveError}</p>\n        </Card>\n      )}\n      \n      <Card className=\"p-6\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"space-y-6\">\n            {/* Profile Image */}\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"relative\">\n                <div className=\"h-24 w-24 rounded-full bg-slate-700 flex items-center justify-center\">\n                  {user?.logo_url ? (\n                    <img \n                      src={user.logo_url} \n                      alt={user.name} \n                      className=\"h-24 w-24 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <span className=\"text-3xl text-gray-400\">{user?.name?.charAt(0) || '?'}</span>\n                  )}\n                </div>\n                {isEditing && (\n                  <button\n                    type=\"button\"\n                    className=\"absolute bottom-0 right-0 rounded-full bg-orange-600 p-1 text-white\"\n                    onClick={() => console.log('Change profile picture')}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z\" />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            </div>\n            \n            {/* Name */}\n            <Input\n              label={t('profile.name') || 'Name'}\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Email */}\n            <Input\n              label={t('profile.email') || 'Email'}\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Phone */}\n            <Input\n              label={t('profile.phone') || 'Phone'}\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={formData.phone}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Job Type */}\n            <div>\n              <label htmlFor=\"job_type\" className=\"block text-sm font-medium text-gray-300\">\n                {t('profile.jobType') || 'Job Type'}\n              </label>\n              <select\n                id=\"job_type\"\n                name=\"job_type\"\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={formData.job_type}\n                onChange={handleChange}\n                disabled={!isEditing}\n              >\n                <option value=\"\">{t('common.select') || 'Select...'}</option>\n                <option value=\"pump_tech\">{t('jobTypes.pumpTech') || 'Pump Technician'}</option>\n                <option value=\"driver\">{t('jobTypes.driver') || 'Driver'}</option>\n                <option value=\"admin\">{t('jobTypes.admin') || 'Administrator'}</option>\n              </select>\n            </div>\n            \n            {/* Preferred Language */}\n            <div>\n              <label htmlFor=\"preferred_language\" className=\"block text-sm font-medium text-gray-300\">\n                {t('profile.preferredLanguage') || 'Preferred Language'}\n              </label>\n              <select\n                id=\"preferred_language\"\n                name=\"preferred_language\"\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={formData.preferred_language}\n                onChange={handleChange}\n                disabled={!isEditing}\n              >\n                <option value=\"en\">English</option>\n                <option value=\"es\">Español</option>\n              </select>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              {isEditing ? (\n                <>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => setIsEditing(false)}\n                    disabled={isSaving}\n                  >\n                    {t('common.cancel') || 'Cancel'}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"primary\"\n                    disabled={isSaving}\n                  >\n                    {isSaving ? (\n                      <LoadingSpinner size=\"sm\" />\n                    ) : (\n                      t('common.save') || 'Save'\n                    )}\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  type=\"button\"\n                  variant=\"primary\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  {t('profile.edit') || 'Edit Profile'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n\nexport default ProfilePage;\n"],"names":["ProfilePage","_user$name","user","updateUserProfile","isLoading","useAuth","t","useLanguage","formData","setFormData","useState","name","email","job_type","preferred_language","phone","isEditing","setIsEditing","isSaving","setIsSaving","saveSuccess","setSaveSuccess","saveError","setSaveError","useEffect","handleChange","e","value","target","prev","_objectSpread","_jsx","className","children","LoadingSpinner","size","_jsxs","Card","onSubmit","async","preventDefault","setTimeout","error","console","message","logo_url","src","alt","charAt","type","onClick","log","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","Input","label","id","onChange","disabled","htmlFor","_Fragment","Button","variant"],"sourceRoot":""}