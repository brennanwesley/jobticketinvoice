{"version":3,"file":"static/js/dashboard.d4fc2b44.chunk.js","mappings":"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","sources":["components/LanguageToggle.js","components/tickets/DraftTicketList.js","context/TicketContext.js","utils/validators.js","context/VoiceContext.js","components/layout/Sidebar.js","components/LandingPage.js","components/JobTicketForm.js","utils/voiceParser.js","components/VoiceRecorder.js","components/tickets/forms/BaseJobTicketForm.js","components/tickets/forms/PumpTechTicketForm.js","components/tickets/forms/DriverTicketForm.js","components/tickets/JobTicketFormSelector.js","components/tickets/DraftTicketView.js","components/AppDashboard.js","components/tickets/SubmittedTicketList.js","components/tickets/JobTicketForm.js"],"sourcesContent":["import React, { memo } from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\n\r\n/**\r\n * Language Toggle component\r\n * Provides a button to switch between English and Spanish\r\n */\r\nconst LanguageToggle = () => {\r\n  const { language, toggleLanguage } = useLanguage();\r\n  \r\n  // Determine which language to show in the toggle button (opposite of current)\r\n  const targetLanguage = language === 'en' ? 'Español' : 'English';\r\n  const instructionText = language === 'es' ? 'click for' : 'haga clic para';\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleLanguage}\r\n      className=\"absolute top-0 right-0 m-4 px-3 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center focus:outline-none focus:ring-2 focus:ring-orange-700\"\r\n      aria-label={`${instructionText} ${targetLanguage}`}\r\n      title={`${instructionText} ${targetLanguage}`}\r\n      tabIndex={0}\r\n    >\r\n      <span className=\"text-xs italic text-gray-400 mr-1\">{instructionText}</span>\r\n      <span>{targetLanguage}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(LanguageToggle);\r\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, Button, Modal, VirtualList, LoadingSpinner } from '../ui';\nimport { useMemoizedCallback } from '../../hooks';\n\n/**\n * Draft Ticket List component\n * Displays a table of all draft job tickets with edit functionality\n */\nconst DraftTicketList = () => {\n  const { t } = useLanguage();\n  const { draftTickets, setSelectedDraftTicket, setViewMode, deleteDraftTicket, setTicketMode } = useTicket();\n  \n  // State for confirmation modal\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  \n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return dateString;\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n  \n  // Handle view ticket - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticket) => {\n    setSelectedDraftTicket(ticket);\n    setViewMode('draft');\n  }, [setSelectedDraftTicket, setViewMode]);\n  \n  // Handle edit ticket - memoized to prevent recreation on each render\n  const handleEditTicket = useCallback((ticket) => {\n    setSelectedTicket(ticket);\n    setShowConfirmModal(true);\n  }, [setSelectedTicket]);\n  \n  // Confirm edit and load draft into form - memoized to prevent recreation on each render\n  const confirmEditDraft = useCallback(() => {\n    if (selectedTicket) {\n      // Set the selected draft ticket\n      setSelectedDraftTicket(selectedTicket);\n      \n      // Set ticket mode to manual to ensure form loads properly\n      setTicketMode('manual');\n      \n      // Change view mode to form to load the appropriate form component\n      setViewMode('form');\n      \n      // Remove the draft from the list\n      deleteDraftTicket(selectedTicket.id);\n    }\n    setShowConfirmModal(false);\n  }, [selectedTicket, setSelectedDraftTicket, setTicketMode, setViewMode, deleteDraftTicket]);\n  \n  // Cancel edit - memoized to prevent recreation on each render\n  const cancelEditDraft = useCallback(() => {\n    setSelectedTicket(null);\n    setShowConfirmModal(false);\n  }, []);\n  \n  // Handle delete ticket - memoized to prevent recreation on each render\n  const handleDeleteTicket = useCallback((ticketId) => {\n    deleteDraftTicket(ticketId);\n  }, [deleteDraftTicket]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.drafts')}\n      </h1>\n      \n      <Card className=\"overflow-hidden\">\n        {/* Table Header - Fixed to improve scrolling performance */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider w-24\">\n                  {t('common.edit')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                  {t('jobTicket.date')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.company')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.location')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                  {t('jobTicket.hours')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('jobTicket.description')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('common.actions')}\n                </th>\n              </tr>\n            </thead>\n            \n            {/* Table Body - Use VirtualList for large datasets */}\n            {draftTickets.length === 0 ? (\n              <tbody>\n                <tr>\n                  <td colSpan=\"7\" className=\"px-6 py-4\">\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400\">{t('jobTicket.noDrafts')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            ) : (\n              <tbody className=\"divide-y divide-gray-700\">\n                <VirtualList\n                  items={draftTickets}\n                  height={400}\n                  itemHeight={64}\n                  renderItem={(ticket) => (\n                    <TicketRow\n                      key={ticket.id}\n                      ticket={ticket}\n                      formatDate={formatDate}\n                      handleEditTicket={handleEditTicket}\n                      handleViewTicket={handleViewTicket}\n                      handleDeleteTicket={handleDeleteTicket}\n                      t={t}\n                    />\n                  )}\n                  overscan={5}\n                  emptyComponent={\n                    <tr>\n                      <td colSpan=\"7\" className=\"px-6 py-4\">\n                        <div className=\"text-center py-8\">\n                          <LoadingSpinner size=\"md\" />\n                        </div>\n                      </td>\n                    </tr>\n                  }\n                />\n              </tbody>\n            )}\n          </table>\n        </div>\n      </Card>\n      \n      {/* Confirmation Modal */}\n      <Modal\n        isOpen={showConfirmModal}\n        onClose={cancelEditDraft}\n        title={t('jobTicket.editConfirmation')}\n        size=\"md\"\n        footer={\n          <>\n            <Button variant=\"secondary\" onClick={cancelEditDraft}>\n              {t('common.no')}\n            </Button>\n            <Button variant=\"primary\" onClick={confirmEditDraft} className=\"ml-3\">\n              {t('common.yes')}\n            </Button>\n          </>\n        }\n      >\n        <p>{t('jobTicket.editConfirmationMessage')}</p>\n      </Modal>\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleEditTicket, handleViewTicket, handleDeleteTicket, t }) => {\n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleEditTicket(ticket)}\n          className=\"text-orange-500 hover:text-orange-400 font-medium\"\n          aria-label={`${t('common.edit')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.edit')}\n        </Button>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.jobDate)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.companyName || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {ticket.workTotalHours || '0'}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.workDescription || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <div className=\"flex flex-col sm:flex-row justify-end sm:space-x-3 space-y-2 sm:space-y-0\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleViewTicket(ticket)}\n            className=\"text-blue-500 hover:text-blue-400\"\n            aria-label={`${t('common.view')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.view')}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleDeleteTicket(ticket.id)}\n            className=\"text-red-500 hover:text-red-400\"\n            aria-label={`${t('common.delete')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.delete')}\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketList);\n","import React, { createContext, useContext, useMemo } from 'react';\nimport { useDraftTickets } from './DraftTicketContext';\nimport { useTicketForm } from './TicketFormContext';\nimport { useTicketSubmission } from './TicketSubmissionContext';\nimport { useTicketView } from './TicketViewContext';\n\n// This is a backward compatibility layer that combines the focused contexts\n// to provide the original TicketContext API for existing components\n\n// Create the context\nconst TicketContext = createContext();\n\n/**\n * Provider component for ticket context\n * This is a backward compatibility layer that uses the new focused contexts\n * but provides the original API for existing components\n * \n * @param {Object} props - Component props\n * @returns {React.Component} Provider component\n */\nexport const TicketProvider = ({ children }) => {\n  // We don't need to implement any state or logic here\n  // Instead, we'll pass through to the actual provider\n  return children;\n};\n\n/**\n * Custom hook to use the ticket context\n * This combines all the focused contexts to provide the original API\n * \n * @returns {Object} Ticket context value\n */\nexport const useTicket = () => {\n  const context = useContext(TicketContext);\n  \n  // Always call hooks at the top level, regardless of whether we use them\n  const draftTickets = useDraftTickets();\n  const ticketForm = useTicketForm();\n  const ticketSubmission = useTicketSubmission();\n  const ticketView = useTicketView();\n  \n  // Create a combined context value that matches the original API\n  const combinedContext = useMemo(() => ({\n    // Combined context properties here\n    // View state from TicketViewContext\n    viewMode: ticketView.viewMode,\n    setViewMode: ticketView.navigateTo,\n    ticketMode: ticketView.ticketMode,\n    setTicketMode: ticketView.setTicketMode,\n    \n    // Form state from TicketFormContext\n    formData: ticketForm.formData,\n    setFormData: ticketForm.setFormData,\n    updateFormData: ticketForm.updateFormField,\n    handleInputChange: ticketForm.handleInputChange,\n    resetForm: ticketForm.resetForm,\n    addPart: ticketForm.addPart,\n    removePart: ticketForm.removePart,\n    \n    // Draft state from DraftTicketContext\n    draftTickets: draftTickets.draftTickets,\n    setDraftTickets: () => console.warn('setDraftTickets is deprecated, use DraftTicketContext methods instead'),\n    selectedDraftTicket: draftTickets.selectedDraftTicket,\n    setSelectedDraftTicket: draftTickets.setSelectedDraftTicket,\n    saveJobTicketAsDraft: draftTickets.saveDraft,\n    deleteDraftTicket: draftTickets.deleteDraft,\n    loadDraftIntoForm: draftTickets.loadDraftIntoForm,\n    \n    // Submission state from TicketSubmissionContext\n    submitJobTicket: ticketSubmission.submitJobTicket,\n    isSubmitting: ticketSubmission.isSubmitting,\n    submitError: ticketSubmission.submitError,\n    submitSuccess: ticketSubmission.submitSuccess\n  }), [\n    ticketView,\n    ticketForm,\n    draftTickets,\n    ticketSubmission\n  ]);\n  \n  // Return the legacy context if available, otherwise use the combined context\n  return context || combinedContext;\n};\n\nexport default TicketContext;\n","/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React, { createContext, useState, useContext, useRef, useCallback, useEffect } from 'react';\r\nimport { useLanguage } from './LanguageContext';\r\n\r\n// Create the context\r\nconst VoiceContext = createContext();\r\n\r\n/**\r\n * Provider component for voice recording context\r\n * @param {Object} props - Component props\r\n * @returns {React.Component} Provider component\r\n */\r\nexport const VoiceProvider = ({ children }) => {\r\n  const { t } = useLanguage();\r\n  \r\n  // Voice recording states\r\n  const [voiceStatus, setVoiceStatus] = useState(null); // null, 'listening', 'processing', 'captured', or 'error'\r\n  const [transcribedText, setTranscribedText] = useState('');\r\n  const [transcriptionError, setTranscriptionError] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  \r\n  // Refs\r\n  const recognitionRef = useRef(null);\r\n  const silenceTimerRef = useRef(null);\r\n  \r\n  // Initialize Web Speech API\r\n  useEffect(() => {\r\n    // Check if browser supports speech recognition\r\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\r\n      console.error('Speech recognition not supported');\r\n      return;\r\n    }\r\n    \r\n    // Create speech recognition instance\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    recognitionRef.current = new SpeechRecognition();\r\n    \r\n    // Configure speech recognition\r\n    recognitionRef.current.continuous = true;\r\n    recognitionRef.current.interimResults = true;\r\n    recognitionRef.current.lang = 'en-US';\r\n    \r\n    // Clean up on unmount\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        try {\r\n          recognitionRef.current.stop();\r\n        } catch (e) {\r\n          console.error('Error stopping recognition:', e);\r\n        }\r\n      }\r\n      \r\n      if (silenceTimerRef.current) {\r\n        clearTimeout(silenceTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // Reset silence timer\r\n  const resetSilenceTimer = useCallback(() => {\r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n    }\r\n    \r\n    silenceTimerRef.current = setTimeout(() => {\r\n      if (isListening) {\r\n        stopVoiceRecording();\r\n        setTranscriptionError(t('listeningTimeout'));\r\n        setVoiceStatus('error');\r\n      }\r\n    }, 15000); // 15 seconds of silence\r\n  }, [isListening, t]);\r\n  \r\n  // Start voice recording\r\n  const startVoiceRecording = useCallback(() => {\r\n    if (!recognitionRef.current) {\r\n      setTranscriptionError(t('browserNotSupported'));\r\n      setVoiceStatus('error');\r\n      return;\r\n    }\r\n    \r\n    setTranscribedText('');\r\n    setTranscriptionError('');\r\n    setVoiceStatus('listening');\r\n    setIsListening(true);\r\n    \r\n    try {\r\n      // Set up event handlers\r\n      recognitionRef.current.onstart = () => {\r\n        console.log('Voice recognition started');\r\n        resetSilenceTimer();\r\n      };\r\n      \r\n      recognitionRef.current.onresult = (event) => {\r\n        resetSilenceTimer();\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0].transcript)\r\n          .join(' ');\r\n        setTranscribedText(transcript);\r\n      };\r\n      \r\n      recognitionRef.current.onerror = (event) => {\r\n        console.error('Speech recognition error', event.error);\r\n        if (event.error === 'no-speech') {\r\n          setTranscriptionError(t('noSpeechDetected'));\r\n        } else if (event.error === 'not-allowed') {\r\n          setTranscriptionError(t('microphoneError'));\r\n        } else {\r\n          setTranscriptionError(t('transcriptionError'));\r\n        }\r\n        setVoiceStatus('error');\r\n        setIsListening(false);\r\n        \r\n        if (silenceTimerRef.current) {\r\n          clearTimeout(silenceTimerRef.current);\r\n        }\r\n      };\r\n      \r\n      recognitionRef.current.onend = () => {\r\n        console.log('Voice recognition ended');\r\n        if (isListening && voiceStatus === 'listening') {\r\n          // If we're still supposed to be listening, restart\r\n          try {\r\n            recognitionRef.current.start();\r\n          } catch (e) {\r\n            console.error('Error restarting recognition:', e);\r\n          }\r\n        } else {\r\n          setIsListening(false);\r\n          if (voiceStatus === 'listening') {\r\n            setVoiceStatus('captured');\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Start recognition\r\n      recognitionRef.current.start();\r\n    } catch (error) {\r\n      console.error('Error starting voice recognition:', error);\r\n      setTranscriptionError(t('transcriptionError'));\r\n      setVoiceStatus('error');\r\n      setIsListening(false);\r\n    }\r\n  }, [isListening, resetSilenceTimer, t, voiceStatus]);\r\n  \r\n  // Stop voice recording\r\n  const stopVoiceRecording = useCallback(() => {\r\n    if (recognitionRef.current && isListening) {\r\n      try {\r\n        recognitionRef.current.stop();\r\n        console.log('Voice recognition stopped');\r\n      } catch (e) {\r\n        console.error('Error stopping recognition:', e);\r\n      }\r\n    }\r\n    \r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n      silenceTimerRef.current = null;\r\n    }\r\n    \r\n    setIsListening(false);\r\n    setVoiceStatus('processing');\r\n    \r\n    // Simulate processing delay\r\n    setTimeout(() => {\r\n      if (transcribedText) {\r\n        setVoiceStatus('captured');\r\n      } else {\r\n        setTranscriptionError(t('noSpeechDetected'));\r\n        setVoiceStatus('error');\r\n      }\r\n    }, 1000);\r\n  }, [isListening, t, transcribedText]);\r\n  \r\n  // Cancel voice recording\r\n  const cancelVoiceRecording = useCallback(() => {\r\n    if (recognitionRef.current && isListening) {\r\n      try {\r\n        recognitionRef.current.stop();\r\n        console.log('Voice recognition cancelled');\r\n      } catch (e) {\r\n        console.error('Error stopping recognition:', e);\r\n      }\r\n    }\r\n    \r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n      silenceTimerRef.current = null;\r\n    }\r\n    \r\n    setIsListening(false);\r\n    setVoiceStatus(null);\r\n    setTranscribedText('');\r\n    setTranscriptionError('');\r\n  }, [isListening]);\r\n  \r\n  // Context value\r\n  const contextValue = {\r\n    voiceStatus,\r\n    setVoiceStatus,\r\n    transcribedText,\r\n    setTranscribedText,\r\n    transcriptionError,\r\n    setTranscriptionError,\r\n    isListening,\r\n    startVoiceRecording,\r\n    stopVoiceRecording,\r\n    cancelVoiceRecording\r\n  };\r\n  \r\n  return (\r\n    <VoiceContext.Provider value={contextValue}>\r\n      {children}\r\n    </VoiceContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Custom hook to use the voice context\r\n * @returns {Object} Voice context value\r\n */\r\nexport const useVoice = () => {\r\n  const context = useContext(VoiceContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useVoice must be used within a VoiceProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default VoiceContext;\r\n","import React, { memo, forwardRef, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { Link, useLocation } from 'react-router-dom';\nimport { PlusCircleIcon, DocumentTextIcon, UserIcon, DocumentCheckIcon } from '@heroicons/react/24/outline';\nimport { Button, Image } from '../ui';\nimport { usePrefetchRoute } from '../../hooks';\n\n/**\n * Utility function to conditionally join class names\n * Memoized to prevent recreation on each render\n */\nconst classNames = (...classes) => {\n  return classes.filter(Boolean).join(' ');\n};\n\n// Define routes for prefetching\nconst routes = {\n  '/profile': React.lazy(() => import('../profile/ProfilePage')),\n  '/': React.lazy(() => import('../tickets/JobTicketForm')),\n  '/submitted': React.lazy(() => import('../tickets/SubmittedTicketList')),\n  '/drafts': React.lazy(() => import('../tickets/DraftTicketList'))\n};\n\n/**\n * Sidebar component for navigation\n * Provides access to job ticket creation, submitted tickets, and draft tickets\n */\nconst Sidebar = forwardRef(({ sidebarOpen, setSidebarOpen }, ref) => {\n  const { t } = useLanguage();\n  const { \n    viewMode, \n    setViewMode, \n    draftTickets, \n    selectedDraftTicket, \n    setSelectedDraftTicket,\n    setTicketMode \n  } = useTicket();\n  const { user, isAuthenticated, logout } = useAuth();\n  \n  // Use location for route prefetching\n  const location = useLocation();\n  \n  // Use prefetch hook to preload routes\n  usePrefetchRoute(routes);\n  \n  // Handle navigation item click - memoized to prevent recreation on each render\n  const handleCreateTicketClick = useCallback(() => {\n    // Set ticket mode to manual to ensure form loads properly\n    setTicketMode('manual');\n    // Change view mode to form to load the appropriate form component\n    setViewMode('form');\n  }, [setTicketMode, setViewMode]);\n  \n  const handleSubmittedTicketsClick = useCallback(() => {\n    setViewMode('submittedList');\n  }, [setViewMode]);\n  \n  const handleDraftTicketsClick = useCallback(() => {\n    setViewMode('draftList');\n  }, [setViewMode]);\n  \n  // Memoize the logout function to prevent recreation on each render\n  const handleLogout = useCallback(() => {\n    logout();\n  }, [logout]);\n\n  return (\n    <div\n      ref={ref}\n      className={classNames(\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full',\n        'fixed top-0 left-0 z-40 h-full w-64 bg-gray-900 transition-transform duration-300 ease-in-out md:translate-x-0'\n      )}\n    >\n      <div className=\"flex h-full flex-col gap-y-5 overflow-y-auto px-6 py-4\">\n        <div className=\"flex h-16 shrink-0 items-center\">\n          <h2 className=\"text-2xl font-bold text-white\">Job Ticket</h2>\n        </div>\n        \n        {/* Logo */}\n        <div className=\"flex flex-shrink-0 items-center px-4\">\n          <Image\n            className=\"h-8 w-auto\"\n            src=\"/logo.png\"\n            alt=\"JobTicketInvoice\"\n            lazy={false} // Don't lazy load the logo as it's above the fold\n          />\n        </div>\n        \n        {/* User profile section */}\n        {isAuthenticated && user && (\n          <div className=\"mt-5 flex flex-col items-center px-4 pb-5 border-b border-gray-800\">\n            <div className=\"relative\">\n              <div className=\"h-12 w-12 rounded-full bg-slate-700 flex items-center justify-center\">\n                {user.logo_url ? (\n                  <Image \n                    src={user.logo_url} \n                    alt=\"User\" \n                    className=\"h-10 w-10 rounded-full object-cover\"\n                    fallbackSrc=\"\"\n                    lazy={false} // Don't lazy load user avatar as it's important for UX\n                  />\n                ) : (\n                  <UserIcon className=\"h-6 w-6 text-gray-400\" aria-hidden=\"true\" />\n                )}\n              </div>\n            </div>\n            <div className=\"mt-3 text-center\">\n              <p className=\"text-sm font-medium text-gray-400\">{t('common.loggedInAs')}</p>\n              <p className=\"text-base font-semibold text-white truncate max-w-[200px]\">{user.name || user.email}</p>\n              <div className=\"mt-2 flex flex-col space-y-1\">\n                <Link to=\"/profile\" className=\"text-xs text-orange-500 hover:text-orange-400\">\n                  {t('nav.profile')}\n                </Link>\n                <button \n                  onClick={handleLogout}\n                  className=\"text-xs text-gray-400 hover:text-gray-300\"\n                >\n                  {t('nav.logout')}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Navigation */}\n        <nav className=\"flex flex-1 flex-col\">\n          <ul className=\"flex flex-1 flex-col gap-y-7\">\n            <li>\n              <ul className=\"-mx-2 space-y-1\">\n                {/* Create Job Ticket Button */}\n                <li className=\"mb-6\">\n                  <Button\n                    onClick={handleCreateTicketClick}\n                    variant=\"success\"\n                    fullWidth\n                    className=\"flex items-center justify-center gap-x-2\"\n                  >\n                    <PlusCircleIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    <span>{t('jobTicket.createNew')}</span>\n                  </Button>\n                </li>\n                \n                {/* Job Tickets Header */}\n                <li>\n                  <div className=\"text-sm font-semibold leading-6 text-white px-2 mb-3\">\n                    {t('nav.jobTickets')}\n                  </div>\n                </li>\n                \n                {/* Submitted Job Tickets section */}\n                <li>\n                  <button\n                    onClick={handleSubmittedTicketsClick}\n                    className={classNames(\n                      viewMode === 'submittedList'\n                        ? 'bg-gray-800 text-white'\n                        : 'text-gray-400 hover:text-white hover:bg-gray-800',\n                      'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold w-full text-left'\n                    )}\n                  >\n                    <DocumentCheckIcon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\n                    {t('nav.submitted')}\n                  </button>\n                </li>\n                \n                {/* Draft Job Tickets section */}\n                <li>\n                  <button\n                    onClick={handleDraftTicketsClick}\n                    className={classNames(\n                      viewMode === 'draftList'\n                        ? 'bg-gray-800 text-white'\n                        : 'text-gray-400 hover:text-white hover:bg-gray-800',\n                      'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold w-full text-left'\n                    )}\n                  >\n                    <DocumentTextIcon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\n                    {t('nav.drafts')}\n                    {draftTickets.length > 0 && (\n                      <span className=\"ml-auto w-5 h-5 rounded-full bg-orange-500 flex items-center justify-center text-xs text-white\">\n                        {draftTickets.length}\n                      </span>\n                    )}\n                  </button>\n                </li>\n                \n                {/* Development Tools section - only visible in development mode */}\n                {process.env.NODE_ENV === 'development' && (\n                  <li className=\"mt-8\">\n                    <div className=\"text-xs font-semibold leading-6 text-gray-400 px-2 mb-2\">\n                      Development Tools\n                    </div>\n                    <ul className=\"-mx-2 space-y-1\">\n                      <li>\n                        <Link\n                          to=\"/auth-test\"\n                          className=\"text-gray-400 hover:text-white hover:bg-gray-800 group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold\"\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                          </svg>\n                          {t('nav.authTest')}\n                        </Link>\n                      </li>\n                    </ul>\n                  </li>\n                )}\n              </ul>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n});\n\nexport default memo(Sidebar);\n","import React, { memo } from 'react';\r\nimport { MicrophoneIcon, PencilSquareIcon, QuestionMarkCircleIcon, DocumentTextIcon } from '@heroicons/react/24/outline';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport { useTicket } from '../context/TicketContext';\r\nimport { useVoice } from '../context/VoiceContext';\r\n\r\n/**\r\n * Landing Page component\r\n * Displays the initial screen with options to create job tickets\r\n * with a professional and visually appealing design\r\n */\r\nconst LandingPage = () => {\r\n  const { t, language } = useLanguage();\r\n  const { setTicketMode, setViewMode } = useTicket();\r\n  const { startVoiceRecording } = useVoice();\r\n  \r\n  // Handle manual job ticket creation\r\n  const handleManualClick = () => {\r\n    setTicketMode('manual');\r\n    setViewMode('form');\r\n  };\r\n  \r\n  // Handle voice job ticket creation\r\n  const handleVoiceClick = () => {\r\n    setTicketMode('voice');\r\n    setViewMode('form');\r\n    startVoiceRecording();\r\n  };\r\n  \r\n  // Handle help button click (placeholder for future functionality)\r\n  const handleHelpClick = () => {\r\n    console.log('Help button clicked');\r\n    // Future functionality will be added here\r\n  };\r\n  \r\n  return (\r\n    <div className=\"relative flex flex-col items-center justify-center min-h-[80vh] px-4 py-8 overflow-hidden\">\r\n      {/* Background decorative elements */}\r\n      <div className=\"absolute inset-0 z-0 overflow-hidden\">\r\n        {/* Top left decorative shape */}\r\n        <div className=\"absolute -top-20 -left-20 w-64 h-64 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Bottom right decorative shape */}\r\n        <div className=\"absolute -bottom-32 -right-32 w-96 h-96 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Center decorative element */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\r\n          <DocumentTextIcon className=\"w-96 h-96 text-gray-700 opacity-[0.03]\"/>\r\n        </div>\r\n        \r\n        {/* Additional subtle shapes */}\r\n        <div className=\"absolute top-1/4 right-1/4 w-20 h-20 rounded-lg rotate-45 bg-gray-600 opacity-[0.03]\"></div>\r\n        <div className=\"absolute bottom-1/3 left-1/3 w-16 h-16 rounded-lg rotate-12 bg-gray-600 opacity-[0.03]\"></div>\r\n      </div>\r\n      \r\n      {/* Main content */}\r\n      <div className=\"relative z-10 w-full max-w-3xl mx-auto bg-gray-900 bg-opacity-60 backdrop-filter backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-800 p-8 sm:p-10\">\r\n        <div className=\"text-center mb-8\">\r\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-3\">{t('createJobTicket')}</h2>\r\n          <p className=\"text-gray-300 text-sm sm:text-base max-w-md mx-auto\">\r\n            {language === 'en' ? \r\n              'Select how you would like to create your job ticket' : \r\n              'Seleccione cómo desea crear su boleta de trabajo'}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-stretch\">\r\n          {/* By Hand Button */}\r\n          <button\r\n            onClick={handleManualClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('byHand')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <PencilSquareIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('byHand')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Fill out form manually' : 'Llenar formulario manualmente'}\r\n            </span>\r\n          </button>\r\n          \r\n          {/* By Voice Button */}\r\n          <button\r\n            onClick={handleVoiceClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('byVoice')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <MicrophoneIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('byVoice')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Create using voice commands' : 'Crear usando comandos de voz'}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Need Help button */}\r\n      <div className=\"fixed bottom-4 right-4 z-20\">\r\n        <button\r\n          onClick={handleHelpClick}\r\n          className=\"flex items-center space-x-2 bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-full transition-colors shadow-lg border border-gray-700\"\r\n          aria-label=\"Need Help?\"\r\n        >\r\n          <QuestionMarkCircleIcon className=\"h-5 w-5 text-orange-500\" />\r\n          <span className=\"text-sm\">\r\n            {language === 'en' ? 'Need Help?' : '¿Necesita Ayuda?'}\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(LandingPage);\r\n","import React, { useState, useEffect, memo } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useTicket } from '../context/TicketContext';\nimport { calculateHoursBetween } from '../utils/validators';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const travelStartTime = watch('travelStartTime');\n  const travelEndTime = watch('travelEndTime');\n  \n  // Update total hours when start/end times change\n  useEffect(() => {\n    if (workStartTime && workEndTime) {\n      const hours = calculateHoursBetween(workStartTime, workEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [workStartTime, workEndTime, setValue]);\n  \n  useEffect(() => {\n    if (travelStartTime && travelEndTime) {\n      const hours = calculateHoursBetween(travelStartTime, travelEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [travelStartTime, travelEndTime, setValue]);\n  \n  // Auto-save form data when fields change\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language\n  const getPartsList = () => {\n    return [\n      { value: t('jobTicket.parts.lubricant'), label: t('jobTicket.parts.lubricant') },\n      { value: t('jobTicket.parts.pumpSeal'), label: t('jobTicket.parts.pumpSeal') },\n      { value: t('jobTicket.parts.thrustChamber'), label: t('jobTicket.parts.thrustChamber') },\n      { value: t('jobTicket.parts.vfdBreakerSwitch'), label: t('jobTicket.parts.vfdBreakerSwitch') },\n      { value: t('jobTicket.parts.serviceKit'), label: t('jobTicket.parts.serviceKit') },\n      { value: t('jobTicket.parts.other'), label: t('jobTicket.parts.other') },\n    ];\n  };\n  \n  // Handle adding a part\n  const handleAddPart = () => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('partsUsed') || [];\n    setValue('partsUsed', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  };\n  \n  // Handle removing a part\n  const handleRemovePart = (index) => {\n    const currentParts = watch('partsUsed') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('partsUsed', updatedParts);\n  };\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n    }\n  }, [submitError]);\n  \n  // Handle form submission\n  const onSubmit = async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-8 max-w-3xl mx-auto\">\n      {/* Job Date */}\n      <div>\n        <label htmlFor=\"jobDate\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.date')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('jobDate', { required: true })}\n          />\n        </div>\n      </div>\n      \n      {/* Company Name */}\n      <div>\n        <label htmlFor=\"companyName\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.companyName')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('companyName', { required: true })}\n          />\n        </div>\n      </div>\n      \n      {/* Customer Name */}\n      <div>\n        <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.customerName') || 'Customer Name'}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('customerName')}\n          />\n        </div>\n      </div>\n      \n      {/* Location */}\n      <div>\n        <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.location')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('location')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Type */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workType')}\n          />\n        </div>\n      </div>\n      \n      {/* Equipment */}\n      <div>\n        <label htmlFor=\"equipment\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.equipment')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('equipment')}\n          />\n        </div>\n      </div>\n\n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"workStartTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workStartTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('workStartTime')}\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"workEndTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workEndTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('workEndTime')}\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Total Work Hours (calculated) */}\n      <div>\n        <label htmlFor=\"workTotalHours\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workTotalTime')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"workTotalHours\"\n            name=\"workTotalHours\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={true}\n            {...register('workTotalHours')}\n          />\n        </div>\n      </div>\n      \n      {/* Travel Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"driveStartTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.travelStartTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('driveStartTime')}\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"driveEndTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.travelEndTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('driveEndTime')}\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Total Travel Hours (calculated) */}\n      <div>\n        <label htmlFor=\"driveTotalHours\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.travelTotalTime')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"driveTotalHours\"\n            name=\"driveTotalHours\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={true}\n            {...register('driveTotalHours')}\n          />\n        </div>\n      </div>\n      \n      {/* Travel Type */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.travelType')}\n        </label>\n        <div className=\"flex space-x-4\">\n          <Controller\n            name=\"travelType\"\n            control={control}\n            render={({ field }) => (\n              <>\n                <label className={`\n                  flex items-center justify-center px-3 py-2 rounded-md cursor-pointer\n                  ${field.value === 'oneWay' \n                    ? 'bg-orange-600 text-white' \n                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}\n                  ${readOnly ? 'pointer-events-none' : ''}\n                `}>\n                  <input\n                    type=\"radio\"\n                    value=\"oneWay\"\n                    className=\"sr-only\"\n                    disabled={readOnly}\n                    onChange={() => field.onChange('oneWay')}\n                    checked={field.value === 'oneWay'}\n                  />\n                  <span>{t('jobTicket.oneWay')}</span>\n                </label>\n                \n                <label className={`\n                  flex items-center justify-center px-3 py-2 rounded-md cursor-pointer\n                  ${field.value === 'roundTrip' \n                    ? 'bg-orange-600 text-white' \n                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}\n                  ${readOnly ? 'pointer-events-none' : ''}\n                `}>\n                  <input\n                    type=\"radio\"\n                    value=\"roundTrip\"\n                    className=\"sr-only\"\n                    disabled={readOnly}\n                    onChange={() => field.onChange('roundTrip')}\n                    checked={field.value === 'roundTrip'}\n                  />\n                  <span>{t('jobTicket.roundTrip')}</span>\n                </label>\n              </>\n            )}\n          />\n        </div>\n      </div>\n      \n      {/* Parts Used Section */}\n      <div className=\"max-w-3xl\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.parts.title')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex space-x-2 mb-2\">\n            <select\n              value={selectedPart}\n              onChange={(e) => setSelectedPart(e.target.value)}\n              className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            >\n              <option value=\"\">{t('jobTicket.parts.placeholder')}</option>\n              {getPartsList().map((part) => (\n                <option key={part.value} value={part.value}>\n                  {part.label}\n                </option>\n              ))}\n            </select>\n            \n            <button\n              type=\"button\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n              className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50\"\n            >\n              {t('jobTicket.addPart')}\n            </button>\n          </div>\n        )}\n        \n        <div className=\"mt-2 space-y-2\">\n          {watch('partsUsed')?.map((part, index) => (\n            <div key={index} className=\"flex items-center justify-between bg-gray-700 px-3 py-2 rounded-md\">\n              <span>{part}</span>\n              {!readOnly && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemovePart(index)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Description of Work */}\n      <div>\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workDescription')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workDescription')}\n          />\n        </div>\n      </div>\n      \n      {/* Submitted By */}\n      <div>\n        <label htmlFor=\"submittedBy\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.submittedBy')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"submittedBy\"\n            name=\"submittedBy\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('submittedBy')}\n          />\n        </div>\n      </div>\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </div>\n      )}\n      \n      {showErrorMessage && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitError')}</span>\n        </div>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={`inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${isSubmitting ? 'bg-gray-500' : 'bg-orange-600 hover:bg-orange-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors duration-200`}\n            >\n              {isSubmitting ? t('common.submitting') : t('jobTicket.submit')}\n              {isSubmitting && (\n                <svg className=\"animate-spin ml-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              )}\n            </button>\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default memo(JobTicketForm);\n","/**\n * Voice Parser Utility\n * \n * Parses transcribed text from voice input and extracts structured data\n * for job ticket form fields.\n */\n\n/**\n * Extract job ticket data from transcribed text\n * @param {string} text - The transcribed text from voice input\n * @returns {Object} - Extracted job ticket data\n */\nexport const parseJobTicketFromVoice = (text) => {\n  if (!text) return {};\n  \n  // Normalize text for consistent parsing\n  const normalizedText = text.toLowerCase().trim();\n  \n  // Initialize extracted data object\n  const extractedData = {};\n  \n  // Extract company name\n  extractedData.companyName = extractCompanyName(normalizedText);\n  \n  // Extract customer name\n  extractedData.customerName = extractCustomerName(normalizedText);\n  \n  // Extract location\n  extractedData.location = extractLocation(normalizedText);\n  \n  // Extract work type\n  extractedData.workType = extractWorkType(normalizedText);\n  \n  // Extract equipment\n  extractedData.equipment = extractEquipment(normalizedText);\n  \n  // Extract work description\n  extractedData.workDescription = extractWorkDescription(normalizedText);\n  \n  // Extract parts used\n  extractedData.partsUsed = extractPartsUsed(normalizedText);\n  \n  // Extract submitted by\n  extractedData.submittedBy = extractSubmittedBy(normalizedText);\n  \n  // Extract times\n  const times = extractTimes(normalizedText);\n  if (times.workStartTime) extractedData.workStartTime = times.workStartTime;\n  if (times.workEndTime) extractedData.workEndTime = times.workEndTime;\n  if (times.driveStartTime) extractedData.driveStartTime = times.driveStartTime;\n  if (times.driveEndTime) extractedData.driveEndTime = times.driveEndTime;\n  \n  // Extract travel type\n  extractedData.travelType = extractTravelType(normalizedText);\n  \n  // Extract job date\n  extractedData.jobDate = extractJobDate(normalizedText);\n  \n  return extractedData;\n};\n\n/**\n * Extract company name from text\n */\nconst extractCompanyName = (text) => {\n  // Common patterns for company name\n  const patterns = [\n    /(?:company|company name|for company|at company|with company)[:\\s]+([^.,]+)/i,\n    /(?:job|work)(?:\\s+is)?(?:\\s+for)?(?:\\s+company)?[:\\s]+([^.,]+)/i,\n    /(?:at|for)[:\\s]+([^.,]+?)(?:\\s+(?:in|at|on|job|work))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract customer name from text\n */\nconst extractCustomerName = (text) => {\n  // Common patterns for customer name\n  const patterns = [\n    /(?:customer|customer name|client|client name)[:\\s]+([^.,]+)/i,\n    /(?:for|with) customer[:\\s]+([^.,]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract location from text\n */\nconst extractLocation = (text) => {\n  // Common patterns for location\n  const patterns = [\n    /(?:location|site|address|place|facility|well|lease)[:\\s]+([^.,]+)/i,\n    /(?:at|in) (?:location|site|address|place|facility|well|lease)[:\\s]+([^.,]+)/i,\n    /(?:at|in)[:\\s]+([^.,]+?)(?:\\s+(?:on|for|to|performed|did|completed))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract work type from text\n */\nconst extractWorkType = (text) => {\n  // Common patterns for work type\n  const patterns = [\n    /(?:work type|type of work|job type)[:\\s]+([^.,]+)/i,\n    /(?:performed|did|completed)[:\\s]+([^.,]+?)(?:\\s+(?:at|on|for|work|job))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract equipment from text\n */\nconst extractEquipment = (text) => {\n  // Common patterns for equipment\n  const patterns = [\n    /(?:equipment|machine|pump|unit|system)[:\\s]+([^.,]+)/i,\n    /(?:worked on|serviced|repaired|maintained)[:\\s]+([^.,]+?)(?:\\s+(?:at|on|for|which|that))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract work description from text\n */\nconst extractWorkDescription = (text) => {\n  // Common patterns for work description\n  const patterns = [\n    /(?:work description|description of work|work performed|job description)[:\\s]+([^.]+)/i,\n    /(?:performed|did|completed|work included)[:\\s]+([^.]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  // If no specific description found, use the entire text as fallback\n  return text;\n};\n\n/**\n * Extract parts used from text\n */\nconst extractPartsUsed = (text) => {\n  const parts = [];\n  \n  // Common part names to look for\n  const commonParts = [\n    'lubricant', 'pump seal', 'thrust chamber', \n    'vfd breaker', 'vfd switch', 'service kit', \n    'safety maintenance kit', 'maintenance kit'\n  ];\n  \n  // Check for parts used section\n  const partsSection = text.match(/(?:parts used|used parts|parts|replaced|installed)[:\\s]+([^.]+)/i);\n  \n  if (partsSection && partsSection[1]) {\n    const partsText = partsSection[1].toLowerCase();\n    \n    // Check for common parts in the parts section\n    commonParts.forEach(part => {\n      if (partsText.includes(part)) {\n        parts.push(part);\n      }\n    });\n  } else {\n    // If no specific parts section, check entire text\n    commonParts.forEach(part => {\n      if (text.includes(part)) {\n        parts.push(part);\n      }\n    });\n  }\n  \n  return parts;\n};\n\n/**\n * Extract submitted by from text\n */\nconst extractSubmittedBy = (text) => {\n  // Common patterns for submitted by\n  const patterns = [\n    /(?:submitted by|completed by|technician|tech|my name is|this is)[:\\s]+([^.,]+)/i,\n    /(?:submitted|completed)(?:\\s+by)?[:\\s]+([^.,]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract times from text\n */\nconst extractTimes = (text) => {\n  const times = {};\n  \n  // Time patterns (both 12h and 24h formats)\n  const timePattern = /(\\d{1,2})(?::(\\d{2}))?(?:\\s*(am|pm))?/i;\n  \n  // Work start time\n  const workStartMatch = text.match(/(?:work|job)(?:\\s+start(?:ed)?|\\s+begin|began)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (workStartMatch && workStartMatch[1]) {\n    const timeMatch = workStartMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.workStartTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Work end time\n  const workEndMatch = text.match(/(?:work|job)(?:\\s+end(?:ed)?|finished|complete(?:d)?)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (workEndMatch && workEndMatch[1]) {\n    const timeMatch = workEndMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.workEndTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Drive/travel start time\n  const driveStartMatch = text.match(/(?:drive|travel|trip)(?:\\s+start(?:ed)?|\\s+begin|began)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (driveStartMatch && driveStartMatch[1]) {\n    const timeMatch = driveStartMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.driveStartTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Drive/travel end time\n  const driveEndMatch = text.match(/(?:drive|travel|trip)(?:\\s+end(?:ed)?|finished|complete(?:d)?)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (driveEndMatch && driveEndMatch[1]) {\n    const timeMatch = driveEndMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.driveEndTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  return times;\n};\n\n/**\n * Format time string to HH:MM format\n */\nconst formatTimeString = (timeMatch) => {\n  let hours = parseInt(timeMatch[1], 10);\n  const minutes = timeMatch[2] ? timeMatch[2] : '00';\n  const ampm = timeMatch[3] ? timeMatch[3].toLowerCase() : null;\n  \n  // Convert to 24-hour format if needed\n  if (ampm === 'pm' && hours < 12) {\n    hours += 12;\n  } else if (ampm === 'am' && hours === 12) {\n    hours = 0;\n  }\n  \n  // Format as HH:MM\n  return `${hours.toString().padStart(2, '0')}:${minutes.padStart(2, '0')}`;\n};\n\n/**\n * Extract travel type from text\n */\nconst extractTravelType = (text) => {\n  if (text.includes('one way') || text.includes('oneway') || text.includes('one-way')) {\n    return 'oneWay';\n  } else if (text.includes('round trip') || text.includes('roundtrip') || text.includes('round-trip')) {\n    return 'roundTrip';\n  }\n  \n  return '';\n};\n\n/**\n * Extract job date from text\n */\nconst extractJobDate = (text) => {\n  // Common date patterns\n  const datePattern = /(\\d{1,2})[-./](\\d{1,2})[-./](\\d{2,4})/;\n  const dateTextPattern = /(?:date|job date|on)[:\\s]+([^.,]+)/i;\n  \n  // Check for date in format MM/DD/YYYY or similar\n  const dateMatch = text.match(datePattern);\n  if (dateMatch) {\n    const month = parseInt(dateMatch[1], 10);\n    const day = parseInt(dateMatch[2], 10);\n    let year = parseInt(dateMatch[3], 10);\n    \n    // Fix two-digit years\n    if (year < 100) {\n      year += 2000;\n    }\n    \n    // Format as YYYY-MM-DD for input[type=\"date\"]\n    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n  }\n  \n  // Check for date mentioned in text\n  const dateTextMatch = text.match(dateTextPattern);\n  if (dateTextMatch && dateTextMatch[1]) {\n    // Try to parse the date text - this is a simplified approach\n    const dateText = dateTextMatch[1].toLowerCase();\n    \n    // Check for \"today\", \"yesterday\", etc.\n    const today = new Date();\n    \n    if (dateText.includes('today')) {\n      return formatDateString(today);\n    } else if (dateText.includes('yesterday')) {\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      return formatDateString(yesterday);\n    } else if (dateText.includes('tomorrow')) {\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      return formatDateString(tomorrow);\n    }\n  }\n  \n  // Default to today's date if no date found\n  return formatDateString(new Date());\n};\n\n/**\n * Format date as YYYY-MM-DD\n */\nconst formatDateString = (date) => {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n};\n","import React, { memo, useState, useEffect } from 'react';\r\nimport { MicrophoneIcon, StopIcon, PencilSquareIcon } from '@heroicons/react/24/outline';\r\nimport { ArrowLeftIcon, ExclamationCircleIcon } from '@heroicons/react/24/solid';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport { useVoice } from '../context/VoiceContext';\r\nimport { useTicket } from '../context/TicketContext';\r\nimport JobTicketForm from './JobTicketForm';\r\nimport { parseJobTicketFromVoice } from '../utils/voiceParser';\r\n\r\n/**\r\n * Voice Recorder component for voice-based job ticket creation\r\n */\r\nconst VoiceRecorder = () => {\r\n  const { translations, t } = useLanguage();\r\n  const { \r\n    voiceStatus, \r\n    transcribedText, \r\n    transcriptionError, \r\n    startVoiceRecording, \r\n    stopVoiceRecording, \r\n    cancelVoiceRecording \r\n  } = useVoice();\r\n  \r\n  const { \r\n    setTicketMode, \r\n    setViewMode, \r\n    saveJobTicketAsDraft, \r\n    setSelectedDraftTicket,\r\n    updateFormData\r\n  } = useTicket();\r\n  \r\n  // State to store parsed job ticket data\r\n  const [parsedJobTicket, setParsedJobTicket] = useState({});\r\n  \r\n  // Parse transcribed text when it changes\r\n  useEffect(() => {\r\n    if (transcribedText && voiceStatus === 'captured') {\r\n      const extractedData = parseJobTicketFromVoice(transcribedText);\r\n      console.log('Parsed job ticket data:', extractedData);\r\n      setParsedJobTicket(extractedData);\r\n      \r\n      // Update form data with extracted values\r\n      Object.entries(extractedData).forEach(([field, value]) => {\r\n        if (value) {\r\n          updateFormData(field, value);\r\n        }\r\n      });\r\n    }\r\n  }, [transcribedText, voiceStatus, updateFormData]);\r\n  \r\n  // Handle back button click\r\n  const handleBackClick = () => {\r\n    setTicketMode(null);\r\n    setViewMode('landing');\r\n    cancelVoiceRecording();\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <button \r\n        onClick={handleBackClick}\r\n        className=\"flex items-center text-gray-400 hover:text-white mb-6\"\r\n      >\r\n        <ArrowLeftIcon className=\"h-4 w-4 mr-1\" />\r\n        {translations.back}\r\n      </button>\r\n      \r\n      {/* Listening state with animated microphone */}\r\n      {voiceStatus === 'listening' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          {/* Enhanced instruction text - larger and burnt orange */}\r\n          <p className=\"text-2xl md:text-3xl font-bold text-orange-500 mb-8\">\r\n            {translations.speakJobTicketInfo}\r\n          </p>\r\n          \r\n          <div className=\"relative mb-8\">\r\n            {/* Larger animated microphone with pulse effect */}\r\n            <div className=\"pulse-dot\">\r\n              <MicrophoneIcon className=\"h-20 w-20 mx-auto mb-4 text-orange-500\" />\r\n            </div>\r\n            \r\n            {/* Enhanced animated sound wave circles */}\r\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 -z-10\">\r\n              <div className=\"h-24 w-24 rounded-full bg-orange-500 opacity-20 pulse-ring\"></div>\r\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-32 w-32 rounded-full bg-orange-500 opacity-10 pulse-ring animation-delay-300\"></div>\r\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-40 w-40 rounded-full bg-orange-500 opacity-5 pulse-ring animation-delay-600\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Animated waveform */}\r\n          <div className=\"waveform mb-8\">\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n          </div>\r\n          \r\n          <p className=\"text-xl font-medium mb-6\">{translations.listening}</p>\r\n          \r\n          {/* Control buttons */}\r\n          <div className=\"flex flex-col space-y-4 items-center\">\r\n            <div className=\"flex flex-wrap justify-center gap-4\">\r\n              <button \r\n                onClick={stopVoiceRecording}\r\n                className=\"bg-orange-700 hover:bg-orange-800 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <StopIcon className=\"h-5 w-5\" />\r\n                <span>{translations.stopRecording}</span>\r\n              </button>\r\n              \r\n              <button \r\n                onClick={cancelVoiceRecording}\r\n                className=\"bg-gray-700 hover:bg-gray-800 text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                {translations.cancelRecording}\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Additional buttons for visual only - no functionality */}\r\n            <div className=\"flex flex-wrap justify-center gap-4 mt-4\">\r\n              <button \r\n                onClick={startVoiceRecording}\r\n                className=\"bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <MicrophoneIcon className=\"h-5 w-5\" />\r\n                <span>{translations.restartRecording}</span>\r\n              </button>\r\n              \r\n              <button \r\n                onClick={stopVoiceRecording}\r\n                className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <PencilSquareIcon className=\"h-5 w-5\" />\r\n                <span>{translations.allDoneCreateJobTicket}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Processing state */}\r\n      {voiceStatus === 'processing' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"mb-4\">\r\n            <svg className=\"animate-spin h-10 w-10 text-orange-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n          </div>\r\n          <p className=\"text-xl font-medium\">{translations.processingAudio}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Error state */}\r\n      {voiceStatus === 'error' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-red-500 mb-4\">\r\n            <ExclamationCircleIcon className=\"h-16 w-16 mx-auto\" />\r\n          </div>\r\n          <p className=\"text-xl font-medium text-red-500 mb-4\">{transcriptionError}</p>\r\n          <button \r\n            onClick={() => setTicketMode(null)}\r\n            className=\"bg-orange-700 hover:bg-orange-800 text-white px-6 py-2 rounded-lg transition-colors\"\r\n          >\r\n            {translations.goBack}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Captured state with transcription and options */}\r\n      {voiceStatus === 'captured' && (\r\n        <div>\r\n          {/* Header with title and back button */}\r\n          <div className=\"flex justify-between items-center mb-6\">\r\n            <h2 className=\"text-2xl font-bold\">{t('jobTicket.voiceCaptured')}</h2>\r\n            <button \r\n              onClick={handleBackClick}\r\n              className=\"bg-gray-700 hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n            >\r\n              <ArrowLeftIcon className=\"h-5 w-5\" />\r\n              <span>{t('jobTicket.goBack')}</span>\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Prominent transcription display - the main feature requested */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 mb-8 border-2 border-orange-500\">\r\n            <h3 className=\"text-xl font-bold mb-3 text-orange-500\">{t('jobTicket.rawTranscription')}</h3>\r\n            <div className=\"bg-gray-100 dark:bg-gray-700 p-4 rounded-lg max-h-60 overflow-y-auto\">\r\n              <p className=\"text-gray-900 dark:text-gray-100 text-lg\">{transcribedText || t('jobTicket.noTranscriptionAvailable')}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Action buttons - clearly separated and prominently displayed */}\r\n          <div className=\"flex flex-wrap gap-4 justify-center mb-8\">\r\n            <button \r\n              onClick={startVoiceRecording}\r\n              className=\"bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 text-lg\"\r\n            >\r\n              <MicrophoneIcon className=\"h-6 w-6\" />\r\n              <span>{t('jobTicket.restartRecording')}</span>\r\n            </button>\r\n            \r\n            <button\r\n              onClick={() => {\r\n                const newDraft = saveJobTicketAsDraft({ ...parsedJobTicket, workDescription: transcribedText });\r\n                setSelectedDraftTicket(newDraft);\r\n                setViewMode('draft');\r\n              }}\r\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 text-lg\"\r\n            >\r\n              <PencilSquareIcon className=\"h-6 w-6\" />\r\n              <span>{t('jobTicket.submit')}</span>\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Extracted data with collapsible section */}\r\n          <div className=\"bg-gray-800 rounded-lg p-4 mb-6 border border-gray-700\">\r\n            <div className=\"flex justify-between items-center cursor-pointer\" \r\n                 onClick={() => {\r\n                   const detailsEl = document.getElementById('extractedDataDetails');\r\n                   if (detailsEl) detailsEl.open = !detailsEl.open;\r\n                 }}>\r\n              <h3 className=\"text-lg font-medium\">{t('jobTicket.extractedData')}</h3>\r\n              <span className=\"text-sm text-gray-400\">(Click to expand/collapse)</span>\r\n            </div>\r\n            \r\n            <details id=\"extractedDataDetails\" className=\"mt-2\">\r\n              <summary className=\"sr-only\">Extracted Data Details</summary>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 pl-4 border-l-2 border-gray-700\">\r\n                {Object.entries(parsedJobTicket).map(([key, value]) => {\r\n                  // Skip empty values and arrays\r\n                  if (!value || (Array.isArray(value) && value.length === 0)) return null;\r\n                  \r\n                  // Format the key for display\r\n                  const formattedKey = key.replace(/([A-Z])/g, ' $1')\r\n                    .replace(/^./, str => str.toUpperCase());\r\n                  \r\n                  // Format the value for display\r\n                  const formattedValue = Array.isArray(value) \r\n                    ? value.join(', ')\r\n                    : value;\r\n                  \r\n                  return (\r\n                    <div key={key} className=\"flex\">\r\n                      <span className=\"font-medium text-gray-400 mr-2\">{formattedKey}:</span>\r\n                      <span className=\"text-white\">{formattedValue}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n                \r\n                {/* Recognition quality indicator */}\r\n                <div className=\"col-span-2 mt-4 flex items-center\">\r\n                  <span className=\"text-sm text-gray-400 mr-2\">{t('jobTicket.recognitionQuality')}:</span>\r\n                  <div className=\"flex space-x-1\">\r\n                    {Object.keys(parsedJobTicket).filter(key => !!parsedJobTicket[key]).length >= 5 ? (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <span className=\"ml-2 text-green-500 text-xs\">Good</span>\r\n                      </>\r\n                    ) : Object.keys(parsedJobTicket).filter(key => !!parsedJobTicket[key]).length >= 3 ? (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-yellow-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-yellow-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <span className=\"ml-2 text-yellow-500 text-xs\">Fair</span>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-red-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <span className=\"ml-2 text-red-500 text-xs\">Poor</span>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </details>\r\n          </div>\r\n          \r\n          {/* Optional: Form with prefilled data (collapsed by default) */}\r\n          <div className=\"bg-gray-800 rounded-lg p-4 mb-6 border border-gray-700\">\r\n            <div className=\"flex justify-between items-center cursor-pointer\"\r\n                 onClick={() => {\r\n                   const formEl = document.getElementById('jobTicketFormDetails');\r\n                   if (formEl) formEl.open = !formEl.open;\r\n                 }}>\r\n              <h3 className=\"text-lg font-medium\">{t('jobTicket.editForm')}</h3>\r\n              <span className=\"text-sm text-gray-400\">(Click to expand/collapse)</span>\r\n            </div>\r\n            \r\n            <details id=\"jobTicketFormDetails\" className=\"mt-2\">\r\n              <summary className=\"sr-only\">Job Ticket Form</summary>\r\n              <div className=\"mt-4\">\r\n                <JobTicketForm />\r\n              </div>\r\n            </details>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(VoiceRecorder);\r\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { useTicket } from '../../../context/TicketContext';\nimport { useAuth } from '../../../context/AuthContext';\nimport { calculateHoursBetween } from '../../../utils/validators';\nimport { Card, Button, Input, Form, LoadingSpinner } from '../../ui';\nimport { useDebounce } from '../../../hooks';\n\n/**\n * BaseJobTicketForm - Core form component that centralizes common job ticket functionality\n * \n * This component provides the foundation for all job ticket forms with:\n * - Common fields (date, company, customer, location, work hours, drive hours, description)\n * - Form state management via React Hook Form\n * - Time calculation logic for work and drive hours\n * - Draft saving functionality\n * - Form submission handling\n * - Common UI elements and layout\n * - Performance optimizations (memoization, debouncing, etc.)\n * \n * Job-specific forms should extend this component by:\n * 1. Importing and using it as a base\n * 2. Adding job-specific fields\n * 3. Extending the form data with job-specific values\n * 4. Customizing validation rules if needed\n */\n\n/**\n * Base Job Ticket Form Component\n * Provides common functionality for all job ticket forms\n */\nconst BaseJobTicketForm = ({ \n  children, \n  onSubmit, \n  readOnly = false, \n  draftData = null \n}) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft, submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  const { user } = useAuth();\n  \n  // Setup React Hook Form with memoized default values\n  const defaultValues = useMemo(() => draftData || formData || {}, [draftData, formData]);\n  \n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Memoized calculation functions\n  const calculateWorkHours = useCallback(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      return calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n    }\n    return null;\n  }, [debouncedWorkStartTime, debouncedWorkEndTime]);\n  \n  const calculateDriveHours = useCallback(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      return calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n    }\n    return null;\n  }, [debouncedDriveStartTime, debouncedDriveEndTime]);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    const hours = calculateWorkHours();\n    if (hours !== null) {\n      setValue('workTotalHours', hours);\n    }\n  }, [calculateWorkHours, setValue]);\n  \n  useEffect(() => {\n    const hours = calculateDriveHours();\n    if (hours !== null) {\n      setValue('driveTotalHours', hours);\n    }\n  }, [calculateDriveHours, setValue]);\n  \n  // Auto-save form data when fields change - with debouncing\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        // Use a timeout to debounce updates to form data\n        const timeoutId = setTimeout(() => {\n          updateFormData(name, value[name]);\n        }, 500);\n        \n        return () => clearTimeout(timeoutId);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000);\n    }\n  }, [submitSuccess]);\n  \n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000);\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent recreation\n  const handleFormSubmit = useCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // If custom onSubmit is provided, use it\n      if (onSubmit) {\n        await onSubmit(savedDraft);\n        return;\n      }\n      \n      // Otherwise use default submit behavior\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n    }\n  }, [onSubmit, saveJobTicketAsDraft, submitJobTicket]);\n  \n  // Pre-fill submittedBy field with user's name if available\n  useEffect(() => {\n    if (user?.name && !watch('submittedBy')) {\n      setValue('submittedBy', user.name);\n    }\n  }, [user, setValue, watch]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`BaseJobTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('base-job-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <Form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-8 max-w-3xl mx-auto\">\n      {/* Job Date */}\n      <Input\n        label={t('jobTicket.date')}\n        type=\"date\"\n        id=\"jobDate\"\n        name=\"jobDate\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.jobDate}\n        readOnly={readOnly}\n      />\n      \n      {/* Company Name */}\n      <Input\n        label={t('jobTicket.companyName')}\n        type=\"text\"\n        id=\"companyName\"\n        name=\"companyName\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.companyName}\n        readOnly={readOnly}\n      />\n      \n      {/* Customer Name */}\n      <Input\n        label={t('jobTicket.customerName')}\n        type=\"text\"\n        id=\"customerName\"\n        name=\"customerName\"\n        register={register}\n        error={errors.customerName}\n        readOnly={readOnly}\n      />\n      \n      {/* Location */}\n      <Input\n        label={t('jobTicket.location')}\n        type=\"text\"\n        id=\"location\"\n        name=\"location\"\n        register={register}\n        error={errors.location}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Type */}\n      <Input\n        label={t('jobTicket.workType')}\n        type=\"text\"\n        id=\"workType\"\n        name=\"workType\"\n        register={register}\n        error={errors.workType}\n        readOnly={readOnly}\n      />\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        error={errors.equipment}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.workStartTime')}\n          type=\"time\"\n          id=\"workStartTime\"\n          name=\"workStartTime\"\n          register={register}\n          error={errors.workStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workEndTime')}\n          type=\"time\"\n          id=\"workEndTime\"\n          name=\"workEndTime\"\n          register={register}\n          error={errors.workEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workTotalHours')}\n          type=\"text\"\n          id=\"workTotalHours\"\n          name=\"workTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Drive Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.driveStartTime')}\n          type=\"time\"\n          id=\"driveStartTime\"\n          name=\"driveStartTime\"\n          register={register}\n          error={errors.driveStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.driveEndTime')}\n          type=\"time\"\n          id=\"driveEndTime\"\n          name=\"driveEndTime\"\n          register={register}\n          error={errors.driveEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.driveTotalHours')}\n          type=\"text\"\n          id=\"driveTotalHours\"\n          name=\"driveTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Description of Work */}\n      <div>\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.descriptionOfWork')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workDescription')}\n          />\n        </div>\n      </div>\n      \n      {/* Submitted By */}\n      <Input\n        label={t('jobTicket.submittedBy')}\n        type=\"text\"\n        id=\"submittedBy\"\n        name=\"submittedBy\"\n        register={register}\n        error={errors.submittedBy}\n        readOnly={readOnly}\n      />\n      \n      {/* Render children (job-specific fields) */}\n      {children}\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <Card className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </Card>\n      )}\n      \n      {showErrorMessage && (\n        <Card className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitError')}</span>\n        </Card>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              variant={isSubmitting ? \"disabled\" : \"primary\"}\n              size=\"lg\"\n            >\n              {isSubmitting ? (\n                <div className=\"flex items-center\">\n                  {t('common.submitting')}\n                  <LoadingSpinner size=\"sm\" className=\"ml-2\" />\n                </div>\n              ) : t('jobTicket.submit')}\n            </Button>\n          </div>\n        </div>\n      )}\n    </Form>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(BaseJobTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PumpTechTicketForm - Job ticket form specialized for Pump Service Technicians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to pump technicians\n * - Equipment serviced field\n * - Parts used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized parts list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PumpTechTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Get parts list based on current language - memoized to prevent recreation on each render\n  const partsList = useMemo(() => [\n    { value: t('parts.lubricant'), label: t('parts.lubricant') },\n    { value: t('parts.pumpSeal'), label: t('parts.pumpSeal') },\n    { value: t('parts.thrustChamber'), label: t('parts.thrustChamber') },\n    { value: t('parts.vfdBreaker'), label: t('parts.vfdBreaker') },\n    { value: t('parts.serviceKit'), label: t('parts.serviceKit') },\n    { value: t('parts.other'), label: t('parts.other') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent recreation on each render\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  }, [selectedPart, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent recreation on each render\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle part selection change - memoized to prevent recreation on each render\n  const handlePartChange = useCallback((e) => {\n    setSelectedPart(e.target.value);\n  }, []);\n  \n  // Memoize the parts list rendering for better performance\n  const partsListItems = useMemo(() => {\n    const parts = watch('parts') || [];\n    \n    if (parts.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noParts')}\n        </li>\n      );\n    }\n    \n    return parts.map((part, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{part}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemovePart(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemovePart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pump-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        placeholder={t('jobTicket.equipmentPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Parts Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.partsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedPart}\n                onChange={handlePartChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"parts\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {partsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PumpTechTicketForm);\n","import React, { useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Input } from '../../ui';\n\n/**\n * DriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Vehicle type selection\n * - Mileage tracking\n * - Trip type (local/long haul)\n * \n * Performance optimizations:\n * - Memoized vehicle types\n * - React.memo for preventing unnecessary re-renders\n */\nconst DriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { register, formState: { errors } } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // Memoize vehicle types to prevent recreation on each render\n  const vehicleTypes = useMemo(() => [\n    { value: '', label: t('common.select') },\n    { value: 'truck', label: t('vehicleTypes.truck') || 'Truck' },\n    { value: 'van', label: t('vehicleTypes.van') || 'Van' },\n    { value: 'car', label: t('vehicleTypes.car') || 'Car' }\n  ], [t]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`DriverTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('driver-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Driver-specific fields */}\n      <div>\n        <label htmlFor=\"vehicleType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.vehicleType') || 'Vehicle Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"vehicleType\"\n            name=\"vehicleType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('vehicleType', { required: true })}\n          >\n            {vehicleTypes.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          {errors.vehicleType && (\n            <p className=\"mt-1 text-sm text-red-500\">\n              {t('validation.required')}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      {/* Mileage */}\n      <Input\n        label={t('jobTicket.mileage') || 'Mileage'}\n        type=\"number\"\n        id=\"mileage\"\n        name=\"mileage\"\n        register={register}\n        rules={{ required: true, min: 0 }}\n        error={errors.mileage}\n        placeholder={t('jobTicket.mileagePlaceholder') || 'Enter total miles driven'}\n        readOnly={readOnly}\n      />\n      \n      {/* Trip Type */}\n      <div>\n        <label htmlFor=\"tripType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.tripType') || 'Trip Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"tripType\"\n            name=\"tripType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('tripType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"local\">{t('tripTypes.local') || 'Local'}</option>\n            <option value=\"longHaul\">{t('tripTypes.longHaul') || 'Long Haul'}</option>\n          </select>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DriverTicketForm);\n","import React, { useMemo } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, LoadingSpinner } from '../ui';\n\n// Import job type specific forms\nimport { PumpTechTicketForm, DriverTicketForm } from './forms';\nimport JobTicketForm from './JobTicketForm'; // Manual \"by hand\" form\n\n/**\n * Job Ticket Form Selector Component\n * Dynamically loads the appropriate job ticket form based on user's job type\n */\nconst JobTicketFormSelector = () => {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { selectedDraftTicket, ticketMode } = useTicket();\n  \n  // Map of job types to their respective form components - defined outside render to avoid recreation\n  const jobTypeForms = useMemo(() => ({\n    'pump_tech': PumpTechTicketForm,\n    'driver': DriverTicketForm,\n    'manual': JobTicketForm,\n    // Add more job types here as they are implemented\n  }), []);\n  \n  // Memoize the job type key to prevent recalculation on every render\n  const jobTypeKey = useMemo(() => {\n    // If manual mode is explicitly set, use the manual form\n    if (ticketMode === 'manual') return 'manual';\n    \n    if (!user || !user.job_type) return 'pump_tech';\n    \n    // Normalize job type string (remove spaces, hyphens, underscores, lowercase)\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map common variations to standard keys\n    const jobTypeMap = {\n      'pump_technician': 'pump_tech',\n      'pumptechnician': 'pump_tech',\n      'pumptech': 'pump_tech',\n      'pump_service_technician': 'pump_tech',\n      'pump_service_tech': 'pump_tech',\n    };\n    \n    return jobTypeMap[normalizedJobType] || normalizedJobType;\n  }, [user, ticketMode]);\n  \n  // Memoize the form component to prevent unnecessary re-renders\n  const FormComponent = useMemo(() => {\n    return jobTypeForms[jobTypeKey] || PumpTechTicketForm;\n  }, [jobTypeForms, jobTypeKey]);\n  \n  // Memoize the draft data to prevent unnecessary re-renders\n  const draftData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // Performance monitoring for form rendering\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  // Log form rendering performance\n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`JobTicketForm (${jobTypeKey}) rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      // Cleanup performance marks\n      performance.clearMarks(`form-render-${jobTypeKey}`);\n    };\n  }, [renderStart, jobTypeKey]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.createNew')}\n      </h1>\n      \n      {selectedDraftTicket && (\n        <Card className=\"bg-blue-500 bg-opacity-20 border border-blue-500 text-blue-500 px-4 py-3 mb-6\">\n          <p>{t('jobTicket.editingDraft')}</p>\n          <p className=\"text-sm mt-1\">{t('jobTicket.draftId')}: {selectedDraftTicket.id.substring(0, 8)}</p>\n        </Card>\n      )}\n      \n      <React.Suspense fallback={<div className=\"flex justify-center py-8\"><LoadingSpinner size=\"lg\" /></div>}>\n        <FormComponent draftData={draftData} />\n      </React.Suspense>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(JobTicketFormSelector);\n","import React, { useCallback, useMemo } from 'react';\nimport { ArrowLeftIcon } from '@heroicons/react/24/solid';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { PumpTechTicketForm, DriverTicketForm } from './forms';\nimport { Button } from '../ui';\n\n/**\n * Draft Ticket View component\n * Displays a read-only view of a selected draft job ticket\n * Optimized with memoization and performance enhancements\n */\nconst DraftTicketView = () => {\n  const { t } = useLanguage();\n  const { selectedDraftTicket, setViewMode, setSelectedDraftTicket } = useTicket();\n  const { user } = useAuth();\n  \n  // Handle back button click - memoized to prevent recreation on each render\n  const handleBackClick = useCallback(() => {\n    setViewMode('draftList');\n    setSelectedDraftTicket(null);\n  }, [setViewMode, setSelectedDraftTicket]);\n  \n  // Get the appropriate form component based on job type - memoized to prevent recalculation\n  const FormComponent = useMemo(() => {\n    if (!user || !user.job_type) return PumpTechTicketForm;\n    \n    // Normalize job type string\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map job types to form components\n    const jobTypeForms = {\n      'pump_tech': PumpTechTicketForm,\n      'pump_technician': PumpTechTicketForm,\n      'pumptechnician': PumpTechTicketForm,\n      'pump_service_technician': PumpTechTicketForm,\n      'driver': DriverTicketForm,\n    };\n    \n    return jobTypeForms[normalizedJobType] || PumpTechTicketForm;\n  }, [user]);\n  \n  // Memoize the ticket data to prevent unnecessary re-renders\n  const ticketData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // If no ticket is selected, show a message\n  if (!ticketData.id) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64\">\n        <p className=\"text-gray-400 mb-4\">{t('jobTicket.noTicketSelected')}</p>\n        <Button \n          variant=\"primary\" \n          onClick={handleBackClick}\n        >\n          {t('jobTicket.returnToDrafts')}\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"relative\">\n      <button \n        onClick={handleBackClick}\n        className=\"absolute top-0 left-0 text-white flex items-center space-x-1 hover:text-gray-300 transition-colors\"\n        aria-label={t('common.goBack')}\n      >\n        <ArrowLeftIcon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{t('common.goBack')}</span>\n      </button>\n      \n      <div className=\"pt-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <p className=\"text-sm text-orange-500 italic\">{t('jobTicket.readOnlyMode')}</p>\n          <p className=\"text-sm text-gray-400\">\n            {t('jobTicket.draftId')}: {ticketData.id.substring(0, 8)}\n          </p>\n        </div>\n        \n        <FormComponent \n          readOnly={true}\n          draftData={ticketData}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketView);\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { Bars3Icon } from '@heroicons/react/24/outline';\r\nimport { TicketProvider } from '../context/TicketContext';\r\nimport { VoiceProvider } from '../context/VoiceContext';\r\nimport Sidebar from './layout/Sidebar';\r\nimport LanguageToggle from './LanguageToggle';\r\nimport LandingPage from './LandingPage';\r\nimport VoiceRecorder from './VoiceRecorder';\r\nimport { JobTicketFormSelector, DraftTicketList, SubmittedTicketList, DraftTicketView } from './tickets';\r\n\r\n/**\r\n * AppDashboard component\r\n * Contains the main application with sidebar and content\r\n */\r\nconst AppDashboard = () => {\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n  const toggleButtonRef = useRef();\r\n  const sidebarRef = useRef();\r\n  \r\n  // Handle clicks outside the sidebar to close it on mobile\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      // Only run this on mobile (when sidebar can be toggled)\r\n      if (window.innerWidth >= 768) return; // md breakpoint\r\n      \r\n      // If sidebar is open and click is outside sidebar and not on the toggle button\r\n      if (\r\n        sidebarOpen && \r\n        sidebarRef.current && \r\n        !sidebarRef.current.contains(event.target) &&\r\n        toggleButtonRef.current && \r\n        !toggleButtonRef.current.contains(event.target)\r\n      ) {\r\n        setSidebarOpen(false);\r\n      }\r\n    };\r\n    \r\n    // Add event listener\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    document.addEventListener('touchstart', handleClickOutside);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n      document.removeEventListener('touchstart', handleClickOutside);\r\n    };\r\n  }, [sidebarOpen]);\r\n  \r\n  return (\r\n    <TicketProvider>\r\n      <VoiceProvider>\r\n        <div className=\"bg-slate-900 min-h-screen\">\r\n          {/* Header area for language toggle */}\r\n          <div className=\"h-14 relative\">\r\n            <LanguageToggle />\r\n          </div>\r\n          \r\n          <div className=\"flex\">\r\n            {/* Mobile sidebar toggle */}\r\n            <button\r\n              ref={toggleButtonRef}\r\n              className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700\"\r\n              onClick={() => setSidebarOpen(!sidebarOpen)}\r\n            >\r\n              <Bars3Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n            </button>\r\n            \r\n            {/* Sidebar */}\r\n            <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} ref={sidebarRef} />\r\n            \r\n            {/* Main content */}\r\n            <main className=\"flex-1 bg-slate-900 p-6 overflow-y-auto text-white\">\r\n              <div className=\"mt-2 md:mt-0 pl-14 md:pl-0 md:ml-64\">\r\n                <div className=\"max-w-4xl mx-auto\">\r\n                  <Routes>\r\n                    <Route path=\"/\" element={<AppContent />} />\r\n                  </Routes>\r\n                </div>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </VoiceProvider>\r\n    </TicketProvider>\r\n  );\r\n};\r\n\r\n/**\r\n * App Content component\r\n * Renders the appropriate content based on the current view mode and ticket mode\r\n */\r\nconst AppContent = () => {\r\n  const { viewMode, ticketMode } = React.useContext(require('../context/TicketContext').default);\r\n  \r\n  // Render content based on view mode and ticket mode\r\n  return (\r\n    <>\r\n      {/* Draft Job Tickets List View */}\r\n      {viewMode === 'draftList' && <DraftTicketList />}\r\n      \r\n      {/* Submitted Job Tickets List View */}\r\n      {viewMode === 'submittedList' && <SubmittedTicketList />}\r\n      \r\n      {/* Landing Page */}\r\n      {viewMode === 'landing' && ticketMode === null && <LandingPage />}\r\n      \r\n      {/* Voice Job Ticket Flow */}\r\n      {viewMode === 'form' && ticketMode === 'voice' && <VoiceRecorder />}\r\n      \r\n      {/* Job Ticket Form - uses dynamic form selector based on job type */}\r\n      {viewMode === 'form' && ticketMode === 'manual' && <JobTicketFormSelector />}\r\n      \r\n      {/* Draft Ticket View */}\r\n      {viewMode === 'draft' && <DraftTicketView />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppDashboard;\r\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { useApiCache, useMemoizedCallback } from '../../hooks';\nimport { Card, Button, VirtualList, LoadingSpinner } from '../ui';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n/**\n * Submitted Ticket List Component\n * Displays a table of submitted job tickets with responsive design\n */\nconst SubmittedTicketList = () => {\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  \n  // Use the API cache hook for fetching submitted tickets\n  // This will cache the results for 5 minutes by default\n  const { \n    data: ticketsResponse, \n    isLoading: loading, \n    error: apiError,\n    refetch\n  } = useApiCache('/api/job-tickets/submitted', {\n    cacheTime: 3 * 60 * 1000, // 3 minutes cache\n    onError: (err) => console.error('Error fetching submitted tickets:', err)\n  });\n  \n  // Extract tickets from the response\n  const tickets = ticketsResponse?.data || [];\n  \n  // Format error message\n  const error = apiError ? t('errors.fetchFailed') : null;\n\n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n\n  // View ticket details - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticketId) => {\n    // Implement view ticket functionality\n    console.log('View ticket:', ticketId);\n    // This would typically navigate to a ticket detail page\n  }, []);\n  \n  // Memoize tickets data to prevent unnecessary re-renders\n  const memoizedTickets = useMemo(() => tickets || [], [tickets]);\n\n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.submitted')}\n      </h1>\n\n      {loading ? (\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Card className=\"overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-700\">\n              <thead>\n                <tr>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                    {t('jobTicket.date')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.company')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.location')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                    {t('jobTicket.hours')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                    {t('jobTicket.description')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider w-20\">\n                    {t('common.actions')}\n                  </th>\n                </tr>\n              </thead>\n              {/* Error State */}\n              {error ? (\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n                        <ExclamationCircleIcon className=\"h-5 w-5\" />\n                        <span>{error}</span>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => refetch()} \n                          className=\"ml-3\"\n                        >\n                          {t('common.retry')}\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : memoizedTickets.length === 0 ? (\n                /* Empty State */\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-400\">{t('jobTicket.noSubmitted')}</p>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : (\n                /* Data State with Virtualized List */\n                <tbody className=\"divide-y divide-gray-700\">\n                  <VirtualList\n                    items={memoizedTickets}\n                    height={400}\n                    itemHeight={64}\n                    renderItem={(ticket) => (\n                      <TicketRow\n                        key={ticket.id}\n                        ticket={ticket}\n                        formatDate={formatDate}\n                        handleViewTicket={handleViewTicket}\n                        t={t}\n                      />\n                    )}\n                    overscan={5}\n                    emptyComponent={\n                      <tr>\n                        <td colSpan=\"6\" className=\"px-6 py-4\">\n                          <div className=\"text-center py-8\">\n                            <LoadingSpinner size=\"md\" />\n                          </div>\n                        </td>\n                      </tr>\n                    }\n                  />\n                </tbody>\n              )}\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleViewTicket, t }) => {\n  // Calculate total hours once\n  const totalHours = useMemo(() => {\n    return parseFloat(ticket.work_total_hours || 0) + parseFloat(ticket.travel_total_hours || 0);\n  }, [ticket.work_total_hours, ticket.travel_total_hours]);\n  \n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.job_date)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.company_name || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {totalHours}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.description || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleViewTicket(ticket.id)}\n          className=\"text-orange-500 hover:text-orange-400\"\n          aria-label={`${t('common.view')} ${ticket.company_name || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.view')}\n        </Button>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(SubmittedTicketList);\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { calculateHoursBetween } from '../../utils/validators';\nimport { Input, Button, Form, Card } from '../ui';\nimport { useDebounce, useMemoizedCallback } from '../../hooks';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management with performance optimizations\n * \n * @param {Object} props - Component props\n * @param {boolean} props.readOnly - Whether the form is in read-only mode\n * @param {Object} props.draftData - Draft data to pre-populate the form\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      const hours = calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [debouncedWorkStartTime, debouncedWorkEndTime, setValue]);\n  \n  useEffect(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      const hours = calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [debouncedDriveStartTime, debouncedDriveEndTime, setValue]);\n  \n  // Auto-save form data when fields change - optimized with useCallback\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language - memoized to prevent re-creation\n  const partsList = useMemo(() => [\n    { value: t('partLubricant'), label: t('partLubricant') },\n    { value: t('partPumpSeal'), label: t('partPumpSeal') },\n    { value: t('partThrustChamber'), label: t('partThrustChamber') },\n    { value: t('partVFDBreaker'), label: t('partVFDBreaker') },\n    { value: t('partServiceKit'), label: t('partServiceKit') },\n    { value: t('partOther'), label: t('partOther') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent re-creation\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  }, [selectedPart, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent re-creation\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      const timer = setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      const timer = setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent re-creation\n  const onSubmit = useMemoizedCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  });\n  \n  return (\n    <Form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6 max-w-3xl mx-auto\">\n      <Card className=\"p-6\">\n        {/* Success message */}\n        {showSuccessMessage && (\n          <div className=\"mb-4 p-4 bg-green-900 bg-opacity-20 border border-green-700 rounded-md\">\n            <p className=\"text-green-400\">{t('jobTicket.submitSuccess')}</p>\n          </div>\n        )}\n        \n        {/* Error message */}\n        {showErrorMessage && (\n          <div className=\"mb-4 p-4 bg-red-900 bg-opacity-20 border border-red-700 rounded-md\">\n            <p className=\"text-red-400\">{submitError}</p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Job Date */}\n          <Input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            label={t('jobTicket.date')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.jobDate}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Company Name */}\n          <Input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            label={t('jobTicket.companyName')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.companyName}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Customer Name */}\n          <Input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            label={t('jobTicket.customerName')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Location */}\n          <Input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            label={t('jobTicket.location')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Work Type */}\n          <Input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            label={t('jobTicket.workType') || 'Work Type'}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Equipment */}\n          <Input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            label={t('jobTicket.equipment') || 'Equipment Serviced'}\n            register={register}\n            readOnly={readOnly}\n          />\n        </div>\n        \n        {/* Work Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.workTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              label={t('jobTicket.workStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              label={t('jobTicket.workEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"workTotalHours\"\n              name=\"workTotalHours\"\n              label={t('jobTicket.workTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Drive Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.travelTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              label={t('jobTicket.travelStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              label={t('jobTicket.travelEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"driveTotalHours\"\n              name=\"driveTotalHours\"\n              label={t('jobTicket.travelTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Parts Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.parts.title')}</h3>\n          \n          {!readOnly && (\n            <div className=\"flex space-x-2 mb-4\">\n              <select\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={selectedPart}\n                onChange={(e) => setSelectedPart(e.target.value)}\n              >\n                <option value=\"\">{t('selectPartsPlaceholder')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n              <Button \n                type=\"button\" \n                onClick={handleAddPart}\n                disabled={!selectedPart}\n                variant=\"secondary\"\n              >\n                {t('addPart')}\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"bg-gray-800 rounded-md border border-gray-700 p-4\">\n            {watch('parts')?.length > 0 ? (\n              <ul className=\"divide-y divide-gray-700\">\n                {watch('parts')?.map((part, index) => (\n                  <li key={index} className=\"py-2 flex justify-between items-center\">\n                    <span>{part}</span>\n                    {!readOnly && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => handleRemovePart(index)}\n                        variant=\"danger\"\n                        size=\"sm\"\n                      >\n                        {t('removePart')}\n                      </Button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-400\">{t('noParts', 'No parts added')}</p>\n            )}\n          </div>\n        </div>\n        \n        {/* Description */}\n        <div className=\"mt-8\">\n          <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workDescription')}\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"workDescription\"\n              name=\"workDescription\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              rows={4}\n              placeholder={t('jobTicket.workDescription')}\n              {...register('workDescription')}\n              readOnly={readOnly}\n            />\n          </div>\n        </div>\n        \n        {/* Submit Button */}\n        {!readOnly && (\n          <div className=\"mt-8 flex justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full md:w-auto\"\n            >\n              {isSubmitting ? t('submitting') : t('submit')}\n            </Button>\n          </div>\n        )}\n      </Card>\n    </Form>\n  );\n};\n\n// Use React.memo to prevent unnecessary re-renders\nexport default React.memo(JobTicketForm);\n"],"names":["LanguageToggle","language","toggleLanguage","useLanguage","targetLanguage","instructionText","_jsxs","onClick","className","concat","title","tabIndex","children","_jsx","memo","DraftTicketList","t","draftTickets","setSelectedDraftTicket","setViewMode","deleteDraftTicket","setTicketMode","useTicket","showConfirmModal","setShowConfirmModal","useState","selectedTicket","setSelectedTicket","formatDate","useCallback","dateString","e","handleViewTicket","text","maxLength","arguments","length","undefined","substring","ticket","handleEditTicket","confirmEditDraft","id","cancelEditDraft","handleDeleteTicket","ticketId","Card","colSpan","VirtualList","items","height","itemHeight","renderItem","TicketRow","overscan","emptyComponent","LoadingSpinner","size","Modal","isOpen","onClose","footer","_Fragment","Button","variant","React","_ref","companyName","jobDate","location","workTotalHours","workDescription","TicketContext","createContext","TicketProvider","context","useContext","useDraftTickets","ticketForm","useTicketForm","ticketSubmission","useTicketSubmission","ticketView","useTicketView","combinedContext","useMemo","viewMode","navigateTo","ticketMode","formData","setFormData","updateFormData","updateFormField","handleInputChange","resetForm","addPart","removePart","setDraftTickets","console","warn","selectedDraftTicket","saveJobTicketAsDraft","saveDraft","deleteDraft","loadDraftIntoForm","submitJobTicket","isSubmitting","submitError","submitSuccess","isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","VoiceContext","VoiceProvider","voiceStatus","setVoiceStatus","transcribedText","setTranscribedText","transcriptionError","setTranscriptionError","isListening","setIsListening","recognitionRef","useRef","silenceTimerRef","useEffect","window","error","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","stop","clearTimeout","resetSilenceTimer","setTimeout","stopVoiceRecording","startVoiceRecording","onstart","log","onresult","event","transcript","Array","from","results","result","join","onerror","onend","start","cancelVoiceRecording","contextValue","Provider","value","useVoice","Error","classNames","_len","classes","_key","filter","Boolean","routes","Sidebar","forwardRef","ref","sidebarOpen","setSidebarOpen","user","isAuthenticated","logout","useAuth","useLocation","usePrefetchRoute","handleCreateTicketClick","handleSubmittedTicketsClick","handleDraftTicketsClick","handleLogout","Image","src","alt","lazy","logo_url","fallbackSrc","UserIcon","name","email","Link","to","fullWidth","PlusCircleIcon","DocumentCheckIcon","DocumentTextIcon","process","LandingPage","handleManualClick","PencilSquareIcon","handleVoiceClick","MicrophoneIcon","handleHelpClick","QuestionMarkCircleIcon","JobTicketForm","_watch","readOnly","draftData","selectedPart","setSelectedPart","register","handleSubmit","control","setValue","watch","formState","errors","useForm","defaultValues","workStartTime","workEndTime","travelStartTime","travelEndTime","hours","subscription","_ref2","type","unsubscribe","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","onSubmit","async","savedDraft","data","htmlFor","_objectSpread","required","Controller","render","_ref3","field","disabled","onChange","checked","target","label","part","handleAddPart","currentParts","index","updatedParts","splice","handleRemovePart","xmlns","viewBox","fill","fillRule","d","clipRule","rows","role","cx","cy","r","stroke","strokeWidth","extractCompanyName","patterns","pattern","match","trim","extractCustomerName","extractLocation","extractWorkType","extractEquipment","extractWorkDescription","extractPartsUsed","parts","commonParts","partsSection","partsText","toLowerCase","forEach","includes","push","extractSubmittedBy","extractTimes","times","timePattern","workStartMatch","timeMatch","formatTimeString","workEndMatch","driveStartMatch","driveStartTime","driveEndMatch","driveEndTime","parseInt","minutes","ampm","toString","padStart","extractTravelType","extractJobDate","dateMatch","month","day","year","dateTextMatch","dateText","today","Date","formatDateString","yesterday","setDate","getDate","tomorrow","date","getFullYear","getMonth","VoiceRecorder","translations","parsedJobTicket","setParsedJobTicket","extractedData","normalizedText","customerName","workType","equipment","partsUsed","submittedBy","travelType","parseJobTicketFromVoice","Object","entries","handleBackClick","ArrowLeftIcon","back","speakJobTicketInfo","listening","StopIcon","stopRecording","cancelRecording","restartRecording","allDoneCreateJobTicket","processingAudio","ExclamationCircleIcon","goBack","newDraft","detailsEl","document","getElementById","open","key","isArray","formattedKey","replace","str","toUpperCase","formattedValue","keys","formEl","BaseJobTicketForm","mode","debouncedWorkStartTime","useDebounce","debouncedWorkEndTime","debouncedDriveStartTime","debouncedDriveEndTime","calculateWorkHours","calculateDriveHours","timeoutId","handleFormSubmit","renderStart","performance","now","renderTime","clearMarks","Form","Input","rules","PumpTechTicketForm","partsList","handlePartChange","partsListItems","placeholder","defaultValue","DriverTicketForm","vehicleTypes","option","vehicleType","min","mileage","JobTicketFormSelector","jobTypeForms","jobTypeKey","job_type","normalizedJobType","FormComponent","fallback","DraftTicketView","ticketData","AppContent","require","SubmittedTicketList","AppDashboard","toggleButtonRef","sidebarRef","handleClickOutside","innerWidth","contains","addEventListener","removeEventListener","Bars3Icon","Routes","Route","path","element","ticketsResponse","isLoading","loading","apiError","refetch","useApiCache","cacheTime","onError","err","tickets","toLocaleDateString","memoizedTickets","totalHours","work_total_hours","travel_total_hours","job_date","company_name","description","_watch2","timer","useMemoizedCallback","errorText","step"],"sourceRoot":""}