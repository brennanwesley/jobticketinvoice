{"version":3,"file":"static/js/418.12849a02.chunk.js","mappings":"0LAOA,MAAMA,EAAiBA,KACrB,MAAM,SAAEC,EAAQ,eAAEC,IAAmBC,EAAAA,EAAAA,MAG/BC,EAA8B,OAAbH,EAAoB,aAAY,UACjDI,EAA+B,OAAbJ,EAAoB,YAAc,iBAE1D,OACEK,EAAAA,EAAAA,MAAA,UACEC,QAASL,EACTM,UAAU,yLACV,gBAAAC,OAAeJ,EAAe,KAAAI,OAAIL,GAClCM,MAAK,GAAAD,OAAKJ,EAAe,KAAAI,OAAIL,GAC7BO,SAAU,EAAEC,SAAA,EAEZC,EAAAA,EAAAA,KAAA,QAAML,UAAU,iCAAgCI,SAAEP,KAClDQ,EAAAA,EAAAA,KAAA,QAAAD,SAAOR,QAKb,GAAeU,EAAAA,EAAAA,MAAKd,E,mCCnBb,MAkCMe,EAAqBC,IAChC,IAAKA,EAAY,OAAO,EAGxB,MADkB,qCACDC,KAAKD,IASXE,EAAwBA,CAACC,EAAWC,KAC/C,IAAKL,EAAkBI,KAAeJ,EAAkBK,GACtD,OAAO,KAGT,MAAOC,EAAWC,GAAeH,EAAUI,MAAM,KAAKC,IAAIC,SACnDC,EAASC,GAAaP,EAAQG,MAAM,KAAKC,IAAIC,QAEpD,IAAIG,EAAYF,EAAUL,EACtBQ,EAAcF,EAAYL,EAW9B,OATIO,EAAc,IAChBD,IACAC,GAAe,IAGbD,EAAY,IACdA,GAAa,IAGRE,YAAYF,EAAaC,EAAc,IAAKE,QAAQ,I,gMC5C7D,MAAMC,EAAoBC,IAKnB,IALoB,SACzBrB,EAAQ,SACRsB,EAAQ,SACRC,GAAW,EAAK,UAChBC,EAAY,MACbH,EACC,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,SAAEmC,EAAQ,eAAEC,EAAc,qBAAEC,EAAoB,gBAAEC,EAAe,aAAEC,EAAY,YAAEC,EAAW,cAAEC,IAAkBC,EAAAA,EAAAA,OAChH,KAAEC,IAASC,EAAAA,EAAAA,MAGXC,GAAgBC,EAAAA,EAAAA,UAAQ,IAAMb,GAAaE,GAAY,CAAC,GAAG,CAACF,EAAWE,KAEvE,SAAEY,EAAQ,aAAEC,EAAY,QAAEC,EAAO,SAAEC,EAAQ,MAAEC,EAAOC,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,IAAQ,CAC1FT,gBACAU,KAAM,aAIFC,EAAgBL,EAAM,iBACtBM,EAAcN,EAAM,eACpBO,EAAiBP,EAAM,kBACvBQ,EAAeR,EAAM,gBAGrBS,GAAyBC,EAAAA,EAAAA,IAAYL,EAAe,KACpDM,GAAuBD,EAAAA,EAAAA,IAAYJ,EAAa,KAChDM,GAA0BF,EAAAA,EAAAA,IAAYH,EAAgB,KACtDM,GAAwBH,EAAAA,EAAAA,IAAYF,EAAc,KAGlDM,GAAqBC,EAAAA,EAAAA,cAAY,IACjCN,GAA0BE,GACrB/C,EAAAA,EAAAA,IAAsB6C,EAAwBE,GAEhD,MACN,CAACF,EAAwBE,IAEtBK,GAAsBD,EAAAA,EAAAA,cAAY,IAClCH,GAA2BC,GACtBjD,EAAAA,EAAAA,IAAsBgD,EAAyBC,GAEjD,MACN,CAACD,EAAyBC,KAG7BI,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQJ,IACA,OAAVI,GACFnB,EAAS,iBAAkBmB,KAE5B,CAACJ,EAAoBf,KAExBkB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQF,IACA,OAAVE,GACFnB,EAAS,kBAAmBmB,KAE7B,CAACF,EAAqBjB,KAGzBkB,EAAAA,EAAAA,YAAU,KACR,MAAME,EAAenB,GAAM,CAACoB,EAAKC,KAAsB,IAApB,KAAEC,EAAI,KAAEC,GAAMF,EAC/C,GAAa,WAATE,GAAqBD,EAAM,CAE7B,MAAME,EAAYC,YAAW,KAC3BxC,EAAeqC,EAAMF,EAAME,MAC1B,KAEH,MAAO,IAAMI,aAAaF,EAC5B,KAGF,MAAO,IAAML,EAAaQ,gBACzB,CAAC3B,EAAOf,IAGX,MAAO2C,EAAoBC,IAAyBC,EAAAA,EAAAA,WAAS,IACtDC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,IAEzDb,EAAAA,EAAAA,YAAU,KACJ3B,IACFuC,GAAsB,GACtBJ,YAAW,IAAMI,GAAsB,IAAQ,QAEhD,CAACvC,KAEJ2B,EAAAA,EAAAA,YAAU,KACJ5B,IACF2C,GAAoB,GACpBP,YAAW,IAAMO,GAAoB,IAAQ,QAE9C,CAAC3C,IAGJ,MAAM4C,GAAmBlB,EAAAA,EAAAA,cAAYmB,UACnC,IAEE,MAAMC,EAAajD,EAAqBkD,GAGxC,GAAIxD,EAEF,kBADMA,EAASuD,SAKXhD,EAAgBgD,EACxB,CAAE,MAAOE,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,IACC,CAACzD,EAAUM,EAAsBC,KAGpC8B,EAAAA,EAAAA,YAAU,KACA,OAAJzB,QAAI,IAAJA,GAAAA,EAAM8B,OAAStB,EAAM,gBACvBD,EAAS,cAAeP,EAAK8B,QAE9B,CAAC9B,EAAMO,EAAUC,IAGpB,MAAMuC,GAAc5C,EAAAA,EAAAA,UAAQ,IAAM6C,YAAYC,OAAO,IAWrD,OATAxB,EAAAA,EAAAA,YAAU,KACR,MAAMyB,EAAaF,YAAYC,MAAQF,EAGvC,OAFAD,QAAQK,IAAI,iCAADxF,OAAkCuF,EAAWjE,QAAQ,GAAE,OAE3D,KACL+D,YAAYI,WAAW,kCAExB,CAACL,KAGFvF,EAAAA,EAAAA,MAAC6F,EAAAA,GAAI,CAACjE,SAAUiB,EAAaoC,GAAmB/E,UAAU,8BAA6BI,SAAA,EAErFC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,kBACTwC,KAAK,OACLyB,GAAG,UACH1B,KAAK,UACL1B,SAAUA,EACVqD,MAAO,CAAEC,UAAU,GACnBb,MAAOnC,EAAOiD,QACdtE,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,yBACTwC,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACL1B,SAAUA,EACVqD,MAAO,CAAEC,UAAU,GACnBb,MAAOnC,EAAOkD,YACdvE,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,0BACTwC,KAAK,OACLyB,GAAG,eACH1B,KAAK,eACL1B,SAAUA,EACVyC,MAAOnC,EAAOmD,aACdxE,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,sBACTwC,KAAK,OACLyB,GAAG,WACH1B,KAAK,WACL1B,SAAUA,EACVyC,MAAOnC,EAAOoD,SACdzE,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,sBACTwC,KAAK,OACLyB,GAAG,WACH1B,KAAK,WACL1B,SAAUA,EACVyC,MAAOnC,EAAOqD,SACd1E,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,uBACTwC,KAAK,OACLyB,GAAG,YACH1B,KAAK,YACL1B,SAAUA,EACVyC,MAAOnC,EAAOsD,UACd3E,SAAUA,KAIZ7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,gCAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,YAAAmG,EAAAA,EAAAA,GAAA,CACEV,GAAG,kBACH1B,KAAK,kBACLqC,KAAM,EACNzG,UAAU,qJACV0G,YAAY,sCACZ/E,SAAUA,GACNe,EAAS,2BAMnB5C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,2BACTwC,KAAK,OACLyB,GAAG,gBACH1B,KAAK,gBACL1B,SAAUA,EACVyC,MAAOnC,EAAOG,cACdxB,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,yBACTwC,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACL1B,SAAUA,EACVyC,MAAOnC,EAAOI,YACdzB,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,2BACTwC,KAAK,OACLyB,GAAG,iBACH1B,KAAK,iBACL1B,SAAUA,EACVf,UAAU,QAKd7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,6BACTwC,KAAK,OACLyB,GAAG,iBACH1B,KAAK,iBACL1B,SAAUA,EACVyC,MAAOnC,EAAOK,eACd1B,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,2BACTwC,KAAK,OACLyB,GAAG,eACH1B,KAAK,eACL1B,SAAUA,EACVyC,MAAOnC,EAAOM,aACd3B,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,6BACTwC,KAAK,OACLyB,GAAG,kBACH1B,KAAK,kBACL1B,SAAUA,EACVf,UAAU,QAOdtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,yBACTwC,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACL1B,SAAUA,EACVyC,MAAOnC,EAAO2D,YACdhF,SAAUA,IAIXvB,EAGAsE,IACC5E,EAAAA,EAAAA,MAAC8G,EAAAA,GAAI,CAAC5G,UAAU,sFAAqFI,SAAA,EACnGN,EAAAA,EAAAA,MAAA,UAAQE,UAAU,YAAWI,SAAA,CAAEyB,EAAE,kBAAkB,QACnD/B,EAAAA,EAAAA,MAAA,QAAME,UAAU,kBAAiBI,SAAA,CAAC,IAAEyB,EAAE,6BAIzCgD,IACC/E,EAAAA,EAAAA,MAAC8G,EAAAA,GAAI,CAAC5G,UAAU,gFAA+EI,SAAA,EAC7FN,EAAAA,EAAAA,MAAA,UAAQE,UAAU,YAAWI,SAAA,CAAEyB,EAAE,gBAAgB,QACjD/B,EAAAA,EAAAA,MAAA,QAAME,UAAU,kBAAiBI,SAAA,CAAC,IAAEyB,EAAE,gCAKxCF,IACAtB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,qCAAoCI,UACjDC,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACLyC,SAAU5E,EACV6E,QAAS7E,EAAe,WAAa,UACrC8E,KAAK,KAAI5G,SAER8B,GACCpC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBI,SAAA,CAC/ByB,EAAE,yBACHxB,EAAAA,EAAAA,KAAC4G,EAAAA,GAAc,CAACD,KAAK,KAAKhH,UAAU,YAEpC,+BAUlB,EAAekH,EAAAA,KAAW1F,GCxVpB2F,EAAqB1F,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EAChE,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxBwF,EAAcC,IAAmBzC,EAAAA,EAAAA,UAAS,IAG3C0C,GAAY7E,EAAAA,EAAAA,UAAQ,IAAM,CAC9B,CAAEyB,MAAO,gBAAiB2B,MAAOhE,EAAE,oBACnC,CAAEqC,MAAO,eAAgB2B,MAAOhE,EAAE,mBAClC,CAAEqC,MAAO,oBAAqB2B,MAAOhE,EAAE,wBACvC,CAAEqC,MAAO,iBAAkB2B,MAAOhE,EAAE,qBACpC,CAAEqC,MAAO,iBAAkB2B,MAAOhE,EAAE,qBACpC,CAAEqC,MAAO,YAAa2B,MAAOhE,EAAE,kBAC9B,CAACA,IAGE0F,GAAgB1D,EAAAA,EAAAA,cAAY,KAChC,IAAKuD,EAAc,OAGnB,MAAMI,EAAkBF,EAAUG,MAAKC,GAAQA,EAAKxD,QAAUkD,IAC9D,IAAKI,EAAiB,OAGtB,MAAMG,EAAe7E,EAAM,UAAY,GACvCD,EAAS,QAAS,IAAI8E,EAAc,CAClCzD,MAAOkD,EACPvB,MAAO2B,EAAgB3B,SAEzBwB,EAAgB,MACf,CAACD,EAAcE,EAAWxE,EAAOD,IAG9B+E,GAAmB/D,EAAAA,EAAAA,cAAagE,IACpC,MACMC,EAAe,IADAhF,EAAM,UAAY,IAEvCgF,EAAaC,OAAOF,EAAO,GAC3BhF,EAAS,QAASiF,KACjB,CAAChF,EAAOD,IAGLmF,GAAmBnE,EAAAA,EAAAA,cAAaoE,IAEpC,MAAMC,EAAgBD,EAAEE,OAAOjE,MACzBkE,EAAiBd,EAAUG,MAAKC,GAAQA,EAAKxD,QAAUgE,IAC7Db,EAAgBe,EAAiBF,EAAgB,MAChD,CAACZ,IAGEe,GAAiB5F,EAAAA,EAAAA,UAAQ,KAC7B,MAAM6F,EAAQxF,EAAM,UAAY,GAEhC,OAAqB,IAAjBwF,EAAMC,QAENlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,uBAKFyG,EAAMtH,KAAI,CAAC0G,EAAMG,KAGtB,IAAIW,EACJ,GAAoB,kBAATd,GAAqBA,EAAK7B,MACnC2C,EAAYd,EAAK7B,WACZ,GAAoB,kBAAT6B,EAAmB,CAGnC,MAAMe,EAAWf,EAAKgB,QAAQ,QAAS,IAAIC,OAAO,GAAGC,cAAgBlB,EAAKgB,QAAQ,QAAS,IAAIG,MAAM,GACrGL,EAAY3G,EAAE,SAAD5B,OAAUwI,GACzB,MAEED,EAAYM,OAAOpB,GAGrB,OACE5H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,kEAAiEI,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAAD,SAAOoI,KACL7G,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAM6H,EAAiBC,GAAOzH,SAEtCyB,EAAE,qBARAgG,QAcZ,CAAC/E,EAAOjB,EAAGF,EAAUiG,IAExB,OACE9H,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,4BAC/BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQ9D,SAAEyB,EAAE,uBAC1BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAc9D,SAAEyB,EAAE,6BAChCxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,aAAY9D,SAAEyB,EAAE,oCAMpCxB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,uBACTwC,KAAK,OACLyB,GAAG,YACH1B,KAAK,YACL1B,SAAUA,EACVgE,YAAa7E,EAAE,kCACfF,SAAUA,KAIZ7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,0BAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gCAA+BI,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWI,UACxBN,EAAAA,EAAAA,MAAA,UACEoE,MAAOkD,EACP2B,SAAUf,EACVhI,UAAU,oIAAmII,SAAA,EAE7IC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,mBACnByF,EAAUtG,KAAK0G,IACdrH,EAAAA,EAAAA,KAAA,UAAyB6D,MAAOwD,EAAKxD,MAAM9D,SACxCsH,EAAK7B,OADK6B,EAAKxD,eAMxB7D,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAASwH,EACTT,UAAWM,EAAahH,SAEvByB,EAAE,2BAKTxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,QACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtBiI,gBAWjB,EAAenB,EAAAA,KAAWC,GCzLpBiC,EAAmB3H,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EAC9D,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,SAAE+C,EAAUK,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,IAAQ,CAClDT,cAAeZ,GAAa,CAAC,IAIzByH,GAAe5G,EAAAA,EAAAA,UAAQ,IAAM,CACjC,CAAEyB,MAAO,GAAI2B,MAAOhE,EAAE,kBACtB,CAAEqC,MAAO,QAAS2B,MAAOhE,EAAE,uBAAyB,SACpD,CAAEqC,MAAO,MAAO2B,MAAOhE,EAAE,qBAAuB,OAChD,CAAEqC,MAAO,MAAO2B,MAAOhE,EAAE,qBAAuB,SAC/C,CAACA,IAGEwD,GAAc5C,EAAAA,EAAAA,UAAQ,IAAM6C,YAAYC,OAAO,IAWrD,OATA2B,EAAAA,WAAgB,KACd,MAAM1B,EAAaF,YAAYC,MAAQF,EAGvC,OAFAD,QAAQK,IAAI,gCAADxF,OAAiCuF,EAAWjE,QAAQ,GAAE,OAE1D,KACL+D,YAAYI,WAAW,gCAExB,CAACL,KAGFvF,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,cAAcvG,UAAU,0CAAyCI,SAC7EyB,EAAE,0BAA4B,kBAEjC/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMI,SAAA,EACnBC,EAAAA,EAAAA,KAAA,UAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,cACH1B,KAAK,cACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,cAAe,CAAEsD,UAAU,KAAO,IAAA5F,SAE9CiJ,EAAarI,KAAIsI,IAChBjJ,EAAAA,EAAAA,KAAA,UAA2B6D,MAAOoF,EAAOpF,MAAM9D,SAC5CkJ,EAAOzD,OADGyD,EAAOpF,YAKvBlB,EAAOuG,cACNlJ,EAAAA,EAAAA,KAAA,KAAGL,UAAU,4BAA2BI,SACrCyB,EAAE,gCAOXxB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,sBAAwB,UACjCwC,KAAK,SACLyB,GAAG,UACH1B,KAAK,UACL1B,SAAUA,EACVqD,MAAO,CAAEC,UAAU,EAAMwD,IAAK,GAC9BrE,MAAOnC,EAAOyG,QACd/C,YAAa7E,EAAE,iCAAmC,2BAClDF,SAAUA,KAIZ7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,uBAAyB,eAE9BxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,QAAO9D,SAAEyB,EAAE,oBAAsB,WAC/CxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAU9D,SAAEyB,EAAE,uBAAyB,2BASjE,EAAeqF,EAAAA,KAAWkC,GC3FpBM,EAAuBjI,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EAClE,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxB+H,EAAkBC,IAAuBhF,EAAAA,EAAAA,UAAS,IAGnDiF,GAAgBpH,EAAAA,EAAAA,UAAQ,IAAM,CAClC,CAAEyB,MAAOrC,EAAE,kBAAmBgE,MAAOhE,EAAE,mBACvC,CAAEqC,MAAOrC,EAAE,sBAAuBgE,MAAOhE,EAAE,uBAC3C,CAAEqC,MAAOrC,EAAE,oBAAqBgE,MAAOhE,EAAE,qBACzC,CAAEqC,MAAOrC,EAAE,mBAAoBgE,MAAOhE,EAAE,oBACxC,CAAEqC,MAAOrC,EAAE,oBAAqBgE,MAAOhE,EAAE,qBACzC,CAAEqC,MAAOrC,EAAE,mBAAoBgE,MAAOhE,EAAE,sBACvC,CAACA,IAGEiI,GAAoBjG,EAAAA,EAAAA,cAAY,KACpC,IAAK8F,EAAkB,OAEvB,MAAMI,EAAmBjH,EAAM,cAAgB,GAC/CD,EAAS,YAAa,IAAIkH,EAAkBJ,IAC5CC,EAAoB,MACnB,CAACD,EAAkB7G,EAAOD,IAGvBmH,GAAuBnG,EAAAA,EAAAA,cAAagE,IACxC,MACMoC,EAAmB,IADAnH,EAAM,cAAgB,IAE/CmH,EAAiBlC,OAAOF,EAAO,GAC/BhF,EAAS,YAAaoH,KACrB,CAACnH,EAAOD,IAGLqH,GAAuBrG,EAAAA,EAAAA,cAAaoE,IACxC2B,EAAoB3B,EAAEE,OAAOjE,SAC5B,IAGGiG,GAAqB1H,EAAAA,EAAAA,UAAQ,KACjC,MAAM2H,EAAYtH,EAAM,cAAgB,GAExC,OAAyB,IAArBsH,EAAU7B,QAEVlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,2BAKFuI,EAAUpJ,KAAI,CAACqJ,EAAUxC,KAC9B/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,kEAAiEI,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAAD,SAAOiK,KACL1I,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAMiK,EAAqBnC,GAAOzH,SAE1CyB,EAAE,qBARAgG,OAaV,CAAC/E,EAAOjB,EAAGF,EAAUqI,IAExB,OACElK,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAc9D,SAAEyB,EAAE,6BAChCxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,4BAC/BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAU9D,SAAEyB,EAAE,yBAC5BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,qCAMrCxB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,2BACTwC,KAAK,OACLyB,GAAG,gBACH1B,KAAK,gBACL1B,SAAUA,EACVgE,YAAa7E,EAAE,sCACfF,SAAUA,KAIZ7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,8BAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gCAA+BI,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWI,UACxBN,EAAAA,EAAAA,MAAA,UACEoE,MAAOyF,EACPZ,SAAUmB,EACVlK,UAAU,oIAAmII,SAAA,EAE7IC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,mBACnBgI,EAAc7I,KAAKqJ,IAClBhK,EAAAA,EAAAA,KAAA,UAA6B6D,MAAOmG,EAASnG,MAAM9D,SAChDiK,EAASxE,OADCwE,EAASnG,eAM5B7D,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAAS+J,EACThD,UAAW6C,EAAiBvJ,SAE3ByB,EAAE,oBAKTxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,YACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtB+J,aAQXrK,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,iBAAiBvG,UAAU,0CAAyCI,SAChFyB,EAAE,+BAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,YAAAmG,EAAAA,EAAAA,GAAA,CACEV,GAAG,iBACH1B,KAAK,iBACLqC,KAAM,EACNzG,UAAU,8IACV2B,SAAUA,EACV+E,YAAa7E,EAAE,wCACXa,EAAS,6BASzB,EAAewE,EAAAA,KAAWwC,GC9KpBY,EAAwB7I,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EACnE,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxB2I,EAAmBC,IAAwB5F,EAAAA,EAAAA,UAAS,IAGrD6F,GAAiBhI,EAAAA,EAAAA,UAAQ,IAAM,CACnC,CAAEyB,MAAOrC,EAAE,qBAAsBgE,MAAOhE,EAAE,sBAC1C,CAAEqC,MAAOrC,EAAE,uBAAwBgE,MAAOhE,EAAE,wBAC5C,CAAEqC,MAAOrC,EAAE,uBAAwBgE,MAAOhE,EAAE,wBAC5C,CAAEqC,MAAOrC,EAAE,qBAAsBgE,MAAOhE,EAAE,sBAC1C,CAAEqC,MAAOrC,EAAE,qBAAsBgE,MAAOhE,EAAE,sBAC1C,CAAEqC,MAAOrC,EAAE,oBAAqBgE,MAAOhE,EAAE,uBACxC,CAACA,IAGE6I,GAAqB7G,EAAAA,EAAAA,cAAY,KACrC,IAAK0G,EAAmB,OAExB,MAAMI,EAAoB7H,EAAM,eAAiB,GACjDD,EAAS,aAAc,IAAI8H,EAAmBJ,IAC9CC,EAAqB,MACpB,CAACD,EAAmBzH,EAAOD,IAGxB+H,GAAwB/G,EAAAA,EAAAA,cAAagE,IACzC,MACMgD,EAAoB,IADA/H,EAAM,eAAiB,IAEjD+H,EAAkB9C,OAAOF,EAAO,GAChChF,EAAS,aAAcgI,KACtB,CAAC/H,EAAOD,IAGLiI,GAAwBjH,EAAAA,EAAAA,cAAaoE,IACzCuC,EAAqBvC,EAAEE,OAAOjE,SAC7B,IAGG6G,GAAsBtI,EAAAA,EAAAA,UAAQ,KAClC,MAAMuI,EAAalI,EAAM,eAAiB,GAE1C,OAA0B,IAAtBkI,EAAWzC,QAEXlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,4BAKFmJ,EAAWhK,KAAI,CAACiK,EAAWpD,KAChC/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,kEAAiEI,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAAD,SAAO6K,KACLtJ,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAM6K,EAAsB/C,GAAOzH,SAE3CyB,EAAE,qBARAgG,OAaV,CAAC/E,EAAOjB,EAAGF,EAAUiJ,IAExB,OACE9K,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAc9D,SAAEyB,EAAE,6BAChCxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQ9D,SAAEyB,EAAE,uBAC1BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,4BAC/BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,aAAY9D,SAAEyB,EAAE,2BAC9BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,kBAAiB9D,SAAEyB,EAAE,yCAMzC/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,qBACTwC,KAAK,OACLyB,GAAG,UACH1B,KAAK,UACL1B,SAAUA,EACVgE,YAAY,yBACZ/E,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,sBACTwC,KAAK,OACLyB,GAAG,WACH1B,KAAK,WACL1B,SAAUA,EACVgE,YAAY,sBACZ/E,SAAUA,QAKd7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,+BAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gCAA+BI,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWI,UACxBN,EAAAA,EAAAA,MAAA,UACEoE,MAAOqG,EACPxB,SAAU+B,EACV9K,UAAU,oIAAmII,SAAA,EAE7IC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,mBACnB4I,EAAezJ,KAAKiK,IACnB5K,EAAAA,EAAAA,KAAA,UAA8B6D,MAAO+G,EAAU/G,MAAM9D,SAClD6K,EAAUpF,OADAoF,EAAU/G,eAM7B7D,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAAS2K,EACT5D,UAAWyD,EAAkBnK,SAE5ByB,EAAE,oBAKTxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,aACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtB2K,aAQXjL,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,iBAAiBvG,UAAU,0CAAyCI,SAChFyB,EAAE,+BAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,YAAAmG,EAAAA,EAAAA,GAAA,CACEV,GAAG,iBACH1B,KAAK,iBACLqC,KAAM,EACNzG,UAAU,8IACV2B,SAAUA,EACV+E,YAAa7E,EAAE,wCACXa,EAAS,6BASzB,EAAewE,EAAAA,KAAWoD,GC1LpBY,EAA6BzJ,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EACxE,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxBuJ,EAAiBC,IAAsBxG,EAAAA,EAAAA,UAAS,KAChDyG,EAAkBC,IAAuB1G,EAAAA,EAAAA,UAAS,SAClD2G,EAAiBC,IAAsB5G,EAAAA,EAAAA,UAAS,IAGjD6G,GAA2B5H,EAAAA,EAAAA,cAAY,KAC3C,IAAKsH,EAAiB,OAEtB,MAAMO,EAAqB5I,EAAM,gBAAkB,GACnDD,EAAS,cAAe,IACnB6I,EACH,CACEC,MAAOR,EACPS,OAAQP,EACRQ,MAAON,KAKXH,EAAmB,IACnBE,EAAoB,QACpBE,EAAmB,MAClB,CAACL,EAAiBE,EAAkBE,EAAiBzI,EAAOD,IAGzDiJ,GAA8BjI,EAAAA,EAAAA,cAAagE,IAC/C,MACMkE,EAAqB,IADAjJ,EAAM,gBAAkB,IAEnDiJ,EAAmBhE,OAAOF,EAAO,GACjChF,EAAS,cAAekJ,KACvB,CAACjJ,EAAOD,IAGLmJ,GAAsBvJ,EAAAA,EAAAA,UAAQ,KAClC,MAAMwJ,EAAcnJ,EAAM,gBAAkB,GAE5C,OAA2B,IAAvBmJ,EAAY1D,QAEZlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,6BAKFoK,EAAYjL,KAAI,CAACkL,EAAYrE,KAClC/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,gCAA+BI,SAAA,EACvDN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oCAAmCI,SAAA,EAChDN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAML,UAAU,cAAaI,SAAE8L,EAAWP,SAC1CtL,EAAAA,EAAAA,KAAA,QAAML,UAAS,yCAAAC,OACS,SAAtBiM,EAAWN,OACP,8BACA,2BACHxL,SACsB,SAAtB8L,EAAWN,OAAoB/J,EAAE,kBAAoBA,EAAE,wBAG1DF,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAM+L,EAA4BjE,GAAOzH,SAEjDyB,EAAE,sBAIRqK,EAAWL,QACVxL,EAAAA,EAAAA,KAAA,OAAKL,UAAU,6BAA4BI,SACxC8L,EAAWL,UAxBThE,OA6BV,CAAC/E,EAAOjB,EAAGF,EAAUmK,IAExB,OACEhM,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,aAAY9D,SAAEyB,EAAE,2BAC9BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,4BAC/BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,aAAY9D,SAAEyB,EAAE,2BAC9BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQ9D,SAAEyB,EAAE,uBAC1BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,YAAW9D,SAAEyB,EAAE,mCAMnC/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,6BACTwC,KAAK,OACLyB,GAAG,kBACH1B,KAAK,kBACL1B,SAAUA,EACVgE,YAAY,eACZ/E,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,yBACTwC,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACL1B,SAAUA,EACVgE,YAAY,gBACZ/E,SAAUA,QAKdtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,6BACTwC,KAAK,OACLyB,GAAG,kBACH1B,KAAK,kBACL1B,SAAUA,EACVgE,YAAa7E,EAAE,wCACfF,SAAUA,KAIZ7B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,iCAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4CAA2CI,SAAA,EACxDN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,gCAELxB,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLyB,GAAG,kBACH5B,MAAOiH,EACPpC,SAAWd,GAAMmD,EAAmBnD,EAAEE,OAAOjE,OAC7ClE,UAAU,yIACV0G,YAAa7E,EAAE,8CAInB/B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,mBAAmBvG,UAAU,0CAAyCI,SAClFyB,EAAE,uBAEL/B,EAAAA,EAAAA,MAAA,UACEgG,GAAG,mBACH5B,MAAOmH,EACPtC,SAAWd,GAAMqD,EAAoBrD,EAAEE,OAAOjE,OAC9ClE,UAAU,yIAAwII,SAAA,EAElJC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,OAAM9D,SAAEyB,EAAE,qBACxBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,OAAM9D,SAAEyB,EAAE,2BAI5B/B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,sBAELxB,EAAAA,EAAAA,KAAA,YACEyF,GAAG,kBACH5B,MAAOqH,EACPxC,SAAWd,GAAMuD,EAAmBvD,EAAEE,OAAOjE,OAC7CuC,KAAM,EACNzG,UAAU,yIACV0G,YAAa7E,EAAE,oCAInBxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBI,UAC/BC,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAAS0L,EACT3E,UAAWqE,EAAgB/K,SAE1ByB,EAAE,sBAMXxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,cACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtB4L,gBAWjB,EAAe9E,EAAAA,KAAWgE,GC/NpBiB,EAAwB1K,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EACnE,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxBwK,EAAiBC,IAAsBzH,EAAAA,EAAAA,UAAS,KAChD0H,EAAYC,IAAiB3H,EAAAA,EAAAA,UAAS,KACtC4H,EAAiBC,IAAsB7H,EAAAA,EAAAA,UAAS,IAGjD8H,GAAgB7I,EAAAA,EAAAA,cAAY,KAChC,IAAKuI,IAAoBI,EAAiB,OAE1C,MAAMG,EAAe7J,EAAM,UAAY,GACvCD,EAAS,QAAS,IACb8J,EACH,CACEC,YAAaR,EACbS,OAAQP,EACRQ,YAAaN,KAKjBH,EAAmB,IACnBE,EAAc,IACdE,EAAmB,MAClB,CAACL,EAAiBE,EAAYE,EAAiB1J,EAAOD,IAGnDkK,GAAmBlJ,EAAAA,EAAAA,cAAagE,IACpC,MACMmF,EAAe,IADAlK,EAAM,UAAY,IAEvCkK,EAAajF,OAAOF,EAAO,GAC3BhF,EAAS,QAASmK,KACjB,CAAClK,EAAOD,IAGLoK,GAAiBxK,EAAAA,EAAAA,UAAQ,KAC7B,MAAMyK,EAAQpK,EAAM,UAAY,GAEhC,OAAqB,IAAjBoK,EAAM3E,QAENlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,uBAKFqL,EAAMlM,KAAI,CAACmM,EAAMtF,KACtB/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,gCAA+BI,SAAA,EACvDN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oCAAmCI,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaI,SAAE+M,EAAKP,eACjCjL,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAMgN,EAAiBlF,GAAOzH,SAEtCyB,EAAE,uBAIT/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oDAAmDI,SAAA,EAChEN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEN,EAAAA,EAAAA,MAAA,QAAME,UAAU,gBAAeI,SAAA,CAAEyB,EAAE,oBAAoB,QACtDsL,EAAKN,QAAU,UAElB/M,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEN,EAAAA,EAAAA,MAAA,QAAME,UAAU,gBAAeI,SAAA,CAAEyB,EAAE,yBAAyB,QAC3DsL,EAAKL,oBApBHjF,OAyBV,CAAC/E,EAAOjB,EAAGF,EAAUoL,IAExB,OACEjN,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAU9D,SAAEyB,EAAE,yBAC5BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQ9D,SAAEyB,EAAE,uBAC1BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,YAAW9D,SAAEyB,EAAE,0BAC7BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,YAAW9D,SAAEyB,EAAE,0BAC7BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,WAAU9D,SAAEyB,EAAE,kCAMlC/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,uBACTwC,KAAK,OACLyB,GAAG,YACH1B,KAAK,YACL1B,SAAUA,EACVgE,YAAY,qBACZ/E,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,yBACTwC,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACL1B,SAAUA,EACVgE,YAAY,mCACZ/E,SAAUA,QAKd7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,6BACTwC,KAAK,SACLyB,GAAG,kBACH1B,KAAK,kBACL1B,SAAUA,EACVgE,YAAY,cACZ/E,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,2BACTwC,KAAK,SACLyB,GAAG,gBACH1B,KAAK,gBACL1B,SAAUA,EACVgE,YAAY,cACZ/E,SAAUA,KAEZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJC,MAAOhE,EAAE,0BACTwC,KAAK,SACLyB,GAAG,eACH1B,KAAK,eACL1B,SAAUA,EACVf,UAAU,EACVuC,MACEpB,EAAM,kBAAoBA,EAAM,mBAC5BsK,KAAKC,IAAI,EAAGpM,OAAO6B,EAAM,kBAAoB7B,OAAO6B,EAAM,qBAC1D,SAMVhD,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,4BAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4CAA2CI,SAAA,EACxDN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,gCAELxB,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLyB,GAAG,kBACH5B,MAAOkI,EACPrD,SAAWd,GAAMoE,EAAmBpE,EAAEE,OAAOjE,OAC7ClE,UAAU,yIACV0G,YAAa7E,EAAE,8CAInB/B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,aAAavG,UAAU,0CAAyCI,SAC5EyB,EAAE,uBAELxB,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLyB,GAAG,aACH5B,MAAOoI,EACPvD,SAAWd,GAAMsE,EAActE,EAAEE,OAAOjE,OACxClE,UAAU,yIACV0G,YAAY,uBAIhB5G,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,4BAELxB,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLyB,GAAG,kBACH5B,MAAOsI,EACPzD,SAAWd,GAAMwE,EAAmBxE,EAAEE,OAAOjE,OAC7ClE,UAAU,yIACV0G,YAAa7E,EAAE,6CAKrBxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,mBAAkBI,UAC/BC,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAAS2M,EACT5F,UAAWsF,IAAoBI,EAAgBpM,SAE9CyB,EAAE,sBAMXxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,QACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtB6M,aAQXnN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,kCAEL/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBI,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,iBACH1B,KAAK,iBACLC,KAAK,WACLrE,UAAU,yEACN0C,EAAS,mBAAiB,IAC9BoE,SAAUnF,MAEZtB,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,iBAAiBvG,UAAU,mCAAkCI,SACzEyB,EAAE,+BAGP/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBI,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,kBACH1B,KAAK,kBACLC,KAAK,WACLrE,UAAU,yEACN0C,EAAS,oBAAkB,IAC/BoE,SAAUnF,MAEZtB,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,mCAAkCI,SAC1EyB,EAAE,gCAGP/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBI,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,gBACH1B,KAAK,gBACLC,KAAK,WACLrE,UAAU,yEACN0C,EAAS,kBAAgB,IAC7BoE,SAAUnF,MAEZtB,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,gBAAgBvG,UAAU,mCAAkCI,SACxEyB,EAAE,8BAGP/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,oBAAmBI,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,mBACH1B,KAAK,mBACLC,KAAK,WACLrE,UAAU,yEACN0C,EAAS,qBAAmB,IAChCoE,SAAUnF,MAEZtB,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,mBAAmBvG,UAAU,mCAAkCI,SAC3EyB,EAAE,0CAUjB,EAAeqF,EAAAA,KAAWiF,GCnTpBmB,EAAkB7L,IAA6C,IAA5C,SAAEE,GAAW,EAAK,UAAEC,EAAY,MAAMH,EAC7D,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,QAAEiD,EAAO,SAAEF,EAAQ,MAAEI,EAAK,SAAED,IAAaI,EAAAA,EAAAA,IAAQ,CACrDT,cAAeZ,GAAa,CAAC,KAIxB2L,EAAUC,IAAe5I,EAAAA,EAAAA,UAAS,KAClC6I,EAAcC,IAAmB9I,EAAAA,EAAAA,UAAS,IAG3C+I,GAAgB9J,EAAAA,EAAAA,cAAY,KAChC,IAAK0J,EAAU,OAEf,MAAMK,EAAe9K,EAAM,UAAY,GACvCD,EAAS,QAAS,IACb+K,EACH,CACExJ,KAAMmJ,EACNM,SAAUJ,GAAgB,OAK9BD,EAAY,IACZE,EAAgB,MACf,CAACH,EAAUE,EAAc3K,EAAOD,IAG7BiL,GAAmBjK,EAAAA,EAAAA,cAAagE,IACpC,MACMkG,EAAe,IADAjL,EAAM,UAAY,IAEvCiL,EAAahG,OAAOF,EAAO,GAC3BhF,EAAS,QAASkL,KACjB,CAACjL,EAAOD,IAGLmL,GAAiBvL,EAAAA,EAAAA,UAAQ,KAC7B,MAAMwL,EAAQnL,EAAM,UAAY,GAEhC,OAAqB,IAAjBmL,EAAM1F,QAENlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,iCAAgCI,SAC3CyB,EAAE,uBAKFoM,EAAMjN,KAAI,CAACkN,EAAMrG,KACtB/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,kEAAiEI,SAAA,EACzFN,EAAAA,EAAAA,MAAA,QAAAM,SAAA,CACG8N,EAAK9J,KACL8J,EAAKL,UAA8B,MAAlBK,EAAKL,WACrB/N,EAAAA,EAAAA,MAAA,QAAME,UAAU,6BAA4BI,SAAA,CAAC,IACzCyB,EAAE,sBAAsB,KAAGqM,EAAKL,SAAS,WAI/ClM,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLE,QAAQ,SACRC,KAAK,KACLjH,QAASA,IAAM+N,EAAiBjG,GAAOzH,SAEtCyB,EAAE,qBAfAgG,OAoBV,CAAC/E,EAAOjB,EAAGF,EAAUmM,IAExB,OACEhO,EAAAA,EAAAA,MAAC0B,EAAiB,CAACG,SAAUA,EAAUC,UAAWA,EAAUxB,SAAA,EAE1DN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,gBAAgBvG,UAAU,0CAAyCI,SAC/EyB,EAAE,8BAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,SAAAmG,EAAAA,EAAAA,GAAA,CACEnC,KAAK,OACLyB,GAAG,gBACH1B,KAAK,gBACLpE,UAAU,6IACV8G,SAAUnF,EACV+E,YAAa7E,EAAE,uCACXa,EAAS,yBAMnB5C,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,WAAWvG,UAAU,0CAAyCI,SAC1EyB,EAAE,yBAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBN,EAAAA,EAAAA,MAAA,UAAA0G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,WACH1B,KAAK,WACLpE,UAAU,6IACV8G,SAAUnF,GACNe,EAAS,aAAW,IAAAtC,SAAA,EAExBC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,oBACpBxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,cAAa9D,SAAEyB,EAAE,4BAC/BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,SAAQ9D,SAAEyB,EAAE,uBAC1BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,eAAc9D,SAAEyB,EAAE,6BAChCxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,aAAY9D,SAAEyB,EAAE,2BAC9BxB,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,QAAO9D,SAAEyB,EAAE,+BAM/B/B,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOL,UAAU,+CAA8CI,SAC5DyB,EAAE,uCAGHF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gCAA+BI,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,YAAWI,UACxBC,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLH,MAAOqJ,EACPxE,SAAWd,GAAMuF,EAAYvF,EAAEE,OAAOjE,OACtClE,UAAU,oIACV0G,YAAa7E,EAAE,sCAGnBxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,SACEgE,KAAK,OACLH,MAAOuJ,EACP1E,SAAWd,GAAMyF,EAAgBzF,EAAEE,OAAOjE,OAC1ClE,UAAU,oIACV0G,YAAa7E,EAAE,sBAGnBxB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACL0C,QAAQ,UACRC,KAAK,KACLjH,QAAS4N,EACT7G,UAAWyG,EAASnN,SAEnByB,EAAE,oBAKTxB,EAAAA,EAAAA,KAACuG,EAAAA,GAAI,CAAC5G,UAAU,8DAA6DI,UAC3EC,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT5E,KAAK,QACLxB,QAASA,EACTqG,aAAc,GACdC,OAAQ/E,IAAA,IAAC,MAAEgF,GAAOhF,EAAA,OAChB9D,EAAAA,EAAAA,KAAA,MAAIL,UAAU,YAAWI,SACtB4N,aAQXlO,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,gCAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,YAAAmG,EAAAA,EAAAA,GAAA,CACEV,GAAG,kBACH1B,KAAK,kBACLqC,KAAM,EACNzG,UAAU,8IACV2B,SAAUA,EACV+E,YAAa7E,EAAE,yCACXa,EAAS,8BASzB,EAAewE,EAAAA,KAAWoG,E,4ICpM1B,MAAMa,EAAgB1M,IAA6C,IAAD2M,EAAAC,EAAA,IAA3C,SAAE1M,GAAW,EAAK,UAAEC,EAAY,MAAMH,EAC3D,MAAM,EAAEI,IAAMlC,EAAAA,EAAAA,OACR,SAAEmC,EAAQ,eAAEC,EAAc,qBAAEC,IAAyBK,EAAAA,EAAAA,OAGpD+E,EAAcC,IAAmBzC,EAAAA,EAAAA,UAAS,KAG3C,SAAElC,EAAQ,aAAEC,EAAY,QAAEC,EAAO,SAAEC,EAAQ,MAAEC,EAAOC,WAAW,OAAEC,KAAaC,EAAAA,EAAAA,IAAQ,CAC1FT,cAAeZ,GAAaE,EAC5BoB,KAAM,aAIFC,EAAgBL,EAAM,iBACtBM,EAAcN,EAAM,eACpBO,EAAiBP,EAAM,kBACvBQ,EAAeR,EAAM,gBAGrBS,GAAyBC,EAAAA,EAAAA,IAAYL,EAAe,KACpDM,GAAuBD,EAAAA,EAAAA,IAAYJ,EAAa,KAChDM,GAA0BF,EAAAA,EAAAA,IAAYH,EAAgB,KACtDM,GAAwBH,EAAAA,EAAAA,IAAYF,EAAc,MAGxDS,EAAAA,EAAAA,YAAU,KACR,GAAIR,GAA0BE,EAAsB,CAClD,MAAMO,GAAQtD,EAAAA,EAAAA,IAAsB6C,EAAwBE,GAC9C,OAAVO,GACFnB,EAAS,iBAAkBmB,EAE/B,IACC,CAACT,EAAwBE,EAAsBZ,KAElDkB,EAAAA,EAAAA,YAAU,KACR,GAAIL,GAA2BC,EAAuB,CACpD,MAAMK,GAAQtD,EAAAA,EAAAA,IAAsBgD,EAAyBC,GAC/C,OAAVK,GACFnB,EAAS,kBAAmBmB,EAEhC,IACC,CAACN,EAAyBC,EAAuBd,KAGpDkB,EAAAA,EAAAA,YAAU,KACR,MAAME,EAAenB,GAAM,CAACoB,EAAKC,KAAsB,IAApB,KAAEC,EAAI,KAAEC,GAAMF,EAClC,WAATE,GAAqBD,GACvBrC,EAAeqC,EAAMF,EAAME,OAI/B,MAAO,IAAMH,EAAaQ,gBACzB,CAAC3B,EAAOf,IAGX,MAAMuF,GAAY7E,EAAAA,EAAAA,UAAQ,IAAM,CAC9B,CAAEyB,MAAOrC,EAAE,iBAAkBgE,MAAOhE,EAAE,kBACtC,CAAEqC,MAAOrC,EAAE,gBAAiBgE,MAAOhE,EAAE,iBACrC,CAAEqC,MAAOrC,EAAE,qBAAsBgE,MAAOhE,EAAE,sBAC1C,CAAEqC,MAAOrC,EAAE,kBAAmBgE,MAAOhE,EAAE,mBACvC,CAAEqC,MAAOrC,EAAE,kBAAmBgE,MAAOhE,EAAE,mBACvC,CAAEqC,MAAOrC,EAAE,aAAcgE,MAAOhE,EAAE,gBACjC,CAACA,IAGE0F,GAAgB1D,EAAAA,EAAAA,cAAY,KAChC,IAAKuD,EAAc,OAEnB,MAAMO,EAAe7E,EAAM,UAAY,GACvCD,EAAS,QAAS,IAAI8E,EAAcP,IACpCC,EAAgB,MACf,CAACD,EAActE,EAAOD,IAGnB+E,GAAmB/D,EAAAA,EAAAA,cAAagE,IACpC,MACMC,EAAe,IADAhF,EAAM,UAAY,IAEvCgF,EAAaC,OAAOF,EAAO,GAC3BhF,EAAS,QAASiF,KACjB,CAAChF,EAAOD,KAGL,gBAAEZ,EAAe,aAAEC,EAAY,YAAEC,EAAW,cAAEC,IAAkBC,EAAAA,EAAAA,OAG/DqC,EAAoBC,IAAyBC,EAAAA,EAAAA,WAAS,IACtDC,EAAkBC,IAAuBF,EAAAA,EAAAA,WAAS,IAGzDb,EAAAA,EAAAA,YAAU,KACR,GAAI3B,EAAe,CACjBuC,GAAsB,GACtB,MAAM2J,EAAQ/J,YAAW,IAAMI,GAAsB,IAAQ,KAC7D,MAAO,IAAMH,aAAa8J,EAC5B,IACC,CAAClM,KAGJ2B,EAAAA,EAAAA,YAAU,KACR,GAAI5B,EAAa,CACf2C,GAAoB,GACpB,MAAMwJ,EAAQ/J,YAAW,IAAMO,GAAoB,IAAQ,KAC3D,MAAO,IAAMN,aAAa8J,EAC5B,IACC,CAACnM,IAGJ,MAAMT,GAAW6M,EAAAA,EAAAA,KAAoBvJ,UACnC,IAEE,MAAMC,EAAajD,EAAqBkD,SAGlCjD,EAAgBgD,EACxB,CAAE,MAAOE,GACPC,QAAQD,MAAM,+BAAgCA,EAEhD,KAGF,OACE9E,EAAAA,EAAAA,KAACsF,EAAAA,GAAI,CAACjE,SAAUiB,EAAajB,GAAW1B,UAAU,8BAA6BI,UAC7EN,EAAAA,EAAAA,MAAC8G,EAAAA,GAAI,CAAC5G,UAAU,MAAKI,SAAA,CAElBsE,IACCrE,EAAAA,EAAAA,KAAA,OAAKL,UAAU,yEAAwEI,UACrFC,EAAAA,EAAAA,KAAA,KAAGL,UAAU,iBAAgBI,SAAEyB,EAAE,+BAKpCgD,IACCxE,EAAAA,EAAAA,KAAA,OAAKL,UAAU,qEAAoEI,UACjFC,EAAAA,EAAAA,KAAA,KAAGL,UAAU,eAAcI,SAAE+B,OAIjCrC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EAEpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,UACH1B,KAAK,UACLyB,MAAOhE,EAAE,kBACTa,SAAUA,EACVqD,MAAO,CAAEC,UAAU,GACnBb,MAAOnC,EAAOiD,QACduI,UAAW3M,EAAE,mBACbF,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACLyB,MAAOhE,EAAE,yBACTa,SAAUA,EACVqD,MAAO,CAAEC,UAAU,GACnBb,MAAOnC,EAAOkD,YACdsI,UAAW3M,EAAE,mBACbF,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,eACH1B,KAAK,eACLyB,MAAOhE,EAAE,0BACTa,SAAUA,EACVf,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,WACH1B,KAAK,WACLyB,MAAOhE,EAAE,sBACTa,SAAUA,EACVf,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,WACH1B,KAAK,WACLyB,MAAOhE,EAAE,uBAAyB,YAClCa,SAAUA,EACVf,SAAUA,KAIZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,YACH1B,KAAK,YACLyB,MAAOhE,EAAE,wBAA0B,qBACnCa,SAAUA,EACVf,SAAUA,QAKd7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMI,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,yCAAwCI,SAAEyB,EAAE,8BAC1D/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,gBACH1B,KAAK,gBACLyB,MAAOhE,EAAE,2BACTa,SAAUA,EACVf,SAAUA,KAGZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,cACH1B,KAAK,cACLyB,MAAOhE,EAAE,yBACTa,SAAUA,EACVf,SAAUA,KAGZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,SACLyB,GAAG,iBACH1B,KAAK,iBACLyB,MAAOhE,EAAE,2BACTa,SAAUA,EACVf,UAAU,EACV8M,KAAK,gBAMX3O,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMI,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,yCAAwCI,SAAEyB,EAAE,gCAC1D/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuCI,SAAA,EACpDC,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,iBACH1B,KAAK,iBACLyB,MAAOhE,EAAE,6BACTa,SAAUA,EACVf,SAAUA,KAGZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,OACLyB,GAAG,eACH1B,KAAK,eACLyB,MAAOhE,EAAE,2BACTa,SAAUA,EACVf,SAAUA,KAGZtB,EAAAA,EAAAA,KAACuF,EAAAA,GAAK,CACJvB,KAAK,SACLyB,GAAG,kBACH1B,KAAK,kBACLyB,MAAOhE,EAAE,6BACTa,SAAUA,EACVf,UAAU,EACV8M,KAAK,gBAMX3O,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMI,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,yCAAwCI,SAAEyB,EAAE,4BAExDF,IACA7B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,sBAAqBI,SAAA,EAClCN,EAAAA,EAAAA,MAAA,UACEE,UAAU,oIACVkE,MAAOkD,EACP2B,SAAWd,GAAMZ,EAAgBY,EAAEE,OAAOjE,OAAO9D,SAAA,EAEjDC,EAAAA,EAAAA,KAAA,UAAQ6D,MAAM,GAAE9D,SAAEyB,EAAE,4BACnByF,EAAUtG,KAAK0G,IACdrH,EAAAA,EAAAA,KAAA,UAAyB6D,MAAOwD,EAAKxD,MAAM9D,SACxCsH,EAAK7B,OADK6B,EAAKxD,aAKtB7D,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACLtE,QAASwH,EACTT,UAAWM,EACXL,QAAQ,YAAW3G,SAElByB,EAAE,iBAKTxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,oDAAmDI,UACjD,QAAdgO,EAAAtL,EAAM,gBAAQ,IAAAsL,OAAA,EAAdA,EAAgB7F,QAAS,GACxBlI,EAAAA,EAAAA,KAAA,MAAIL,UAAU,2BAA0BI,SACvB,QADuBiO,EACrCvL,EAAM,gBAAQ,IAAAuL,OAAA,EAAdA,EAAgBrN,KAAI,CAAC0G,EAAMG,KAC1B/H,EAAAA,EAAAA,MAAA,MAAgBE,UAAU,yCAAwCI,SAAA,EAChEC,EAAAA,EAAAA,KAAA,QAAAD,SAAOsH,KACL/F,IACAtB,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACLtE,QAASA,IAAM6H,EAAiBC,GAChCd,QAAQ,SACRC,KAAK,KAAI5G,SAERyB,EAAE,kBATAgG,QAgBbxH,EAAAA,EAAAA,KAAA,KAAGL,UAAU,gBAAeI,SAAEyB,EAAE,UAAW,0BAMjD/B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMI,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOkG,QAAQ,kBAAkBvG,UAAU,0CAAyCI,SACjFyB,EAAE,gCAELxB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,OAAMI,UACnBC,EAAAA,EAAAA,KAAA,YAAAmG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEV,GAAG,kBACH1B,KAAK,kBACLpE,UAAU,oIACVyG,KAAM,EACNC,YAAa7E,EAAE,8BACXa,EAAS,oBAAkB,IAC/Bf,SAAUA,WAMdA,IACAtB,EAAAA,EAAAA,KAAA,OAAKL,UAAU,wBAAuBI,UACpCC,EAAAA,EAAAA,KAACwG,EAAAA,GAAM,CACLxC,KAAK,SACLyC,SAAU5E,EACVlC,UAAU,mBAAkBI,SAEZyB,EAAfK,EAAiB,aAAkB,oBAUlD,EAAegF,EAAAA,KAAWiH,E,sFCrW1B,MACA,EADmBjH,EAAAA,YAtBnB,SAAkBzF,EAIfiN,GAAQ,IAJQ,MACjBxO,EAAK,QACLyO,GAEDlN,EADImN,GAAKC,EAAAA,EAAAA,GAAApN,EAAAqN,GAER,OAAoB5H,EAAAA,cAAoB,MAAO6H,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACfC,IAAKZ,EACL,kBAAmBC,GAClBC,GAAQ1O,EAAqBgH,EAAAA,cAAoB,QAAS,CAC3DpB,GAAI6I,GACHzO,GAAS,KAAmBgH,EAAAA,cAAoB,OAAQ,CACzDqI,cAAe,QACfC,eAAgB,QAChBC,EAAG,iDAEP,G","sources":["components/LanguageToggle.js","utils/validators.js","components/tickets/forms/BaseJobTicketForm.js","components/tickets/forms/PumpTechTicketForm.js","components/tickets/forms/DriverTicketForm.js","components/tickets/forms/RoustaboutTicketForm.js","components/tickets/forms/ElectricianTicketForm.js","components/tickets/forms/PipelineOperatorTicketForm.js","components/tickets/forms/TruckDriverTicketForm.js","components/tickets/forms/OtherTicketForm.js","components/tickets/JobTicketForm.js","../node_modules/@heroicons/react/24/outline/esm/Bars3Icon.js"],"sourcesContent":["import React, { memo } from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\n\r\n/**\r\n * Language Toggle component\r\n * Provides a button to switch between English and Spanish\r\n */\r\nconst LanguageToggle = () => {\r\n  const { language, toggleLanguage } = useLanguage();\r\n  \r\n  // Determine which language to show in the toggle button (opposite of current)\r\n  const targetLanguage = language === 'en' ? 'Español' : 'English';\r\n  const instructionText = language === 'es' ? 'click for' : 'haga clic para';\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleLanguage}\r\n      className=\"absolute top-0 right-0 m-4 px-3 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center focus:outline-none focus:ring-2 focus:ring-orange-700\"\r\n      aria-label={`${instructionText} ${targetLanguage}`}\r\n      title={`${instructionText} ${targetLanguage}`}\r\n      tabIndex={0}\r\n    >\r\n      <span className=\"text-xs italic text-white mr-1\">{instructionText}</span>\r\n      <span>{targetLanguage}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(LanguageToggle);\r\n","/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { useTicket } from '../../../context/TicketContext';\nimport { useAuth } from '../../../context/AuthContext';\nimport { calculateHoursBetween } from '../../../utils/validators';\nimport { Card, Button, Input, Form, LoadingSpinner } from '../../ui';\nimport { useDebounce } from '../../../hooks';\n\n/**\n * BaseJobTicketForm - Core form component that centralizes common job ticket functionality\n * \n * This component provides the foundation for all job ticket forms with:\n * - Common fields (date, company, customer, location, work hours, drive hours, description)\n * - Form state management via React Hook Form\n * - Time calculation logic for work and drive hours\n * - Draft saving functionality\n * - Form submission handling\n * - Common UI elements and layout\n * - Performance optimizations (memoization, debouncing, etc.)\n * \n * Job-specific forms should extend this component by:\n * 1. Importing and using it as a base\n * 2. Adding job-specific fields\n * 3. Extending the form data with job-specific values\n * 4. Customizing validation rules if needed\n */\n\n/**\n * Base Job Ticket Form Component\n * Provides common functionality for all job ticket forms\n */\nconst BaseJobTicketForm = ({ \n  children, \n  onSubmit, \n  readOnly = false, \n  draftData = null \n}) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft, submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  const { user } = useAuth();\n  \n  // Setup React Hook Form with memoized default values\n  const defaultValues = useMemo(() => draftData || formData || {}, [draftData, formData]);\n  \n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Memoized calculation functions\n  const calculateWorkHours = useCallback(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      return calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n    }\n    return null;\n  }, [debouncedWorkStartTime, debouncedWorkEndTime]);\n  \n  const calculateDriveHours = useCallback(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      return calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n    }\n    return null;\n  }, [debouncedDriveStartTime, debouncedDriveEndTime]);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    const hours = calculateWorkHours();\n    if (hours !== null) {\n      setValue('workTotalHours', hours);\n    }\n  }, [calculateWorkHours, setValue]);\n  \n  useEffect(() => {\n    const hours = calculateDriveHours();\n    if (hours !== null) {\n      setValue('driveTotalHours', hours);\n    }\n  }, [calculateDriveHours, setValue]);\n  \n  // Auto-save form data when fields change - with debouncing\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        // Use a timeout to debounce updates to form data\n        const timeoutId = setTimeout(() => {\n          updateFormData(name, value[name]);\n        }, 500);\n        \n        return () => clearTimeout(timeoutId);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000);\n    }\n  }, [submitSuccess]);\n  \n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000);\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent recreation\n  const handleFormSubmit = useCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // If custom onSubmit is provided, use it\n      if (onSubmit) {\n        await onSubmit(savedDraft);\n        return;\n      }\n      \n      // Otherwise use default submit behavior\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n    }\n  }, [onSubmit, saveJobTicketAsDraft, submitJobTicket]);\n  \n  // Pre-fill submittedBy field with user's name if available\n  useEffect(() => {\n    if (user?.name && !watch('submittedBy')) {\n      setValue('submittedBy', user.name);\n    }\n  }, [user, setValue, watch]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`BaseJobTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('base-job-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <Form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-8 max-w-3xl mx-auto\">\n      {/* Job Date */}\n      <Input\n        label={t('jobTicket.date')}\n        type=\"date\"\n        id=\"jobDate\"\n        name=\"jobDate\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.jobDate}\n        readOnly={readOnly}\n      />\n      \n      {/* Company Name */}\n      <Input\n        label={t('jobTicket.companyName')}\n        type=\"text\"\n        id=\"companyName\"\n        name=\"companyName\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.companyName}\n        readOnly={readOnly}\n      />\n      \n      {/* Customer Name */}\n      <Input\n        label={t('jobTicket.customerName')}\n        type=\"text\"\n        id=\"customerName\"\n        name=\"customerName\"\n        register={register}\n        error={errors.customerName}\n        readOnly={readOnly}\n      />\n      \n      {/* Location */}\n      <Input\n        label={t('jobTicket.location')}\n        type=\"text\"\n        id=\"location\"\n        name=\"location\"\n        register={register}\n        error={errors.location}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Type */}\n      <Input\n        label={t('jobTicket.workType')}\n        type=\"text\"\n        id=\"workType\"\n        name=\"workType\"\n        register={register}\n        error={errors.workType}\n        readOnly={readOnly}\n      />\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        error={errors.equipment}\n        readOnly={readOnly}\n      />\n      \n      {/* Description of Work */}\n      <div>\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workDescription')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border border-gray-500 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            placeholder=\"Enter your work description here...\"\n            readOnly={readOnly}\n            {...register('workDescription')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.workStartTime')}\n          type=\"time\"\n          id=\"workStartTime\"\n          name=\"workStartTime\"\n          register={register}\n          error={errors.workStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workEndTime')}\n          type=\"time\"\n          id=\"workEndTime\"\n          name=\"workEndTime\"\n          register={register}\n          error={errors.workEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workTotalTime')}\n          type=\"text\"\n          id=\"workTotalHours\"\n          name=\"workTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Drive Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.travelStartTime')}\n          type=\"time\"\n          id=\"driveStartTime\"\n          name=\"driveStartTime\"\n          register={register}\n          error={errors.driveStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.travelEndTime')}\n          type=\"time\"\n          id=\"driveEndTime\"\n          name=\"driveEndTime\"\n          register={register}\n          error={errors.driveEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.travelTotalTime')}\n          type=\"text\"\n          id=\"driveTotalHours\"\n          name=\"driveTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n\n      \n      {/* Submitted By */}\n      <Input\n        label={t('jobTicket.submittedBy')}\n        type=\"text\"\n        id=\"submittedBy\"\n        name=\"submittedBy\"\n        register={register}\n        error={errors.submittedBy}\n        readOnly={readOnly}\n      />\n      \n      {/* Render children (job-specific fields) */}\n      {children}\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <Card className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </Card>\n      )}\n      \n      {showErrorMessage && (\n        <Card className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitError')}</span>\n        </Card>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              variant={isSubmitting ? \"disabled\" : \"success\"}\n              size=\"lg\"\n            >\n              {isSubmitting ? (\n                <div className=\"flex items-center\">\n                  {t('jobTicket.submitting')}\n                  <LoadingSpinner size=\"sm\" className=\"ml-2\" />\n                </div>\n              ) : \"Submit Job Ticket!\"}\n            </Button>\n          </div>\n        </div>\n      )}\n    </Form>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(BaseJobTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PumpTechTicketForm - Job ticket form specialized for Pump Service Technicians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to pump technicians\n * - Equipment serviced field\n * - Parts used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized parts list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PumpTechTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Get parts list based on current language - memoized to prevent recreation on each render\n  const partsList = useMemo(() => [\n    { value: 'partLubricant', label: t('parts.lubricant') },\n    { value: 'partPumpSeal', label: t('parts.pumpSeal') },\n    { value: 'partThrustChamber', label: t('parts.thrustChamber') },\n    { value: 'partVFDBreaker', label: t('parts.vfdBreaker') },\n    { value: 'partServiceKit', label: t('parts.serviceKit') },\n    { value: 'partOther', label: t('parts.other') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent recreation on each render\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    // Find the selected part's label\n    const selectedPartObj = partsList.find(part => part.value === selectedPart);\n    if (!selectedPartObj) return;\n    \n    // Store both value and label as an object\n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, {\n      value: selectedPart,\n      label: selectedPartObj.label\n    }]);\n    setSelectedPart('');\n  }, [selectedPart, partsList, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent recreation on each render\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle part selection change - memoized to prevent recreation on each render\n  const handlePartChange = useCallback((e) => {\n    // Store both the value and label when selecting a part\n    const selectedValue = e.target.value;\n    const selectedOption = partsList.find(part => part.value === selectedValue);\n    setSelectedPart(selectedOption ? selectedValue : '');\n  }, [partsList]);\n  \n  // Memoize the parts list rendering for better performance\n  const partsListItems = useMemo(() => {\n    const parts = watch('parts') || [];\n    \n    if (parts.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noParts')}\n        </li>\n      );\n    }\n    \n    return parts.map((part, index) => {\n      // Get the label from the part object\n      // Handle both new format (object with value and label) and old format (string)\n      let partLabel;\n      if (typeof part === 'object' && part.label) {\n        partLabel = part.label;\n      } else if (typeof part === 'string') {\n        // Handle old format where part is just a string like 'partLubricant'\n        // Extract the part name by removing 'part' prefix and convert first letter to lowercase\n        const partName = part.replace(/^part/, '').charAt(0).toLowerCase() + part.replace(/^part/, '').slice(1);\n        partLabel = t(`parts.${partName}`);\n      } else {\n        // Fallback\n        partLabel = String(part);\n      }\n      \n      return (\n        <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n          <span>{partLabel}</span>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemovePart(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </li>\n      );\n    });\n  }, [watch, t, readOnly, handleRemovePart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pump-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        placeholder={t('jobTicket.equipmentPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Parts Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.partsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedPart}\n                onChange={handlePartChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n            >\n              {t('jobTicket.addPart')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"parts\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {partsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PumpTechTicketForm);\n","import React, { useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Input } from '../../ui';\n\n/**\n * DriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Vehicle type selection\n * - Mileage tracking\n * - Trip type (local/long haul)\n * \n * Performance optimizations:\n * - Memoized vehicle types\n * - React.memo for preventing unnecessary re-renders\n */\nconst DriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { register, formState: { errors } } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // Memoize vehicle types to prevent recreation on each render\n  const vehicleTypes = useMemo(() => [\n    { value: '', label: t('common.select') },\n    { value: 'truck', label: t('vehicleTypes.truck') || 'Truck' },\n    { value: 'van', label: t('vehicleTypes.van') || 'Van' },\n    { value: 'car', label: t('vehicleTypes.car') || 'Car' }\n  ], [t]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`DriverTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('driver-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Driver-specific fields */}\n      <div>\n        <label htmlFor=\"vehicleType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.vehicleType') || 'Vehicle Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"vehicleType\"\n            name=\"vehicleType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('vehicleType', { required: true })}\n          >\n            {vehicleTypes.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          {errors.vehicleType && (\n            <p className=\"mt-1 text-sm text-red-500\">\n              {t('validation.required')}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      {/* Mileage */}\n      <Input\n        label={t('jobTicket.mileage') || 'Mileage'}\n        type=\"number\"\n        id=\"mileage\"\n        name=\"mileage\"\n        register={register}\n        rules={{ required: true, min: 0 }}\n        error={errors.mileage}\n        placeholder={t('jobTicket.mileagePlaceholder') || 'Enter total miles driven'}\n        readOnly={readOnly}\n      />\n      \n      {/* Trip Type */}\n      <div>\n        <label htmlFor=\"tripType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.tripType') || 'Trip Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"tripType\"\n            name=\"tripType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('tripType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"local\">{t('tripTypes.local') || 'Local'}</option>\n            <option value=\"longHaul\">{t('tripTypes.longHaul') || 'Long Haul'}</option>\n          </select>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * RoustaboutTicketForm - Job ticket form specialized for Roustabout workers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to roustabouts\n * - Equipment used field\n * - Materials used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized materials list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst RoustaboutTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected material in dropdown\n  const [selectedMaterial, setSelectedMaterial] = useState('');\n  \n  // Get materials list based on current language - memoized to prevent recreation on each render\n  const materialsList = useMemo(() => [\n    { value: t('materials.pipe'), label: t('materials.pipe') },\n    { value: t('materials.fittings'), label: t('materials.fittings') },\n    { value: t('materials.valves'), label: t('materials.valves') },\n    { value: t('materials.tools'), label: t('materials.tools') },\n    { value: t('materials.safety'), label: t('materials.safety') },\n    { value: t('materials.other'), label: t('materials.other') },\n  ], [t]);\n  \n  // Handle adding a material - memoized to prevent recreation on each render\n  const handleAddMaterial = useCallback(() => {\n    if (!selectedMaterial) return;\n    \n    const currentMaterials = watch('materials') || [];\n    setValue('materials', [...currentMaterials, selectedMaterial]);\n    setSelectedMaterial('');\n  }, [selectedMaterial, watch, setValue]);\n  \n  // Handle removing a material - memoized to prevent recreation on each render\n  const handleRemoveMaterial = useCallback((index) => {\n    const currentMaterials = watch('materials') || [];\n    const updatedMaterials = [...currentMaterials];\n    updatedMaterials.splice(index, 1);\n    setValue('materials', updatedMaterials);\n  }, [watch, setValue]);\n  \n  // Handle material selection change - memoized to prevent recreation on each render\n  const handleMaterialChange = useCallback((e) => {\n    setSelectedMaterial(e.target.value);\n  }, []);\n  \n  // Memoize the materials list rendering for better performance\n  const materialsListItems = useMemo(() => {\n    const materials = watch('materials') || [];\n    \n    if (materials.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noMaterials')}\n        </li>\n      );\n    }\n    \n    return materials.map((material, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{material}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveMaterial(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveMaterial]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Roustabout-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"construction\">{t('workTypes.construction')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"pipeline\">{t('workTypes.pipeline')}</option>\n            <option value=\"wellService\">{t('workTypes.wellService')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment Used */}\n      <Input\n        label={t('jobTicket.equipmentUsed')}\n        type=\"text\"\n        id=\"equipmentUsed\"\n        name=\"equipmentUsed\"\n        register={register}\n        placeholder={t('jobTicket.equipmentUsedPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Materials Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedMaterial}\n                onChange={handleMaterialChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {materialsList.map((material) => (\n                  <option key={material.value} value={material.value}>\n                    {material.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddMaterial}\n              disabled={!selectedMaterial}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"materials\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {materialsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Site Conditions */}\n      <div>\n        <label htmlFor=\"siteConditions\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.siteConditions')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"siteConditions\"\n            name=\"siteConditions\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.siteConditionsPlaceholder')}\n            {...register('siteConditions')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(RoustaboutTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * ElectricianTicketForm - Job ticket form specialized for Electricians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to electricians\n * - Voltage/amperage fields\n * - Components used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized components list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst ElectricianTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected component in dropdown\n  const [selectedComponent, setSelectedComponent] = useState('');\n  \n  // Get components list based on current language - memoized to prevent recreation on each render\n  const componentsList = useMemo(() => [\n    { value: t('components.wiring'), label: t('components.wiring') },\n    { value: t('components.breakers'), label: t('components.breakers') },\n    { value: t('components.switches'), label: t('components.switches') },\n    { value: t('components.panels'), label: t('components.panels') },\n    { value: t('components.motors'), label: t('components.motors') },\n    { value: t('components.other'), label: t('components.other') },\n  ], [t]);\n  \n  // Handle adding a component - memoized to prevent recreation on each render\n  const handleAddComponent = useCallback(() => {\n    if (!selectedComponent) return;\n    \n    const currentComponents = watch('components') || [];\n    setValue('components', [...currentComponents, selectedComponent]);\n    setSelectedComponent('');\n  }, [selectedComponent, watch, setValue]);\n  \n  // Handle removing a component - memoized to prevent recreation on each render\n  const handleRemoveComponent = useCallback((index) => {\n    const currentComponents = watch('components') || [];\n    const updatedComponents = [...currentComponents];\n    updatedComponents.splice(index, 1);\n    setValue('components', updatedComponents);\n  }, [watch, setValue]);\n  \n  // Handle component selection change - memoized to prevent recreation on each render\n  const handleComponentChange = useCallback((e) => {\n    setSelectedComponent(e.target.value);\n  }, []);\n  \n  // Memoize the components list rendering for better performance\n  const componentsListItems = useMemo(() => {\n    const components = watch('components') || [];\n    \n    if (components.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noComponents')}\n        </li>\n      );\n    }\n    \n    return components.map((component, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{component}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveComponent(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveComponent]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Electrician-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"troubleshooting\">{t('workTypes.troubleshooting')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Voltage/Amperage */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.voltage')}\n          type=\"text\"\n          id=\"voltage\"\n          name=\"voltage\"\n          register={register}\n          placeholder=\"e.g., 120V, 240V, 480V\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.amperage')}\n          type=\"text\"\n          id=\"amperage\"\n          name=\"amperage\"\n          register={register}\n          placeholder=\"e.g., 15A, 20A, 30A\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Components Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.componentsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedComponent}\n                onChange={handleComponentChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {componentsList.map((component) => (\n                  <option key={component.value} value={component.value}>\n                    {component.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddComponent}\n              disabled={!selectedComponent}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"components\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {componentsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Safety Measures */}\n      <div>\n        <label htmlFor=\"safetyMeasures\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.safetyMeasures')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"safetyMeasures\"\n            name=\"safetyMeasures\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.safetyMeasuresPlaceholder')}\n            {...register('safetyMeasures')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(ElectricianTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PipelineOperatorTicketForm - Job ticket form specialized for Pipeline Operators\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Pipeline-specific work types\n * - Pressure and flow readings\n * - Inspection points with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized inspection points list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PipelineOperatorTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for inspection point in form\n  const [inspectionPoint, setInspectionPoint] = useState('');\n  const [inspectionStatus, setInspectionStatus] = useState('pass');\n  const [inspectionNotes, setInspectionNotes] = useState('');\n  \n  // Handle adding an inspection point - memoized to prevent recreation on each render\n  const handleAddInspectionPoint = useCallback(() => {\n    if (!inspectionPoint) return;\n    \n    const currentInspections = watch('inspections') || [];\n    setValue('inspections', [\n      ...currentInspections, \n      { \n        point: inspectionPoint, \n        status: inspectionStatus,\n        notes: inspectionNotes\n      }\n    ]);\n    \n    // Reset form fields\n    setInspectionPoint('');\n    setInspectionStatus('pass');\n    setInspectionNotes('');\n  }, [inspectionPoint, inspectionStatus, inspectionNotes, watch, setValue]);\n  \n  // Handle removing an inspection point - memoized to prevent recreation on each render\n  const handleRemoveInspectionPoint = useCallback((index) => {\n    const currentInspections = watch('inspections') || [];\n    const updatedInspections = [...currentInspections];\n    updatedInspections.splice(index, 1);\n    setValue('inspections', updatedInspections);\n  }, [watch, setValue]);\n  \n  // Memoize the inspections list rendering for better performance\n  const inspectionListItems = useMemo(() => {\n    const inspections = watch('inspections') || [];\n    \n    if (inspections.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noInspections')}\n        </li>\n      );\n    }\n    \n    return inspections.map((inspection, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"font-medium\">{inspection.point}</span>\n            <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${\n              inspection.status === 'pass' \n                ? 'bg-green-200 text-green-800' \n                : 'bg-red-200 text-red-800'\n            }`}>\n              {inspection.status === 'pass' ? t('jobTicket.pass') : t('jobTicket.fail')}\n            </span>\n          </div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveInspectionPoint(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        {inspection.notes && (\n          <div className=\"mt-1 text-sm text-gray-300\">\n            {inspection.notes}\n          </div>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveInspectionPoint]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pipeline-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"monitoring\">{t('workTypes.monitoring')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"emergency\">{t('workTypes.emergency')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Pressure and Flow Readings */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.pressureReading')}\n          type=\"text\"\n          id=\"pressureReading\"\n          name=\"pressureReading\"\n          register={register}\n          placeholder=\"e.g., 65 PSI\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.flowReading')}\n          type=\"text\"\n          id=\"flowReading\"\n          name=\"flowReading\"\n          register={register}\n          placeholder=\"e.g., 250 GPM\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Pipeline Section */}\n      <Input\n        label={t('jobTicket.pipelineSection')}\n        type=\"text\"\n        id=\"pipelineSection\"\n        name=\"pipelineSection\"\n        register={register}\n        placeholder={t('jobTicket.pipelineSectionPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Inspection Points */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.inspectionPoints')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div>\n              <label htmlFor=\"inspectionPoint\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.inspectionPoint')}\n              </label>\n              <input\n                type=\"text\"\n                id=\"inspectionPoint\"\n                value={inspectionPoint}\n                onChange={(e) => setInspectionPoint(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.inspectionPointPlaceholder')}\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionStatus\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.status')}\n              </label>\n              <select\n                id=\"inspectionStatus\"\n                value={inspectionStatus}\n                onChange={(e) => setInspectionStatus(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"pass\">{t('jobTicket.pass')}</option>\n                <option value=\"fail\">{t('jobTicket.fail')}</option>\n              </select>\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionNotes\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.notes')}\n              </label>\n              <textarea\n                id=\"inspectionNotes\"\n                value={inspectionNotes}\n                onChange={(e) => setInspectionNotes(e.target.value)}\n                rows={2}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.notesPlaceholder')}\n              />\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddInspectionPoint}\n                disabled={!inspectionPoint}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"inspections\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {inspectionListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PipelineOperatorTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * TruckDriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Truck-specific work types\n * - Mileage tracking\n * - Load details with add/remove functionality\n * - Vehicle inspection checklist\n * \n * Performance optimizations:\n * - Memoized loads list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst TruckDriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for load details in form\n  const [loadDescription, setLoadDescription] = useState('');\n  const [loadWeight, setLoadWeight] = useState('');\n  const [loadDestination, setLoadDestination] = useState('');\n  \n  // Handle adding a load - memoized to prevent recreation on each render\n  const handleAddLoad = useCallback(() => {\n    if (!loadDescription || !loadDestination) return;\n    \n    const currentLoads = watch('loads') || [];\n    setValue('loads', [\n      ...currentLoads, \n      { \n        description: loadDescription, \n        weight: loadWeight,\n        destination: loadDestination\n      }\n    ]);\n    \n    // Reset form fields\n    setLoadDescription('');\n    setLoadWeight('');\n    setLoadDestination('');\n  }, [loadDescription, loadWeight, loadDestination, watch, setValue]);\n  \n  // Handle removing a load - memoized to prevent recreation on each render\n  const handleRemoveLoad = useCallback((index) => {\n    const currentLoads = watch('loads') || [];\n    const updatedLoads = [...currentLoads];\n    updatedLoads.splice(index, 1);\n    setValue('loads', updatedLoads);\n  }, [watch, setValue]);\n  \n  // Memoize the loads list rendering for better performance\n  const loadsListItems = useMemo(() => {\n    const loads = watch('loads') || [];\n    \n    if (loads.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noLoads')}\n        </li>\n      );\n    }\n    \n    return loads.map((load, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"font-medium\">{load.description}</div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveLoad(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        <div className=\"mt-1 grid grid-cols-2 gap-2 text-sm text-gray-300\">\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.weight')}: </span>\n            {load.weight || 'N/A'}\n          </div>\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.destination')}: </span>\n            {load.destination}\n          </div>\n        </div>\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveLoad]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Truck Driver-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"delivery\">{t('workTypes.delivery')}</option>\n            <option value=\"pickup\">{t('workTypes.pickup')}</option>\n            <option value=\"transport\">{t('workTypes.transport')}</option>\n            <option value=\"equipment\">{t('workTypes.equipment')}</option>\n            <option value=\"supplies\">{t('workTypes.supplies')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Vehicle Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.vehicleId')}\n          type=\"text\"\n          id=\"vehicleId\"\n          name=\"vehicleId\"\n          register={register}\n          placeholder=\"e.g., TRK-2023-104\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.vehicleType')}\n          type=\"text\"\n          id=\"vehicleType\"\n          name=\"vehicleType\"\n          register={register}\n          placeholder=\"e.g., Semi-truck, Pickup, Tanker\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Mileage Tracking */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.startingMileage')}\n          type=\"number\"\n          id=\"startingMileage\"\n          name=\"startingMileage\"\n          register={register}\n          placeholder=\"e.g., 45780\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.endingMileage')}\n          type=\"number\"\n          id=\"endingMileage\"\n          name=\"endingMileage\"\n          register={register}\n          placeholder=\"e.g., 45920\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.totalMileage')}\n          type=\"number\"\n          id=\"totalMileage\"\n          name=\"totalMileage\"\n          register={register}\n          readOnly={true}\n          value={\n            watch('endingMileage') && watch('startingMileage')\n              ? Math.max(0, Number(watch('endingMileage')) - Number(watch('startingMileage')))\n              : ''\n          }\n        />\n      </div>\n      \n      {/* Load Details */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.loadDetails')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              <div>\n                <label htmlFor=\"loadDescription\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.loadDescription')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDescription\"\n                  value={loadDescription}\n                  onChange={(e) => setLoadDescription(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.loadDescriptionPlaceholder')}\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadWeight\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.weight')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadWeight\"\n                  value={loadWeight}\n                  onChange={(e) => setLoadWeight(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder=\"e.g., 2500 lbs\"\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadDestination\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.destination')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDestination\"\n                  value={loadDestination}\n                  onChange={(e) => setLoadDestination(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.destinationPlaceholder')}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddLoad}\n                disabled={!loadDescription || !loadDestination}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"loads\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {loadsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Vehicle Inspection */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.vehicleInspection')}\n        </label>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionFuel\"\n              name=\"inspectionFuel\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionFuel')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionFuel\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.fuelChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionTires\"\n              name=\"inspectionTires\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionTires')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionTires\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.tiresChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionOil\"\n              name=\"inspectionOil\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionOil')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionOil\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.oilChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionLights\"\n              name=\"inspectionLights\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionLights')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionLights\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.lightsChecked')}\n            </label>\n          </div>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(TruckDriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * OtherTicketForm - Generic job ticket form for \"Other\" job types\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Customizable job type field\n * - Materials/equipment used with add/remove functionality\n * - Additional notes section\n * \n * Performance optimizations:\n * - Memoized items list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst OtherTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected item in dropdown\n  const [itemName, setItemName] = useState('');\n  const [itemQuantity, setItemQuantity] = useState('');\n  \n  // Handle adding an item - memoized to prevent recreation on each render\n  const handleAddItem = useCallback(() => {\n    if (!itemName) return;\n    \n    const currentItems = watch('items') || [];\n    setValue('items', [\n      ...currentItems, \n      { \n        name: itemName, \n        quantity: itemQuantity || '1'\n      }\n    ]);\n    \n    // Reset form fields\n    setItemName('');\n    setItemQuantity('');\n  }, [itemName, itemQuantity, watch, setValue]);\n  \n  // Handle removing an item - memoized to prevent recreation on each render\n  const handleRemoveItem = useCallback((index) => {\n    const currentItems = watch('items') || [];\n    const updatedItems = [...currentItems];\n    updatedItems.splice(index, 1);\n    setValue('items', updatedItems);\n  }, [watch, setValue]);\n  \n  // Memoize the items list rendering for better performance\n  const itemsListItems = useMemo(() => {\n    const items = watch('items') || [];\n    \n    if (items.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noItems')}\n        </li>\n      );\n    }\n    \n    return items.map((item, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>\n          {item.name}\n          {item.quantity && item.quantity !== '1' && (\n            <span className=\"ml-2 text-sm text-gray-400\">\n              ({t('jobTicket.quantity')}: {item.quantity})\n            </span>\n          )}\n        </span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveItem(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveItem]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Custom Job Type */}\n      <div>\n        <label htmlFor=\"customJobType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.customJobType')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"customJobType\"\n            name=\"customJobType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            placeholder={t('jobTicket.customJobTypePlaceholder')}\n            {...register('customJobType')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Type */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"other\">{t('workTypes.other')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Materials/Equipment Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsEquipmentUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <input\n                type=\"text\"\n                value={itemName}\n                onChange={(e) => setItemName(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.itemNamePlaceholder')}\n              />\n            </div>\n            <div className=\"w-24\">\n              <input\n                type=\"text\"\n                value={itemQuantity}\n                onChange={(e) => setItemQuantity(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.qty')}\n              />\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddItem}\n              disabled={!itemName}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"items\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {itemsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Additional Notes */}\n      <div>\n        <label htmlFor=\"additionalNotes\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.additionalNotes')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"additionalNotes\"\n            name=\"additionalNotes\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.additionalNotesPlaceholder')}\n            {...register('additionalNotes')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(OtherTicketForm);\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { calculateHoursBetween } from '../../utils/validators';\nimport { Input, Button, Form, Card } from '../ui';\nimport { useDebounce, useMemoizedCallback } from '../../hooks';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management with performance optimizations\n * \n * @param {Object} props - Component props\n * @param {boolean} props.readOnly - Whether the form is in read-only mode\n * @param {Object} props.draftData - Draft data to pre-populate the form\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      const hours = calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [debouncedWorkStartTime, debouncedWorkEndTime, setValue]);\n  \n  useEffect(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      const hours = calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [debouncedDriveStartTime, debouncedDriveEndTime, setValue]);\n  \n  // Auto-save form data when fields change - optimized with useCallback\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language - memoized to prevent re-creation\n  const partsList = useMemo(() => [\n    { value: t('partLubricant'), label: t('partLubricant') },\n    { value: t('partPumpSeal'), label: t('partPumpSeal') },\n    { value: t('partThrustChamber'), label: t('partThrustChamber') },\n    { value: t('partVFDBreaker'), label: t('partVFDBreaker') },\n    { value: t('partServiceKit'), label: t('partServiceKit') },\n    { value: t('partOther'), label: t('partOther') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent re-creation\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  }, [selectedPart, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent re-creation\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      const timer = setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      const timer = setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent re-creation\n  const onSubmit = useMemoizedCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  });\n  \n  return (\n    <Form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6 max-w-3xl mx-auto\">\n      <Card className=\"p-6\">\n        {/* Success message */}\n        {showSuccessMessage && (\n          <div className=\"mb-4 p-4 bg-green-900 bg-opacity-20 border border-green-700 rounded-md\">\n            <p className=\"text-green-400\">{t('jobTicket.submitSuccess')}</p>\n          </div>\n        )}\n        \n        {/* Error message */}\n        {showErrorMessage && (\n          <div className=\"mb-4 p-4 bg-red-900 bg-opacity-20 border border-red-700 rounded-md\">\n            <p className=\"text-red-400\">{submitError}</p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Job Date */}\n          <Input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            label={t('jobTicket.date')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.jobDate}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Company Name */}\n          <Input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            label={t('jobTicket.companyName')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.companyName}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Customer Name */}\n          <Input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            label={t('jobTicket.customerName')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Location */}\n          <Input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            label={t('jobTicket.location')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Work Type */}\n          <Input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            label={t('jobTicket.workType') || 'Work Type'}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Equipment */}\n          <Input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            label={t('jobTicket.equipment') || 'Equipment Serviced'}\n            register={register}\n            readOnly={readOnly}\n          />\n        </div>\n        \n        {/* Work Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.workTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              label={t('jobTicket.workStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              label={t('jobTicket.workEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"workTotalHours\"\n              name=\"workTotalHours\"\n              label={t('jobTicket.workTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Drive Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.travelTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              label={t('jobTicket.travelStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              label={t('jobTicket.travelEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"driveTotalHours\"\n              name=\"driveTotalHours\"\n              label={t('jobTicket.travelTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Parts Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.parts.title')}</h3>\n          \n          {!readOnly && (\n            <div className=\"flex space-x-2 mb-4\">\n              <select\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={selectedPart}\n                onChange={(e) => setSelectedPart(e.target.value)}\n              >\n                <option value=\"\">{t('selectPartsPlaceholder')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n              <Button \n                type=\"button\" \n                onClick={handleAddPart}\n                disabled={!selectedPart}\n                variant=\"secondary\"\n              >\n                {t('addPart')}\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"bg-gray-800 rounded-md border border-gray-700 p-4\">\n            {watch('parts')?.length > 0 ? (\n              <ul className=\"divide-y divide-gray-700\">\n                {watch('parts')?.map((part, index) => (\n                  <li key={index} className=\"py-2 flex justify-between items-center\">\n                    <span>{part}</span>\n                    {!readOnly && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => handleRemovePart(index)}\n                        variant=\"danger\"\n                        size=\"sm\"\n                      >\n                        {t('removePart')}\n                      </Button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-400\">{t('noParts', 'No parts added')}</p>\n            )}\n          </div>\n        </div>\n        \n        {/* Description */}\n        <div className=\"mt-8\">\n          <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workDescription')}\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"workDescription\"\n              name=\"workDescription\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              rows={4}\n              placeholder={t('jobTicket.workDescription')}\n              {...register('workDescription')}\n              readOnly={readOnly}\n            />\n          </div>\n        </div>\n        \n        {/* Submit Button */}\n        {!readOnly && (\n          <div className=\"mt-8 flex justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full md:w-auto\"\n            >\n              {isSubmitting ? t('submitting') : t('submit')}\n            </Button>\n          </div>\n        )}\n      </Card>\n    </Form>\n  );\n};\n\n// Use React.memo to prevent unnecessary re-renders\nexport default React.memo(JobTicketForm);\n","import * as React from \"react\";\nfunction Bars3Icon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(Bars3Icon);\nexport default ForwardRef;"],"names":["LanguageToggle","language","toggleLanguage","useLanguage","targetLanguage","instructionText","_jsxs","onClick","className","concat","title","tabIndex","children","_jsx","memo","isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","BaseJobTicketForm","_ref","onSubmit","readOnly","draftData","t","formData","updateFormData","saveJobTicketAsDraft","submitJobTicket","isSubmitting","submitError","submitSuccess","useTicket","user","useAuth","defaultValues","useMemo","register","handleSubmit","control","setValue","watch","formState","errors","useForm","mode","workStartTime","workEndTime","driveStartTime","driveEndTime","debouncedWorkStartTime","useDebounce","debouncedWorkEndTime","debouncedDriveStartTime","debouncedDriveEndTime","calculateWorkHours","useCallback","calculateDriveHours","useEffect","hours","subscription","value","_ref2","name","type","timeoutId","setTimeout","clearTimeout","unsubscribe","showSuccessMessage","setShowSuccessMessage","useState","showErrorMessage","setShowErrorMessage","handleFormSubmit","async","savedDraft","data","error","console","renderStart","performance","now","renderTime","log","clearMarks","Form","Input","label","id","rules","required","jobDate","companyName","customerName","location","workType","equipment","htmlFor","_objectSpread","rows","placeholder","submittedBy","Card","Button","disabled","variant","size","LoadingSpinner","React","PumpTechTicketForm","selectedPart","setSelectedPart","partsList","handleAddPart","selectedPartObj","find","part","currentParts","handleRemovePart","index","updatedParts","splice","handlePartChange","e","selectedValue","target","selectedOption","partsListItems","parts","length","partLabel","partName","replace","charAt","toLowerCase","slice","String","onChange","Controller","defaultValue","render","field","DriverTicketForm","vehicleTypes","option","vehicleType","min","mileage","RoustaboutTicketForm","selectedMaterial","setSelectedMaterial","materialsList","handleAddMaterial","currentMaterials","handleRemoveMaterial","updatedMaterials","handleMaterialChange","materialsListItems","materials","material","ElectricianTicketForm","selectedComponent","setSelectedComponent","componentsList","handleAddComponent","currentComponents","handleRemoveComponent","updatedComponents","handleComponentChange","componentsListItems","components","component","PipelineOperatorTicketForm","inspectionPoint","setInspectionPoint","inspectionStatus","setInspectionStatus","inspectionNotes","setInspectionNotes","handleAddInspectionPoint","currentInspections","point","status","notes","handleRemoveInspectionPoint","updatedInspections","inspectionListItems","inspections","inspection","TruckDriverTicketForm","loadDescription","setLoadDescription","loadWeight","setLoadWeight","loadDestination","setLoadDestination","handleAddLoad","currentLoads","description","weight","destination","handleRemoveLoad","updatedLoads","loadsListItems","loads","load","Math","max","OtherTicketForm","itemName","setItemName","itemQuantity","setItemQuantity","handleAddItem","currentItems","quantity","handleRemoveItem","updatedItems","itemsListItems","items","item","JobTicketForm","_watch","_watch2","timer","useMemoizedCallback","errorText","step","svgRef","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}