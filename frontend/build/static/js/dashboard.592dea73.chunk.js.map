{"version":3,"file":"static/js/dashboard.592dea73.chunk.js","mappings":"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","sources":["components/tickets/DraftTicketList.js","../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js","components/tickets/SubmittedTicketList.js","components/LandingPage.js","components/tickets/JobTicketFormSelector.js","components/tickets/DraftTicketView.js","components/AppDashboard.js","../node_modules/@heroicons/react/24/outline/esm/QuestionMarkCircleIcon.js"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, Button, Modal, VirtualList, LoadingSpinner } from '../ui';\nimport { useMemoizedCallback } from '../../hooks';\n\n/**\n * Draft Ticket List component\n * Displays a table of all draft job tickets with edit functionality\n */\nconst DraftTicketList = () => {\n  const { t } = useLanguage();\n  const { draftTickets, setSelectedDraftTicket, setViewMode, deleteDraftTicket, setTicketMode } = useTicket();\n  \n  // State for confirmation modal\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  \n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return dateString;\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n  \n  // Handle view ticket - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticket) => {\n    setSelectedDraftTicket(ticket);\n    setViewMode('draft');\n  }, [setSelectedDraftTicket, setViewMode]);\n  \n  // Handle edit ticket - memoized to prevent recreation on each render\n  const handleEditTicket = useCallback((ticket) => {\n    setSelectedTicket(ticket);\n    setShowConfirmModal(true);\n  }, [setSelectedTicket]);\n  \n  // Confirm edit and load draft into form - memoized to prevent recreation on each render\n  const confirmEditDraft = useCallback(() => {\n    if (selectedTicket) {\n      // Set the selected draft ticket\n      setSelectedDraftTicket(selectedTicket);\n      \n      // Set ticket mode to manual to ensure form loads properly\n      setTicketMode('manual');\n      \n      // Change view mode to form to load the appropriate form component\n      setViewMode('form');\n      \n      // Remove the draft from the list\n      deleteDraftTicket(selectedTicket.id);\n    }\n    setShowConfirmModal(false);\n  }, [selectedTicket, setSelectedDraftTicket, setTicketMode, setViewMode, deleteDraftTicket]);\n  \n  // Cancel edit - memoized to prevent recreation on each render\n  const cancelEditDraft = useCallback(() => {\n    setSelectedTicket(null);\n    setShowConfirmModal(false);\n  }, []);\n  \n  // Handle delete ticket - memoized to prevent recreation on each render\n  const handleDeleteTicket = useCallback((ticketId) => {\n    deleteDraftTicket(ticketId);\n  }, [deleteDraftTicket]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.drafts')}\n      </h1>\n      \n      <Card className=\"overflow-hidden\">\n        {/* Table Header - Fixed to improve scrolling performance */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider w-24\">\n                  {t('common.edit')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                  {t('jobTicket.date')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.company')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.location')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                  {t('jobTicket.hours')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('jobTicket.description')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('common.actions')}\n                </th>\n              </tr>\n            </thead>\n            \n            {/* Table Body - Use VirtualList for large datasets */}\n            {draftTickets.length === 0 ? (\n              <tbody>\n                <tr>\n                  <td colSpan=\"7\" className=\"px-6 py-4\">\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400\">{t('jobTicket.noDrafts')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            ) : (\n              <tbody className=\"divide-y divide-gray-700\">\n                <VirtualList\n                  items={draftTickets}\n                  height={400}\n                  itemHeight={64}\n                  renderItem={(ticket) => (\n                    <TicketRow\n                      key={ticket.id}\n                      ticket={ticket}\n                      formatDate={formatDate}\n                      handleEditTicket={handleEditTicket}\n                      handleViewTicket={handleViewTicket}\n                      handleDeleteTicket={handleDeleteTicket}\n                      t={t}\n                    />\n                  )}\n                  overscan={5}\n                  emptyComponent={\n                    <tr>\n                      <td colSpan=\"7\" className=\"px-6 py-4\">\n                        <div className=\"text-center py-8\">\n                          <LoadingSpinner size=\"md\" />\n                        </div>\n                      </td>\n                    </tr>\n                  }\n                />\n              </tbody>\n            )}\n          </table>\n        </div>\n      </Card>\n      \n      {/* Confirmation Modal */}\n      <Modal\n        isOpen={showConfirmModal}\n        onClose={cancelEditDraft}\n        title={t('jobTicket.editConfirmation')}\n        size=\"md\"\n        footer={\n          <>\n            <Button variant=\"secondary\" onClick={cancelEditDraft}>\n              {t('common.no')}\n            </Button>\n            <Button variant=\"primary\" onClick={confirmEditDraft} className=\"ml-3\">\n              {t('common.yes')}\n            </Button>\n          </>\n        }\n      >\n        <p>{t('jobTicket.editConfirmationMessage')}</p>\n      </Modal>\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleEditTicket, handleViewTicket, handleDeleteTicket, t }) => {\n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleEditTicket(ticket)}\n          className=\"text-orange-500 hover:text-orange-400 font-medium\"\n          aria-label={`${t('common.edit')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.edit')}\n        </Button>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.jobDate)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.companyName || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {ticket.workTotalHours || '0'}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.workDescription || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <div className=\"flex flex-col sm:flex-row justify-end sm:space-x-3 space-y-2 sm:space-y-0\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleViewTicket(ticket)}\n            className=\"text-blue-500 hover:text-blue-400\"\n            aria-label={`${t('common.view')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.view')}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleDeleteTicket(ticket.id)}\n            className=\"text-red-500 hover:text-red-400\"\n            aria-label={`${t('common.delete')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.delete')}\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketList);\n","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { useApiCache, useMemoizedCallback } from '../../hooks';\nimport { Card, Button, VirtualList, LoadingSpinner } from '../ui';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n/**\n * Submitted Ticket List Component\n * Displays a table of submitted job tickets with responsive design\n */\nconst SubmittedTicketList = () => {\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  \n  // Use the API cache hook for fetching submitted tickets\n  // This will cache the results for 5 minutes by default\n  const { \n    data: ticketsResponse, \n    isLoading: loading, \n    error: apiError,\n    refetch\n  } = useApiCache('/api/job-tickets/submitted', {\n    cacheTime: 3 * 60 * 1000, // 3 minutes cache\n    onError: (err) => console.error('Error fetching submitted tickets:', err)\n  });\n  \n  // Extract tickets from the response\n  const tickets = ticketsResponse?.data || [];\n  \n  // Format error message\n  const error = apiError ? t('errors.fetchFailed') : null;\n\n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n\n  // View ticket details - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticketId) => {\n    // Implement view ticket functionality\n    console.log('View ticket:', ticketId);\n    // This would typically navigate to a ticket detail page\n  }, []);\n  \n  // Memoize tickets data to prevent unnecessary re-renders\n  const memoizedTickets = useMemo(() => tickets || [], [tickets]);\n\n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.submitted')}\n      </h1>\n\n      {loading ? (\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Card className=\"overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-700\">\n              <thead>\n                <tr>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                    {t('jobTicket.date')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.company')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.location')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                    {t('jobTicket.hours')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                    {t('jobTicket.description')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider w-20\">\n                    {t('common.actions')}\n                  </th>\n                </tr>\n              </thead>\n              {/* Error State */}\n              {error ? (\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n                        <ExclamationCircleIcon className=\"h-5 w-5\" />\n                        <span>{error}</span>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => refetch()} \n                          className=\"ml-3\"\n                        >\n                          {t('common.retry')}\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : memoizedTickets.length === 0 ? (\n                /* Empty State */\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-400\">{t('jobTicket.noSubmitted')}</p>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : (\n                /* Data State with Virtualized List */\n                <tbody className=\"divide-y divide-gray-700\">\n                  <VirtualList\n                    items={memoizedTickets}\n                    height={400}\n                    itemHeight={64}\n                    renderItem={(ticket) => (\n                      <TicketRow\n                        key={ticket.id}\n                        ticket={ticket}\n                        formatDate={formatDate}\n                        handleViewTicket={handleViewTicket}\n                        t={t}\n                      />\n                    )}\n                    overscan={5}\n                    emptyComponent={\n                      <tr>\n                        <td colSpan=\"6\" className=\"px-6 py-4\">\n                          <div className=\"text-center py-8\">\n                            <LoadingSpinner size=\"md\" />\n                          </div>\n                        </td>\n                      </tr>\n                    }\n                  />\n                </tbody>\n              )}\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleViewTicket, t }) => {\n  // Calculate total hours once\n  const totalHours = useMemo(() => {\n    return parseFloat(ticket.work_total_hours || 0) + parseFloat(ticket.travel_total_hours || 0);\n  }, [ticket.work_total_hours, ticket.travel_total_hours]);\n  \n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.job_date)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.company_name || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {totalHours}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.description || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleViewTicket(ticket.id)}\n          className=\"text-orange-500 hover:text-orange-400\"\n          aria-label={`${t('common.view')} ${ticket.company_name || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.view')}\n        </Button>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(SubmittedTicketList);\n","import React, { memo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MicrophoneIcon, PencilSquareIcon, QuestionMarkCircleIcon, DocumentTextIcon } from '@heroicons/react/24/outline';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport { useTicket } from '../context/TicketContext';\r\nimport { useVoice } from '../context/VoiceContext';\r\n\r\n/**\r\n * Landing Page component\r\n * Displays the initial screen with options to create job tickets\r\n * with a professional and visually appealing design\r\n */\r\nconst LandingPage = () => {\r\n  const { t, language } = useLanguage();\r\n  const { setTicketMode, setViewMode } = useTicket();\r\n  const { startVoiceRecording } = useVoice();\r\n  const navigate = useNavigate();\r\n  \r\n  // Handle manual job ticket creation\r\n  const handleManualClick = () => {\r\n    // Navigate to the dedicated job ticket form page instead of changing context state\r\n    navigate('/job-ticket-form');\r\n  };\r\n  \r\n  // Handle voice job ticket creation\r\n  const handleVoiceClick = () => {\r\n    // Navigate to the dedicated voice recorder page instead of changing context state\r\n    navigate('/voice-recorder');\r\n    // Voice recording will be started in the VoiceRecorderPage component\r\n  };\r\n  \r\n  // Handle help button click (placeholder for future functionality)\r\n  const handleHelpClick = () => {\r\n    console.log('Help button clicked');\r\n    // Future functionality will be added here\r\n  };\r\n  \r\n  return (\r\n    <div className=\"relative flex flex-col items-center justify-center min-h-[80vh] px-4 py-8 overflow-hidden\">\r\n      {/* Background decorative elements */}\r\n      <div className=\"absolute inset-0 z-0 overflow-hidden\">\r\n        {/* Top left decorative shape */}\r\n        <div className=\"absolute -top-20 -left-20 w-64 h-64 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Bottom right decorative shape */}\r\n        <div className=\"absolute -bottom-32 -right-32 w-96 h-96 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Center decorative element */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\r\n          <DocumentTextIcon className=\"w-96 h-96 text-gray-700 opacity-[0.03]\"/>\r\n        </div>\r\n        \r\n        {/* Additional subtle shapes */}\r\n        <div className=\"absolute top-1/4 right-1/4 w-20 h-20 rounded-lg rotate-45 bg-gray-600 opacity-[0.03]\"></div>\r\n        <div className=\"absolute bottom-1/3 left-1/3 w-16 h-16 rounded-lg rotate-12 bg-gray-600 opacity-[0.03]\"></div>\r\n      </div>\r\n      \r\n      {/* Main content */}\r\n      <div className=\"relative z-10 w-full max-w-3xl mx-auto bg-gray-900 bg-opacity-60 backdrop-filter backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-800 p-8 sm:p-10\">\r\n        <div className=\"text-center mb-8\">\r\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-3\">{t('jobTicket.createNew')}</h2>\r\n          <p className=\"text-gray-300 text-sm sm:text-base max-w-md mx-auto\">\r\n            {language === 'en' ? \r\n              'Select how you would like to create your job ticket' : \r\n              'Seleccione cómo desea crear su boleta de trabajo'}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-stretch\">\r\n          {/* By Hand Button */}\r\n          <button\r\n            onClick={handleManualClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('jobTicket.byHand')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <PencilSquareIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('jobTicket.byHand')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Fill out form manually' : 'Llenar formulario manualmente'}\r\n            </span>\r\n          </button>\r\n          \r\n          {/* By Voice Button */}\r\n          <button\r\n            onClick={handleVoiceClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('jobTicket.byVoice')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <MicrophoneIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('jobTicket.byVoice')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Create using voice commands' : 'Crear usando comandos de voz'}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Need Help button */}\r\n      <div className=\"fixed bottom-4 right-4 z-20\">\r\n        <button\r\n          onClick={handleHelpClick}\r\n          className=\"flex items-center space-x-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-full transition-colors shadow-lg\"\r\n          aria-label={t('needHelp') || \"Need Help?\"}\r\n        >\r\n          <QuestionMarkCircleIcon className=\"h-5 w-5 text-white\" />\r\n          <span className=\"text-sm\">\r\n            {t('needHelp') || (language === 'en' ? 'Need Help?' : '¿Necesita Ayuda?')}\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(LandingPage);\r\n","import React, { useMemo } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, LoadingSpinner } from '../ui';\n\n// Import job type specific forms\nimport { PumpTechTicketForm, DriverTicketForm } from './forms';\nimport JobTicketForm from './JobTicketForm'; // Manual \"by hand\" form\n\n/**\n * Job Ticket Form Selector Component\n * Dynamically loads the appropriate job ticket form based on user's job type\n */\nconst JobTicketFormSelector = () => {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { selectedDraftTicket, ticketMode } = useTicket();\n  \n  // Map of job types to their respective form components - defined outside render to avoid recreation\n  const jobTypeForms = useMemo(() => ({\n    'pump_tech': PumpTechTicketForm,\n    'driver': DriverTicketForm,\n    'manual': JobTicketForm,\n    // Add more job types here as they are implemented\n  }), []);\n  \n  // Memoize the job type key to prevent recalculation on every render\n  const jobTypeKey = useMemo(() => {\n    // If manual mode is explicitly set, use the manual form\n    if (ticketMode === 'manual') return 'manual';\n    \n    if (!user || !user.job_type) return 'pump_tech';\n    \n    // Normalize job type string (remove spaces, hyphens, underscores, lowercase)\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map common variations to standard keys\n    const jobTypeMap = {\n      'pump_technician': 'pump_tech',\n      'pumptechnician': 'pump_tech',\n      'pumptech': 'pump_tech',\n      'pump_service_technician': 'pump_tech',\n      'pump_service_tech': 'pump_tech',\n    };\n    \n    return jobTypeMap[normalizedJobType] || normalizedJobType;\n  }, [user, ticketMode]);\n  \n  // Memoize the form component to prevent unnecessary re-renders\n  const FormComponent = useMemo(() => {\n    return jobTypeForms[jobTypeKey] || PumpTechTicketForm;\n  }, [jobTypeForms, jobTypeKey]);\n  \n  // Memoize the draft data to prevent unnecessary re-renders\n  const draftData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // Performance monitoring for form rendering\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  // Log form rendering performance\n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`JobTicketForm (${jobTypeKey}) rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      // Cleanup performance marks\n      performance.clearMarks(`form-render-${jobTypeKey}`);\n    };\n  }, [renderStart, jobTypeKey]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.createNew')}\n      </h1>\n      \n      {selectedDraftTicket && (\n        <Card className=\"bg-blue-500 bg-opacity-20 border border-blue-500 text-blue-500 px-4 py-3 mb-6\">\n          <p>{t('jobTicket.editingDraft')}</p>\n          <p className=\"text-sm mt-1\">{t('jobTicket.draftId')}: {selectedDraftTicket.id.substring(0, 8)}</p>\n        </Card>\n      )}\n      \n      <React.Suspense fallback={<div className=\"flex justify-center py-8\"><LoadingSpinner size=\"lg\" /></div>}>\n        <FormComponent draftData={draftData} />\n      </React.Suspense>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(JobTicketFormSelector);\n","import React, { useCallback, useMemo } from 'react';\nimport { ArrowLeftIcon } from '@heroicons/react/24/solid';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { PumpTechTicketForm, DriverTicketForm } from './forms';\nimport { Button } from '../ui';\n\n/**\n * Draft Ticket View component\n * Displays a read-only view of a selected draft job ticket\n * Optimized with memoization and performance enhancements\n */\nconst DraftTicketView = () => {\n  const { t } = useLanguage();\n  const { selectedDraftTicket, setViewMode, setSelectedDraftTicket } = useTicket();\n  const { user } = useAuth();\n  \n  // Handle back button click - memoized to prevent recreation on each render\n  const handleBackClick = useCallback(() => {\n    setViewMode('draftList');\n    setSelectedDraftTicket(null);\n  }, [setViewMode, setSelectedDraftTicket]);\n  \n  // Get the appropriate form component based on job type - memoized to prevent recalculation\n  const FormComponent = useMemo(() => {\n    if (!user || !user.job_type) return PumpTechTicketForm;\n    \n    // Normalize job type string\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map job types to form components\n    const jobTypeForms = {\n      'pump_tech': PumpTechTicketForm,\n      'pump_technician': PumpTechTicketForm,\n      'pumptechnician': PumpTechTicketForm,\n      'pump_service_technician': PumpTechTicketForm,\n      'driver': DriverTicketForm,\n    };\n    \n    return jobTypeForms[normalizedJobType] || PumpTechTicketForm;\n  }, [user]);\n  \n  // Memoize the ticket data to prevent unnecessary re-renders\n  const ticketData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // If no ticket is selected, show a message\n  if (!ticketData.id) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64\">\n        <p className=\"text-gray-400 mb-4\">{t('jobTicket.noTicketSelected')}</p>\n        <Button \n          variant=\"primary\" \n          onClick={handleBackClick}\n        >\n          {t('jobTicket.returnToDrafts')}\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"relative\">\n      <button \n        onClick={handleBackClick}\n        className=\"absolute top-0 left-0 text-white flex items-center space-x-1 hover:text-gray-300 transition-colors\"\n        aria-label={t('common.goBack')}\n      >\n        <ArrowLeftIcon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{t('common.goBack')}</span>\n      </button>\n      \n      <div className=\"pt-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <p className=\"text-sm text-orange-500 italic\">{t('jobTicket.readOnlyMode')}</p>\n          <p className=\"text-sm text-gray-400\">\n            {t('jobTicket.draftId')}: {ticketData.id.substring(0, 8)}\n          </p>\n        </div>\n        \n        <FormComponent \n          readOnly={true}\n          draftData={ticketData}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketView);\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Bars3Icon } from '@heroicons/react/24/outline';\nimport { TicketProvider, useTicket } from '../context/TicketContext';\nimport { VoiceProvider } from '../context/VoiceContext';\nimport Sidebar from './layout/Sidebar';\nimport LanguageToggle from './LanguageToggle';\nimport LandingPage from './LandingPage';\nimport VoiceRecorder from './VoiceRecorder';\nimport { JobTicketFormSelector, DraftTicketList, SubmittedTicketList, DraftTicketView } from './tickets';\n\n/**\n * AppDashboard component\n * Contains the main application with sidebar and content\n */\nconst AppDashboard = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const toggleButtonRef = useRef();\n  const sidebarRef = useRef();\n  \n  // Handle clicks outside the sidebar to close it on mobile\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      // Only run this on mobile (when sidebar can be toggled)\n      if (window.innerWidth >= 768) return; // md breakpoint\n      \n      // If sidebar is open and click is outside sidebar and not on the toggle button\n      if (\n        sidebarOpen && \n        sidebarRef.current && \n        !sidebarRef.current.contains(event.target) &&\n        toggleButtonRef.current && \n        !toggleButtonRef.current.contains(event.target)\n      ) {\n        setSidebarOpen(false);\n      }\n    };\n    \n    // Add event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    \n    // Cleanup\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [sidebarOpen]);\n  \n  return (\n    <TicketProvider>\n      <VoiceProvider>\n        <div className=\"bg-slate-900 min-h-screen\">\n          {/* Header area for language toggle */}\n          <div className=\"h-14 relative\">\n            <LanguageToggle />\n          </div>\n          \n          <div className=\"flex\">\n            {/* Mobile sidebar toggle */}\n            <button\n              ref={toggleButtonRef}\n              className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n            >\n              <Bars3Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n            </button>\n            \n            {/* Sidebar */}\n            <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} ref={sidebarRef} />\n            \n            {/* Main content */}\n            <main className=\"flex-1 bg-slate-900 p-6 overflow-y-auto text-white\">\n              <div className=\"mt-2 md:mt-0 pl-14 md:pl-0 md:ml-64\">\n                <div className=\"max-w-4xl mx-auto\">\n                  <Routes>\n                    <Route path=\"/\" element={<AppContent />} />\n                  </Routes>\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </VoiceProvider>\n    </TicketProvider>\n  );\n};\n\n/**\n * App Content component\n * Renders the appropriate content based on the current view mode and ticket mode\n */\nconst AppContent = () => {\n  // Use the useTicket hook with proper import\n  const { viewMode, ticketMode } = useTicket();\n  \n  // Render content based on view mode and ticket mode\n  return (\n    <>\n      {/* Draft Job Tickets List View */}\n      {viewMode === 'draftList' && <DraftTicketList />}\n      \n      {/* Submitted Job Tickets List View */}\n      {viewMode === 'submittedList' && <SubmittedTicketList />}\n      \n      {/* Landing Page */}\n      {viewMode === 'landing' && ticketMode === null && <LandingPage />}\n      \n      {/* Voice Job Ticket Flow */}\n      {viewMode === 'form' && ticketMode === 'voice' && <VoiceRecorder />}\n      \n      {/* Job Ticket Form - uses dynamic form selector based on job type */}\n      {viewMode === 'form' && ticketMode === 'manual' && <JobTicketFormSelector />}\n      \n      {/* Draft Ticket View */}\n      {viewMode === 'draft' && <DraftTicketView />}\n    </>\n  );\n};\n\nexport default AppDashboard;\n","import * as React from \"react\";\nfunction QuestionMarkCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(QuestionMarkCircleIcon);\nexport default ForwardRef;"],"names":["DraftTicketList","t","useLanguage","draftTickets","setSelectedDraftTicket","setViewMode","deleteDraftTicket","setTicketMode","useTicket","showConfirmModal","setShowConfirmModal","useState","selectedTicket","setSelectedTicket","formatDate","useCallback","dateString","e","handleViewTicket","text","maxLength","arguments","length","undefined","concat","substring","ticket","handleEditTicket","confirmEditDraft","id","cancelEditDraft","handleDeleteTicket","ticketId","_jsxs","className","children","_jsx","Card","colSpan","VirtualList","items","height","itemHeight","renderItem","TicketRow","overscan","emptyComponent","LoadingSpinner","size","Modal","isOpen","onClose","title","footer","_Fragment","Button","variant","onClick","React","_ref","companyName","jobDate","location","workTotalHours","workDescription","svgRef","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","SubmittedTicketList","user","useAuth","data","ticketsResponse","isLoading","loading","error","apiError","refetch","useApiCache","cacheTime","onError","err","console","tickets","Date","toLocaleDateString","log","memoizedTickets","useMemo","ExclamationCircleIcon","totalHours","parseFloat","work_total_hours","travel_total_hours","job_date","company_name","description","LandingPage","language","startVoiceRecording","useVoice","navigate","useNavigate","DocumentTextIcon","handleManualClick","PencilSquareIcon","handleVoiceClick","MicrophoneIcon","handleHelpClick","QuestionMarkCircleIcon","memo","JobTicketFormSelector","selectedDraftTicket","ticketMode","jobTypeForms","PumpTechTicketForm","DriverTicketForm","JobTicketForm","jobTypeKey","job_type","normalizedJobType","toLowerCase","replace","FormComponent","draftData","renderStart","performance","now","renderTime","toFixed","clearMarks","fallback","DraftTicketView","handleBackClick","ticketData","ArrowLeftIcon","readOnly","AppContent","viewMode","VoiceRecorder","AppDashboard","sidebarOpen","setSidebarOpen","toggleButtonRef","useRef","sidebarRef","useEffect","handleClickOutside","event","window","innerWidth","current","contains","target","document","addEventListener","removeEventListener","TicketProvider","VoiceProvider","LanguageToggle","Bars3Icon","Sidebar","Routes","Route","path","element"],"sourceRoot":""}