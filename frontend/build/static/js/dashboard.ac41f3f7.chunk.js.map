{"version":3,"file":"static/js/dashboard.ac41f3f7.chunk.js","mappings":"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","sources":["components/tickets/JobTicketFormSelector.js","components/LanguageToggle.js","components/tickets/DraftTicketList.js","components/LandingPage.js","components/JobTicketFormPage.js","../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js","components/tickets/SubmittedTicketList.js","components/profile/ProfilePage.js","components/tickets/DraftTicketView.js","components/AppDashboard.js","../node_modules/@heroicons/react/24/outline/esm/Bars3Icon.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, LoadingSpinner } from '../ui';\n\n// Import job type specific forms\nimport { GenericJobTicketForm, PumpTechTicketForm, DriverTicketForm } from './forms';\n\n/**\n * Job Ticket Form Selector Component\n * Dynamically loads the appropriate job ticket form based on user's job type\n */\nconst JobTicketFormSelector = () => {\n  const { user } = useAuth();\n  const { t } = useLanguage();\n  const { selectedDraftTicket, ticketMode } = useTicket();\n  \n  // Map of job types to their respective form components - defined outside render to avoid recreation\n  const jobTypeForms = useMemo(() => ({\n    'pump_tech': PumpTechTicketForm,\n    'driver': DriverTicketForm,\n    'manual': GenericJobTicketForm,\n    // Add more job types here as they are implemented\n  }), []);\n  \n  // Memoize the job type key to prevent recalculation on every render\n  const jobTypeKey = useMemo(() => {\n    // If manual mode is explicitly set, use the manual form\n    if (ticketMode === 'manual') return 'manual';\n    \n    if (!user || !user.job_type) return 'pump_tech';\n    \n    // Normalize job type string (remove spaces, hyphens, underscores, lowercase)\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map common variations to standard keys\n    const jobTypeMap = {\n      'pump_technician': 'pump_tech',\n      'pumptechnician': 'pump_tech',\n      'pumptech': 'pump_tech',\n      'pump_service_technician': 'pump_tech',\n      'pump_service_tech': 'pump_tech',\n    };\n    \n    return jobTypeMap[normalizedJobType] || normalizedJobType;\n  }, [user, ticketMode]);\n  \n  // Memoize the form component to prevent unnecessary re-renders\n  const FormComponent = useMemo(() => {\n    return jobTypeForms[jobTypeKey] || PumpTechTicketForm;\n  }, [jobTypeForms, jobTypeKey]);\n  \n  // Memoize the draft data to prevent unnecessary re-renders\n  const draftData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // Performance monitoring for form rendering\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  // Log form rendering performance\n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`JobTicketForm (${jobTypeKey}) rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      // Cleanup performance marks\n      performance.clearMarks(`form-render-${jobTypeKey}`);\n    };\n  }, [renderStart, jobTypeKey]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.createNew')}\n      </h1>\n      \n      {selectedDraftTicket && (\n        <Card className=\"bg-blue-500 bg-opacity-20 border border-blue-500 text-blue-500 px-4 py-3 mb-6\">\n          <p>{t('jobTicket.editingDraft')}</p>\n          <p className=\"text-sm mt-1\">{t('jobTicket.draftId')}: {selectedDraftTicket.id.substring(0, 8)}</p>\n        </Card>\n      )}\n      \n      <React.Suspense fallback={<div className=\"flex justify-center py-8\"><LoadingSpinner size=\"lg\" /></div>}>\n        <FormComponent draftData={draftData} />\n      </React.Suspense>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(JobTicketFormSelector);\n","import React, { memo } from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\n\r\n/**\r\n * Language Toggle component\r\n * Provides a button to switch between English and Spanish\r\n */\r\nconst LanguageToggle = () => {\r\n  const { language, toggleLanguage } = useLanguage();\r\n  \r\n  // Determine which language to show in the toggle button (opposite of current)\r\n  const targetLanguage = language === 'en' ? 'Español' : 'English';\r\n  const instructionText = language === 'es' ? 'click for' : 'haga clic para';\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleLanguage}\r\n      className=\"absolute top-0 right-0 m-4 px-3 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center focus:outline-none focus:ring-2 focus:ring-orange-700\"\r\n      aria-label={`${instructionText} ${targetLanguage}`}\r\n      title={`${instructionText} ${targetLanguage}`}\r\n      tabIndex={0}\r\n    >\r\n      <span className=\"text-xs italic text-white mr-1\">{instructionText}</span>\r\n      <span>{targetLanguage}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(LanguageToggle);\r\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { Card, Button, Modal, VirtualList, LoadingSpinner } from '../ui';\nimport { useMemoizedCallback } from '../../hooks';\n\n/**\n * Draft Ticket List component\n * Displays a table of all draft job tickets with edit functionality\n */\nconst DraftTicketList = () => {\n  const { t } = useLanguage();\n  const { draftTickets, setSelectedDraftTicket, setViewMode, deleteDraftTicket, setTicketMode } = useTicket();\n  \n  // State for confirmation modal\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  \n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return dateString;\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n  \n  // Handle view ticket - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticket) => {\n    setSelectedDraftTicket(ticket);\n    setViewMode('draft');\n  }, [setSelectedDraftTicket, setViewMode]);\n  \n  // Handle edit ticket - memoized to prevent recreation on each render\n  const handleEditTicket = useCallback((ticket) => {\n    setSelectedTicket(ticket);\n    setShowConfirmModal(true);\n  }, [setSelectedTicket]);\n  \n  // Confirm edit and load draft into form - memoized to prevent recreation on each render\n  const confirmEditDraft = useCallback(() => {\n    if (selectedTicket) {\n      // Set the selected draft ticket\n      setSelectedDraftTicket(selectedTicket);\n      \n      // Set ticket mode to manual to ensure form loads properly\n      setTicketMode('manual');\n      \n      // Change view mode to form to load the appropriate form component\n      setViewMode('form');\n      \n      // Remove the draft from the list\n      deleteDraftTicket(selectedTicket.id);\n    }\n    setShowConfirmModal(false);\n  }, [selectedTicket, setSelectedDraftTicket, setTicketMode, setViewMode, deleteDraftTicket]);\n  \n  // Cancel edit - memoized to prevent recreation on each render\n  const cancelEditDraft = useCallback(() => {\n    setSelectedTicket(null);\n    setShowConfirmModal(false);\n  }, []);\n  \n  // Handle delete ticket - memoized to prevent recreation on each render\n  const handleDeleteTicket = useCallback((ticketId) => {\n    deleteDraftTicket(ticketId);\n  }, [deleteDraftTicket]);\n  \n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.drafts')}\n      </h1>\n      \n      <Card className=\"overflow-hidden\">\n        {/* Table Header - Fixed to improve scrolling performance */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-center text-xs font-medium text-gray-400 uppercase tracking-wider w-24\">\n                  {t('common.edit')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                  {t('jobTicket.date')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.company')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                  {t('jobTicket.location')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                  {t('jobTicket.hours')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('jobTicket.description')}\n                </th>\n                <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                  {t('common.actions')}\n                </th>\n              </tr>\n            </thead>\n            \n            {/* Table Body - Use VirtualList for large datasets */}\n            {draftTickets.length === 0 ? (\n              <tbody>\n                <tr>\n                  <td colSpan=\"7\" className=\"px-6 py-4\">\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400\">{t('jobTicket.noDrafts')}</p>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            ) : (\n              <tbody className=\"divide-y divide-gray-700\">\n                <VirtualList\n                  items={draftTickets}\n                  height={400}\n                  itemHeight={64}\n                  renderItem={(ticket) => (\n                    <TicketRow\n                      key={ticket.id}\n                      ticket={ticket}\n                      formatDate={formatDate}\n                      handleEditTicket={handleEditTicket}\n                      handleViewTicket={handleViewTicket}\n                      handleDeleteTicket={handleDeleteTicket}\n                      t={t}\n                    />\n                  )}\n                  overscan={5}\n                  emptyComponent={\n                    <tr>\n                      <td colSpan=\"7\" className=\"px-6 py-4\">\n                        <div className=\"text-center py-8\">\n                          <LoadingSpinner size=\"md\" />\n                        </div>\n                      </td>\n                    </tr>\n                  }\n                />\n              </tbody>\n            )}\n          </table>\n        </div>\n      </Card>\n      \n      {/* Confirmation Modal */}\n      <Modal\n        isOpen={showConfirmModal}\n        onClose={cancelEditDraft}\n        title={t('jobTicket.editConfirmation')}\n        size=\"md\"\n        footer={\n          <>\n            <Button variant=\"secondary\" onClick={cancelEditDraft}>\n              {t('common.no')}\n            </Button>\n            <Button variant=\"primary\" onClick={confirmEditDraft} className=\"ml-3\">\n              {t('common.yes')}\n            </Button>\n          </>\n        }\n      >\n        <p>{t('jobTicket.editConfirmationMessage')}</p>\n      </Modal>\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleEditTicket, handleViewTicket, handleDeleteTicket, t }) => {\n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-center\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleEditTicket(ticket)}\n          className=\"text-orange-500 hover:text-orange-400 font-medium\"\n          aria-label={`${t('common.edit')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.edit')}\n        </Button>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.jobDate)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.companyName || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {ticket.workTotalHours || '0'}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.workDescription || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <div className=\"flex flex-col sm:flex-row justify-end sm:space-x-3 space-y-2 sm:space-y-0\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleViewTicket(ticket)}\n            className=\"text-blue-500 hover:text-blue-400\"\n            aria-label={`${t('common.view')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.view')}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleDeleteTicket(ticket.id)}\n            className=\"text-red-500 hover:text-red-400\"\n            aria-label={`${t('common.delete')} ${ticket.companyName || t('jobTicket.untitledTicket')}`}\n          >\n            {t('common.delete')}\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketList);\n","import React, { memo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { MicrophoneIcon, PencilSquareIcon, QuestionMarkCircleIcon, DocumentTextIcon } from '@heroicons/react/24/outline';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport { useTicket } from '../context/TicketContext';\r\n\r\n/**\r\n * Landing Page component\r\n * Displays the initial screen with options to create job tickets\r\n * with a professional and visually appealing design\r\n */\r\nconst LandingPage = () => {\r\n  const { t, language } = useLanguage();\r\n  const { setTicketMode, setViewMode } = useTicket();\r\n  const navigate = useNavigate();\r\n  \r\n  // Handle manual job ticket creation\r\n  const handleManualClick = () => {\r\n    // Set ticket mode to manual before navigating\r\n    setTicketMode('manual');\r\n    // Navigate to the job ticket form page within the dashboard layout\r\n    navigate('/dashboard/job-ticket-form');\r\n  };\r\n  \r\n  // Handle voice job ticket creation\r\n  const handleVoiceClick = () => {\r\n    // Set ticket mode to voice before navigating\r\n    setTicketMode('voice');\r\n    // Navigate to the dedicated voice recorder page within the dashboard layout\r\n    navigate('/dashboard/voice-recorder');\r\n    // Voice recording will be started in the VoiceRecorderPage component\r\n  };\r\n  \r\n  // Handle help button click (placeholder for future functionality)\r\n  const handleHelpClick = () => {\r\n    console.log('Help button clicked');\r\n    // Future functionality will be added here\r\n  };\r\n  \r\n  return (\r\n    <div className=\"relative flex flex-col items-center justify-center min-h-[80vh] px-4 py-8 overflow-hidden\">\r\n      {/* Background decorative elements */}\r\n      <div className=\"absolute inset-0 z-0 overflow-hidden\">\r\n        {/* Top left decorative shape */}\r\n        <div className=\"absolute -top-20 -left-20 w-64 h-64 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Bottom right decorative shape */}\r\n        <div className=\"absolute -bottom-32 -right-32 w-96 h-96 rounded-full bg-orange-500 opacity-5\"></div>\r\n        \r\n        {/* Center decorative element */}\r\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\r\n          <DocumentTextIcon className=\"w-96 h-96 text-gray-700 opacity-[0.03]\"/>\r\n        </div>\r\n        \r\n        {/* Additional subtle shapes */}\r\n        <div className=\"absolute top-1/4 right-1/4 w-20 h-20 rounded-lg rotate-45 bg-gray-600 opacity-[0.03]\"></div>\r\n        <div className=\"absolute bottom-1/3 left-1/3 w-16 h-16 rounded-lg rotate-12 bg-gray-600 opacity-[0.03]\"></div>\r\n      </div>\r\n      \r\n      {/* Main content */}\r\n      <div className=\"relative z-10 w-full max-w-3xl mx-auto bg-gray-900 bg-opacity-60 backdrop-filter backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-800 p-8 sm:p-10\">\r\n        <div className=\"text-center mb-8\">\r\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-white mb-3\">{t('jobTicket.createNew')}</h2>\r\n          <p className=\"text-gray-300 text-sm sm:text-base max-w-md mx-auto\">\r\n            {language === 'en' ? \r\n              'Select how you would like to create your job ticket' : \r\n              'Seleccione cómo desea crear su boleta de trabajo'}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-stretch\">\r\n          {/* By Hand Button */}\r\n          <button\r\n            onClick={handleManualClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('jobTicket.byHand')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <PencilSquareIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('jobTicket.byHand')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Fill out form manually' : 'Llenar formulario manualmente'}\r\n            </span>\r\n          </button>\r\n          \r\n          {/* By Voice Button */}\r\n          <button\r\n            onClick={handleVoiceClick}\r\n            className=\"flex flex-col items-center justify-center p-6 sm:p-8 bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-700 hover:to-gray-800 text-white rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl border border-gray-700 hover:border-orange-500/30 w-full sm:w-1/2 group\"\r\n            aria-label={t('jobTicket.byVoice')}\r\n          >\r\n            <div className=\"bg-gradient-to-br from-orange-500 to-orange-600 p-4 rounded-full mb-4 group-hover:scale-110 transition-transform duration-300\">\r\n              <MicrophoneIcon className=\"h-8 w-8 text-white\" />\r\n            </div>\r\n            <span className=\"text-lg font-medium\">{t('jobTicket.byVoice')}</span>\r\n            <span className=\"text-sm text-gray-400 mt-2\">\r\n              {language === 'en' ? 'Create using voice commands' : 'Crear usando comandos de voz'}\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Need Help button */}\r\n      <div className=\"fixed bottom-4 right-4 z-20\">\r\n        <button\r\n          onClick={handleHelpClick}\r\n          className=\"flex items-center space-x-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-full transition-colors shadow-lg\"\r\n          aria-label={t('needHelp') || \"Need Help?\"}\r\n        >\r\n          <QuestionMarkCircleIcon className=\"h-5 w-5 text-white\" />\r\n          <span className=\"text-sm\">\r\n            {t('needHelp') || (language === 'en' ? 'Need Help?' : '¿Necesita Ayuda?')}\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(LandingPage);\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Bars3Icon } from '@heroicons/react/24/outline';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { useTicket } from '../context/TicketContext';\nimport { LoadingSpinner } from './ui';\nimport Sidebar from './layout/Sidebar';\nimport LanguageToggle from './LanguageToggle';\n\n// Import all form components from the forms directory\nimport {\n  GenericJobTicketForm,\n  PumpTechTicketForm,\n  DriverTicketForm,\n  RoustaboutTicketForm,\n  ElectricianTicketForm,\n  PipelineOperatorTicketForm,\n  TruckDriverTicketForm,\n  OtherTicketForm\n} from './tickets/forms';\n\n/**\n * JobTicketFormPage component\n * Dedicated page for manual job ticket creation\n */\nconst JobTicketFormPage = () => {\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  const { draftData } = useTicket();\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const toggleButtonRef = useRef();\n  const sidebarRef = useRef();\n  \n  // Get the user's job type\n  const jobType = user?.jobType || 'manual';\n  \n  // Map job types to their respective form components\n  const jobTypeForms = {\n    'pump_tech': PumpTechTicketForm,\n    'driver': DriverTicketForm,\n    'roustabout': RoustaboutTicketForm,\n    'electrician': ElectricianTicketForm,\n    'pipeline_operator': PipelineOperatorTicketForm,\n    'truck_driver': TruckDriverTicketForm,\n    'other': OtherTicketForm,\n    'manual': GenericJobTicketForm, // Fallback for manual selection or admin users\n  };\n  \n  // Select the appropriate form component based on job type\n  const FormComponent = jobTypeForms[jobType] || GenericJobTicketForm;\n  \n  // Simulate loading to ensure all components are ready\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 500);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  // Handle clicks outside the sidebar to close it on mobile\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      // Only run this on mobile (when sidebar can be toggled)\n      if (window.innerWidth >= 768) return; // md breakpoint\n      \n      // If sidebar is open and click is outside sidebar and not on the toggle button\n      if (\n        sidebarOpen && \n        sidebarRef.current && \n        !sidebarRef.current.contains(event.target) &&\n        toggleButtonRef.current && \n        !toggleButtonRef.current.contains(event.target)\n      ) {\n        setSidebarOpen(false);\n      }\n    };\n    \n    // Add event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    \n    // Cleanup\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [sidebarOpen]);\n  \n  // Handle back button click\n  const handleBackClick = () => {\n    navigate('/dashboard/landing');\n  };\n  \n  return (\n    <div className=\"bg-slate-900 min-h-screen\">\n      {/* Header area for language toggle */}\n      <div className=\"h-14 relative\">\n        <LanguageToggle />\n      </div>\n      \n      <div className=\"flex\">\n        {/* Mobile sidebar toggle */}\n        <button\n          ref={toggleButtonRef}\n          className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700\"\n          onClick={() => setSidebarOpen(!sidebarOpen)}\n        >\n          <Bars3Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n        </button>\n        \n        {/* Sidebar */}\n        <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} ref={sidebarRef} />\n        \n        {/* Main content */}\n        <main className=\"flex-1 bg-slate-900 p-6 overflow-y-auto text-white\">\n          <div className=\"mt-2 md:mt-0 pl-14 md:pl-0 md:ml-64\">\n            <div className=\"max-w-4xl mx-auto\">\n              {/* Header with back button */}\n              <div className=\"mb-6 flex items-center\">\n                <button \n                  onClick={handleBackClick}\n                  className=\"mr-4 p-2 rounded-full hover:bg-gray-700 transition-colors\"\n                  aria-label={t('common.back')}\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\n                  </svg>\n                </button>\n                <h1 className=\"text-2xl font-bold text-white\">{t('jobTicket.createNew')}</h1>\n              </div>\n              \n              {/* Form container */}\n              <div className=\"bg-gray-800 rounded-lg shadow-lg p-6\">\n                {isLoading ? (\n                  <div className=\"flex justify-center items-center py-12\">\n                    <LoadingSpinner size=\"lg\" />\n                  </div>\n                ) : (\n                  <FormComponent draftData={draftData} />\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default JobTicketFormPage;\n","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { useApiCache, useMemoizedCallback } from '../../hooks';\nimport { Card, Button, VirtualList, LoadingSpinner } from '../ui';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n/**\n * Submitted Ticket List Component\n * Displays a table of submitted job tickets with responsive design\n */\nconst SubmittedTicketList = () => {\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  \n  // Use the API cache hook for fetching submitted tickets\n  // This will cache the results for 5 minutes by default\n  const { \n    data: ticketsResponse, \n    isLoading: loading, \n    error: apiError,\n    refetch\n  } = useApiCache('/api/job-tickets/?status=submitted', {\n    cacheTime: 3 * 60 * 1000, // 3 minutes cache\n    onError: (err) => console.error('Error fetching submitted tickets:', err)\n  });\n  \n  // Extract tickets from the response\n  const tickets = ticketsResponse?.data || [];\n  \n  // Format error message\n  const error = apiError ? t('errors.fetchFailed') : null;\n\n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n\n  // View ticket details - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticketId) => {\n    // Implement view ticket functionality\n    console.log('View ticket:', ticketId);\n    // This would typically navigate to a ticket detail page\n  }, []);\n  \n  // Memoize tickets data to prevent unnecessary re-renders\n  const memoizedTickets = useMemo(() => tickets || [], [tickets]);\n\n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.submitted')}\n      </h1>\n\n      {loading ? (\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Card className=\"overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-700\">\n              <thead>\n                <tr>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                    {t('jobTicket.date')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.company')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.location')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                    {t('jobTicket.hours')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                    {t('jobTicket.description')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider w-20\">\n                    {t('common.actions')}\n                  </th>\n                </tr>\n              </thead>\n              {/* Error State */}\n              {error ? (\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n                        <ExclamationCircleIcon className=\"h-5 w-5\" />\n                        <span>{error}</span>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => refetch()} \n                          className=\"ml-3\"\n                        >\n                          {t('common.retry')}\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : memoizedTickets.length === 0 ? (\n                /* Empty State */\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-400\">{t('jobTicket.noSubmitted')}</p>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : (\n                /* Data State with Virtualized List */\n                <tbody className=\"divide-y divide-gray-700\">\n                  <VirtualList\n                    items={memoizedTickets}\n                    height={400}\n                    itemHeight={64}\n                    renderItem={(ticket) => (\n                      <TicketRow\n                        key={ticket.id}\n                        ticket={ticket}\n                        formatDate={formatDate}\n                        handleViewTicket={handleViewTicket}\n                        t={t}\n                      />\n                    )}\n                    overscan={5}\n                    emptyComponent={\n                      <tr>\n                        <td colSpan=\"6\" className=\"px-6 py-4\">\n                          <div className=\"text-center py-8\">\n                            <LoadingSpinner size=\"md\" />\n                          </div>\n                        </td>\n                      </tr>\n                    }\n                  />\n                </tbody>\n              )}\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleViewTicket, t }) => {\n  // Calculate total hours once\n  const totalHours = useMemo(() => {\n    return parseFloat(ticket.work_total_hours || 0) + parseFloat(ticket.travel_total_hours || 0);\n  }, [ticket.work_total_hours, ticket.travel_total_hours]);\n  \n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.job_date)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.company_name || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {totalHours}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.description || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleViewTicket(ticket.id)}\n          className=\"text-orange-500 hover:text-orange-400\"\n          aria-label={`${t('common.view')} ${ticket.company_name || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.view')}\n        </Button>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(SubmittedTicketList);\n","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { Card, Button, Input, LoadingSpinner } from '../ui';\n\n/**\n * ProfilePage Component\n * \n * Displays and allows editing of user profile information\n * - Personal details\n * - Job preferences\n * - Account settings\n */\nconst ProfilePage = () => {\n  const { user, updateUserProfile, isLoading } = useAuth();\n  const { t } = useLanguage();\n  \n  // Local state for form fields\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    job_type: '',\n    preferred_language: '',\n    phone: ''\n  });\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(null);\n  \n  // Populate form with user data when available\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        job_type: user.job_type || '',\n        preferred_language: user.preferred_language || '',\n        phone: user.phone || ''\n      });\n    }\n  }, [user]);\n  \n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSaving(true);\n    setSaveSuccess(false);\n    setSaveError(null);\n    \n    try {\n      await updateUserProfile(formData);\n      setIsEditing(false);\n      setSaveSuccess(true);\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => {\n        setSaveSuccess(false);\n      }, 3000);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      setSaveError(error.message || 'Failed to update profile');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">{t('profile.title') || 'Profile'}</h1>\n      \n      {saveSuccess && (\n        <Card className=\"bg-green-900 bg-opacity-20 border border-green-700 mb-6\">\n          <p className=\"text-green-400 p-3\">{t('profile.saveSuccess') || 'Profile updated successfully!'}</p>\n        </Card>\n      )}\n      \n      {saveError && (\n        <Card className=\"bg-red-900 bg-opacity-20 border border-red-700 mb-6\">\n          <p className=\"text-red-400 p-3\">{saveError}</p>\n        </Card>\n      )}\n      \n      <Card className=\"p-6\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"space-y-6\">\n            {/* Profile Image */}\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"relative\">\n                <div className=\"h-24 w-24 rounded-full bg-slate-700 flex items-center justify-center\">\n                  {user?.logo_url ? (\n                    <img \n                      src={user.logo_url} \n                      alt={user.name} \n                      className=\"h-24 w-24 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <span className=\"text-3xl text-gray-400\">{user?.name?.charAt(0) || '?'}</span>\n                  )}\n                </div>\n                {isEditing && (\n                  <button\n                    type=\"button\"\n                    className=\"absolute bottom-0 right-0 rounded-full bg-orange-600 p-1 text-white\"\n                    onClick={() => console.log('Change profile picture')}\n                  >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"w-4 h-4\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z\" />\n                    </svg>\n                  </button>\n                )}\n              </div>\n            </div>\n            \n            {/* Name */}\n            <Input\n              label={t('profile.name') || 'Name'}\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Email */}\n            <Input\n              label={t('profile.email') || 'Email'}\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Phone */}\n            <Input\n              label={t('profile.phone') || 'Phone'}\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              value={formData.phone}\n              onChange={handleChange}\n              disabled={!isEditing}\n            />\n            \n            {/* Job Type */}\n            <div>\n              <label htmlFor=\"job_type\" className=\"block text-sm font-medium text-gray-300\">\n                {t('profile.jobType') || 'Job Type'}\n              </label>\n              <select\n                id=\"job_type\"\n                name=\"job_type\"\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={formData.job_type}\n                onChange={handleChange}\n                disabled={!isEditing}\n              >\n                <option value=\"\">{t('common.select') || 'Select...'}</option>\n                <option value=\"pump_tech\">{t('jobTypes.pumpTech') || 'Pump Technician'}</option>\n                <option value=\"driver\">{t('jobTypes.driver') || 'Driver'}</option>\n                <option value=\"admin\">{t('jobTypes.admin') || 'Administrator'}</option>\n              </select>\n            </div>\n            \n            {/* Preferred Language */}\n            <div>\n              <label htmlFor=\"preferred_language\" className=\"block text-sm font-medium text-gray-300\">\n                {t('profile.preferredLanguage') || 'Preferred Language'}\n              </label>\n              <select\n                id=\"preferred_language\"\n                name=\"preferred_language\"\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={formData.preferred_language}\n                onChange={handleChange}\n                disabled={!isEditing}\n              >\n                <option value=\"en\">English</option>\n                <option value=\"es\">Español</option>\n              </select>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              {isEditing ? (\n                <>\n                  <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => setIsEditing(false)}\n                    disabled={isSaving}\n                  >\n                    {t('common.cancel') || 'Cancel'}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"primary\"\n                    disabled={isSaving}\n                  >\n                    {isSaving ? (\n                      <LoadingSpinner size=\"sm\" />\n                    ) : (\n                      t('common.save') || 'Save'\n                    )}\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  type=\"button\"\n                  variant=\"primary\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  {t('profile.edit') || 'Edit Profile'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n\nexport default ProfilePage;\n","import React, { useCallback, useMemo } from 'react';\nimport { ArrowLeftIcon } from '@heroicons/react/24/solid';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { PumpTechTicketForm, DriverTicketForm } from './forms';\nimport { Button } from '../ui';\n\n/**\n * Draft Ticket View component\n * Displays a read-only view of a selected draft job ticket\n * Optimized with memoization and performance enhancements\n */\nconst DraftTicketView = () => {\n  const { t } = useLanguage();\n  const { selectedDraftTicket, setViewMode, setSelectedDraftTicket } = useTicket();\n  const { user } = useAuth();\n  \n  // Handle back button click - memoized to prevent recreation on each render\n  const handleBackClick = useCallback(() => {\n    setViewMode('draftList');\n    setSelectedDraftTicket(null);\n  }, [setViewMode, setSelectedDraftTicket]);\n  \n  // Get the appropriate form component based on job type - memoized to prevent recalculation\n  const FormComponent = useMemo(() => {\n    if (!user || !user.job_type) return PumpTechTicketForm;\n    \n    // Normalize job type string\n    const normalizedJobType = user.job_type.toLowerCase().replace(/[\\s_-]/g, '_');\n    \n    // Map job types to form components\n    const jobTypeForms = {\n      'pump_tech': PumpTechTicketForm,\n      'pump_technician': PumpTechTicketForm,\n      'pumptechnician': PumpTechTicketForm,\n      'pump_service_technician': PumpTechTicketForm,\n      'driver': DriverTicketForm,\n    };\n    \n    return jobTypeForms[normalizedJobType] || PumpTechTicketForm;\n  }, [user]);\n  \n  // Memoize the ticket data to prevent unnecessary re-renders\n  const ticketData = useMemo(() => selectedDraftTicket || {}, [selectedDraftTicket]);\n  \n  // If no ticket is selected, show a message\n  if (!ticketData.id) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64\">\n        <p className=\"text-gray-400 mb-4\">{t('jobTicket.noTicketSelected')}</p>\n        <Button \n          variant=\"primary\" \n          onClick={handleBackClick}\n        >\n          {t('jobTicket.returnToDrafts')}\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"relative\">\n      <button \n        onClick={handleBackClick}\n        className=\"absolute top-0 left-0 text-white flex items-center space-x-1 hover:text-gray-300 transition-colors\"\n        aria-label={t('common.goBack')}\n      >\n        <ArrowLeftIcon className=\"h-4 w-4\" />\n        <span className=\"text-sm\">{t('common.goBack')}</span>\n      </button>\n      \n      <div className=\"pt-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <p className=\"text-sm text-orange-500 italic\">{t('jobTicket.readOnlyMode')}</p>\n          <p className=\"text-sm text-gray-400\">\n            {t('jobTicket.draftId')}: {ticketData.id.substring(0, 8)}\n          </p>\n        </div>\n        \n        <FormComponent \n          readOnly={true}\n          draftData={ticketData}\n        />\n      </div>\n    </div>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DraftTicketView);\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { Bars3Icon } from '@heroicons/react/24/outline';\nimport { TicketProvider, useTicket } from '../context/TicketContext';\nimport { VoiceProvider } from '../context/VoiceContext';\nimport Sidebar from './layout/Sidebar';\nimport LanguageToggle from './LanguageToggle';\nimport LandingPage from './LandingPage';\nimport VoiceRecorder from './VoiceRecorder';\nimport JobTicketFormPage from './JobTicketFormPage';\nimport VoiceRecorderPage from './VoiceRecorderPage';\nimport UserProfilePage from './profile/ProfilePage';\nimport { JobTicketFormSelector, DraftTicketList, SubmittedTicketList, DraftTicketView } from './tickets';\n\n/**\n * AppDashboard component\n * Contains the main application with sidebar and content\n */\nconst AppDashboard = () => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const toggleButtonRef = useRef();\n  const sidebarRef = useRef();\n  \n  // Handle clicks outside the sidebar to close it on mobile\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      // Only run this on mobile (when sidebar can be toggled)\n      if (window.innerWidth >= 768) return; // md breakpoint\n      \n      // If sidebar is open and click is outside sidebar and not on the toggle button\n      if (\n        sidebarOpen && \n        sidebarRef.current && \n        !sidebarRef.current.contains(event.target) &&\n        toggleButtonRef.current && \n        !toggleButtonRef.current.contains(event.target)\n      ) {\n        setSidebarOpen(false);\n      }\n    };\n    \n    // Add event listener\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    \n    // Cleanup\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, [sidebarOpen]);\n  \n  return (\n    <TicketProvider>\n      <VoiceProvider>\n        <div className=\"bg-slate-900 min-h-screen\">\n          {/* Header area for language toggle */}\n          <div className=\"h-14 relative\">\n            <LanguageToggle />\n          </div>\n          \n          <div className=\"flex\">\n            {/* Mobile sidebar toggle */}\n            <button\n              ref={toggleButtonRef}\n              className=\"md:hidden fixed top-4 left-4 z-50 p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n            >\n              <Bars3Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n            </button>\n            \n            {/* Sidebar */}\n            <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} ref={sidebarRef} />\n            \n            {/* Main content */}\n            <main className=\"flex-1 bg-slate-900 p-6 overflow-y-auto text-white\">\n              <div className=\"mt-2 md:mt-0 pl-14 md:pl-0 md:ml-64\">\n                <div className=\"max-w-4xl mx-auto\">\n                  <Routes>\n                    {/* Default dashboard content */}\n                    <Route path=\"/\" element={<AppContent />} />\n                    \n                    {/* Landing page with options to create by hand or voice */}\n                    <Route path=\"/landing\" element={<LandingPage />} />\n                    \n                    {/* Other routes that should be within the dashboard layout */}\n                    <Route path=\"/profile\" element={<UserProfilePage />} />\n                    <Route path=\"/job-ticket-form\" element={<JobTicketFormPage />} />\n                    <Route path=\"/job-ticket-selector\" element={<JobTicketFormSelector />} />\n                    <Route path=\"/voice-recorder\" element={<VoiceRecorderPage />} />\n                    <Route path=\"/submitted\" element={<SubmittedTicketList />} />\n                    <Route path=\"/drafts\" element={<DraftTicketList />} />\n                  </Routes>\n                </div>\n              </div>\n            </main>\n          </div>\n        </div>\n      </VoiceProvider>\n    </TicketProvider>\n  );\n};\n\n/**\n * App Content component\n * Renders the appropriate content based on the current view mode and ticket mode\n */\nconst AppContent = () => {\n  // Use the useTicket hook with proper import\n  const { viewMode, ticketMode } = useTicket();\n  \n  // Render content based on view mode and ticket mode\n  return (\n    <>\n      {/* Draft Job Tickets List View */}\n      {viewMode === 'draftList' && <DraftTicketList />}\n      \n      {/* Submitted Job Tickets List View */}\n      {viewMode === 'submittedList' && <SubmittedTicketList />}\n      \n      {/* Landing Page */}\n      {viewMode === 'landing' && ticketMode === null && <LandingPage />}\n      \n      {/* Voice Job Ticket Flow */}\n      {viewMode === 'form' && ticketMode === 'voice' && <VoiceRecorder />}\n      \n      {/* Job Ticket Form - uses dynamic form selector based on job type */}\n      {viewMode === 'form' && ticketMode === 'manual' && <JobTicketFormSelector />}\n      \n      {/* Draft Ticket View */}\n      {viewMode === 'draft' && <DraftTicketView />}\n    </>\n  );\n};\n\nexport default AppDashboard;\n","import * as React from \"react\";\nfunction Bars3Icon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(Bars3Icon);\nexport default ForwardRef;"],"names":["JobTicketFormSelector","user","useAuth","t","useLanguage","selectedDraftTicket","ticketMode","useTicket","jobTypeForms","useMemo","PumpTechTicketForm","DriverTicketForm","GenericJobTicketForm","jobTypeKey","job_type","normalizedJobType","toLowerCase","replace","FormComponent","draftData","renderStart","performance","now","React","renderTime","console","log","concat","toFixed","clearMarks","_jsxs","className","children","_jsx","Card","id","substring","fallback","LoadingSpinner","size","LanguageToggle","language","toggleLanguage","targetLanguage","instructionText","onClick","title","tabIndex","memo","DraftTicketList","draftTickets","setSelectedDraftTicket","setViewMode","deleteDraftTicket","setTicketMode","showConfirmModal","setShowConfirmModal","useState","selectedTicket","setSelectedTicket","formatDate","useCallback","dateString","e","handleViewTicket","text","maxLength","arguments","length","undefined","ticket","handleEditTicket","confirmEditDraft","cancelEditDraft","handleDeleteTicket","ticketId","colSpan","VirtualList","items","height","itemHeight","renderItem","TicketRow","overscan","emptyComponent","Modal","isOpen","onClose","footer","_Fragment","Button","variant","_ref","companyName","jobDate","location","workTotalHours","workDescription","LandingPage","navigate","useNavigate","DocumentTextIcon","handleManualClick","PencilSquareIcon","handleVoiceClick","MicrophoneIcon","handleHelpClick","QuestionMarkCircleIcon","JobTicketFormPage","isLoading","setIsLoading","sidebarOpen","setSidebarOpen","toggleButtonRef","useRef","sidebarRef","jobType","RoustaboutTicketForm","ElectricianTicketForm","PipelineOperatorTicketForm","TruckDriverTicketForm","OtherTicketForm","useEffect","timer","setTimeout","clearTimeout","handleClickOutside","event","window","innerWidth","current","contains","target","document","addEventListener","removeEventListener","ref","Bars3Icon","Sidebar","handleBackClick","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","svgRef","titleId","props","_objectWithoutProperties","_excluded","Object","assign","SubmittedTicketList","data","ticketsResponse","loading","error","apiError","refetch","useApiCache","cacheTime","onError","err","tickets","Date","toLocaleDateString","memoizedTickets","ExclamationCircleIcon","totalHours","parseFloat","work_total_hours","travel_total_hours","job_date","company_name","description","ProfilePage","_user$name","updateUserProfile","formData","setFormData","name","email","preferred_language","phone","isEditing","setIsEditing","isSaving","setIsSaving","saveSuccess","setSaveSuccess","saveError","setSaveError","handleChange","value","prev","_objectSpread","onSubmit","async","preventDefault","message","logo_url","src","alt","charAt","type","Input","label","onChange","disabled","htmlFor","DraftTicketView","ticketData","ArrowLeftIcon","readOnly","AppContent","viewMode","VoiceRecorder","AppDashboard","TicketProvider","VoiceProvider","Routes","Route","path","element","UserProfilePage","VoiceRecorderPage"],"sourceRoot":""}