{"version":3,"file":"static/js/345.279df58a.chunk.js","mappings":"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","sources":["components/LanguageToggle.js","../node_modules/@heroicons/react/24/outline/esm/DocumentTextIcon.js","context/TicketContext.js","../node_modules/@heroicons/react/24/outline/esm/UserIcon.js","../node_modules/@heroicons/react/24/outline/esm/PlusCircleIcon.js","../node_modules/@heroicons/react/24/outline/esm/DocumentCheckIcon.js","components/layout/Sidebar.js","utils/validators.js","components/tickets/forms/BaseJobTicketForm.js","components/tickets/forms/PumpTechTicketForm.js","components/tickets/forms/DriverTicketForm.js","components/tickets/forms/RoustaboutTicketForm.js","components/tickets/forms/ElectricianTicketForm.js","components/tickets/forms/PipelineOperatorTicketForm.js","components/tickets/forms/TruckDriverTicketForm.js","components/tickets/forms/OtherTicketForm.js","components/tickets/JobTicketForm.js","../node_modules/@heroicons/react/24/outline/esm/Bars3Icon.js"],"sourcesContent":["import React, { memo } from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\n\r\n/**\r\n * Language Toggle component\r\n * Provides a button to switch between English and Spanish\r\n */\r\nconst LanguageToggle = () => {\r\n  const { language, toggleLanguage } = useLanguage();\r\n  \r\n  // Determine which language to show in the toggle button (opposite of current)\r\n  const targetLanguage = language === 'en' ? 'Español' : 'English';\r\n  const instructionText = language === 'es' ? 'click for' : 'haga clic para';\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleLanguage}\r\n      className=\"absolute top-0 right-0 m-4 px-3 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center focus:outline-none focus:ring-2 focus:ring-orange-700\"\r\n      aria-label={`${instructionText} ${targetLanguage}`}\r\n      title={`${instructionText} ${targetLanguage}`}\r\n      tabIndex={0}\r\n    >\r\n      <span className=\"text-xs italic text-white mr-1\">{instructionText}</span>\r\n      <span>{targetLanguage}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(LanguageToggle);\r\n","import * as React from \"react\";\nfunction DocumentTextIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(DocumentTextIcon);\nexport default ForwardRef;","import React, { createContext, useContext, useMemo } from 'react';\nimport { useDraftTickets } from './DraftTicketContext';\nimport { useTicketForm } from './TicketFormContext';\nimport { useTicketSubmission } from './TicketSubmissionContext';\nimport { useTicketView } from './TicketViewContext';\n\n// This is a backward compatibility layer that combines the focused contexts\n// to provide the original TicketContext API for existing components\n\n// Create the context\nconst TicketContext = createContext();\n\n/**\n * Provider component for ticket context\n * This is a backward compatibility layer that uses the new focused contexts\n * but provides the original API for existing components\n * \n * @param {Object} props - Component props\n * @returns {React.Component} Provider component\n */\nexport const TicketProvider = ({ children }) => {\n  // We don't need to implement any state or logic here\n  // Instead, we'll pass through to the actual provider\n  return children;\n};\n\n/**\n * Custom hook to use the ticket context\n * This combines all the focused contexts to provide the original API\n * \n * @returns {Object} Ticket context value\n */\nexport const useTicket = () => {\n  const context = useContext(TicketContext);\n  \n  // Always call hooks at the top level, regardless of whether we use them\n  // Add fallbacks to prevent errors if any context is undefined\n  const draftTickets = useDraftTickets() || {};\n  const ticketForm = useTicketForm() || {};\n  const ticketSubmission = useTicketSubmission() || {};\n  const ticketView = useTicketView() || {};\n  \n  // Create a combined context value that matches the original API\n  const combinedContext = useMemo(() => ({\n    // Combined context properties here\n    // View state from TicketViewContext with fallbacks\n    viewMode: ticketView.viewMode || 'landing',\n    setViewMode: ticketView.navigateTo || (() => console.warn('navigateTo not available')),\n    ticketMode: ticketView.ticketMode || null, // Default to null to ensure LandingPage displays\n    setTicketMode: ticketView.setTicketMode || (() => console.warn('setTicketMode not available')),\n    \n    // Form state from TicketFormContext\n    formData: ticketForm.formData,\n    setFormData: ticketForm.setFormData,\n    updateFormData: ticketForm.updateFormField,\n    handleInputChange: ticketForm.handleInputChange,\n    resetForm: ticketForm.resetForm,\n    addPart: ticketForm.addPart,\n    removePart: ticketForm.removePart,\n    \n    // Draft state from DraftTicketContext\n    draftTickets: draftTickets.draftTickets,\n    setDraftTickets: () => console.warn('setDraftTickets is deprecated, use DraftTicketContext methods instead'),\n    selectedDraftTicket: draftTickets.selectedDraftTicket,\n    setSelectedDraftTicket: draftTickets.setSelectedDraftTicket,\n    saveJobTicketAsDraft: draftTickets.saveDraft,\n    deleteDraftTicket: draftTickets.deleteDraft,\n    loadDraftIntoForm: draftTickets.loadDraftIntoForm,\n    \n    // Submission state from TicketSubmissionContext\n    submitJobTicket: ticketSubmission.submitJobTicket,\n    isSubmitting: ticketSubmission.isSubmitting,\n    submitError: ticketSubmission.submitError,\n    submitSuccess: ticketSubmission.submitSuccess\n  }), [\n    ticketView,\n    ticketForm,\n    draftTickets,\n    ticketSubmission\n  ]);\n  \n  // Return the legacy context if available, otherwise use the combined context\n  return context || combinedContext;\n};\n\nexport default TicketContext;\n","import * as React from \"react\";\nfunction UserIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(UserIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PlusCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(PlusCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction DocumentCheckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 019 9v.375M10.125 2.25A3.375 3.375 0 0113.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 013.375 3.375M9 15l2.25 2.25L15 12\"\n  }));\n}\nconst ForwardRef = React.forwardRef(DocumentCheckIcon);\nexport default ForwardRef;","import React, { memo, forwardRef, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { Link, useLocation } from 'react-router-dom';\nimport { PlusCircleIcon, DocumentTextIcon, UserIcon, DocumentCheckIcon } from '@heroicons/react/24/outline';\nimport { Button, Image } from '../ui';\nimport { usePrefetchRoute } from '../../hooks';\n\n/**\n * Utility function to conditionally join class names\n * Memoized to prevent recreation on each render\n */\nconst classNames = (...classes) => {\n  return classes.filter(Boolean).join(' ');\n};\n\n// Define routes for prefetching\nconst routes = {\n  '/profile': React.lazy(() => import('../profile/ProfilePage')),\n  '/': React.lazy(() => import('../tickets/JobTicketForm')),\n  '/submitted': React.lazy(() => import('../tickets/SubmittedTicketList')),\n  '/drafts': React.lazy(() => import('../tickets/DraftTicketList'))\n};\n\n/**\n * Sidebar component for navigation\n * Provides access to job ticket creation, submitted tickets, and draft tickets\n */\nconst Sidebar = forwardRef(({ sidebarOpen, setSidebarOpen }, ref) => {\n  const { t } = useLanguage();\n  const { \n    viewMode, \n    setViewMode, \n    draftTickets, \n    selectedDraftTicket, \n    setSelectedDraftTicket,\n    setTicketMode \n  } = useTicket();\n  const { user, isAuthenticated, logout } = useAuth();\n  \n  // Use location for route prefetching\n  const location = useLocation();\n  \n  // Use prefetch hook to preload routes\n  usePrefetchRoute(routes);\n  \n  // Handle navigation item click - memoized to prevent recreation on each render\n  const handleCreateTicketClick = useCallback(() => {\n    // Set ticket mode to manual to ensure form loads properly\n    setTicketMode('manual');\n    // Change view mode to form to load the appropriate form component\n    setViewMode('form');\n  }, [setTicketMode, setViewMode]);\n  \n  const handleSubmittedTicketsClick = useCallback(() => {\n    setViewMode('submittedList');\n  }, [setViewMode]);\n  \n  const handleDraftTicketsClick = useCallback(() => {\n    setViewMode('draftList');\n  }, [setViewMode]);\n  \n  // Memoize the logout function to prevent recreation on each render\n  const handleLogout = useCallback(() => {\n    logout();\n  }, [logout]);\n\n  return (\n    <div\n      ref={ref}\n      className={classNames(\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full',\n        'fixed top-0 left-0 z-40 h-full w-64 bg-gray-900 transition-transform duration-300 ease-in-out md:translate-x-0'\n      )}\n    >\n      <div className=\"flex h-full flex-col gap-y-5 overflow-y-auto px-6 py-4\">\n        <div className=\"flex h-16 shrink-0 items-center\">\n          <h2 className=\"text-2xl font-bold text-white\">Job Ticket</h2>\n        </div>\n        \n        {/* Logo */}\n        <div className=\"flex flex-shrink-0 items-center px-4\">\n          <Image\n            className=\"h-8 w-auto\"\n            src=\"/logo.png\"\n            alt=\"JobTicketInvoice\"\n            lazy={false} // Don't lazy load the logo as it's above the fold\n          />\n        </div>\n        \n        {/* User profile section */}\n        {isAuthenticated && user && (\n          <div className=\"mt-5 flex flex-col items-center px-4 pb-5 border-b border-gray-800\">\n            <div className=\"relative\">\n              <div className=\"h-12 w-12 rounded-full bg-slate-700 flex items-center justify-center\">\n                {user.logo_url ? (\n                  <Image \n                    src={user.logo_url} \n                    alt=\"User\" \n                    className=\"h-10 w-10 rounded-full object-cover\"\n                    fallbackSrc=\"\"\n                    lazy={false} // Don't lazy load user avatar as it's important for UX\n                  />\n                ) : (\n                  <UserIcon className=\"h-6 w-6 text-gray-400\" aria-hidden=\"true\" />\n                )}\n              </div>\n            </div>\n            <div className=\"mt-3 text-center\">\n              <p className=\"text-sm font-medium text-gray-400\">{t('common.loggedInAs')}</p>\n              <p className=\"text-base font-semibold text-white truncate max-w-[200px]\">{user.name || user.email}</p>\n              <div className=\"mt-2 flex flex-col space-y-1\">\n                <Link to=\"/profile\" className=\"text-xs text-orange-500 hover:text-orange-400\">\n                  {t('nav.profile')}\n                </Link>\n                <button \n                  onClick={handleLogout}\n                  className=\"text-xs text-gray-400 hover:text-gray-300\"\n                >\n                  {t('nav.logout')}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Navigation */}\n        <nav className=\"flex flex-1 flex-col\">\n          <ul className=\"flex flex-1 flex-col gap-y-7\">\n            <li>\n              <ul className=\"-mx-2 space-y-1\">\n                {/* Create Job Ticket Button */}\n                <li className=\"mb-6\">\n                  <Link\n                    to=\"/\"\n                    onClick={handleCreateTicketClick}\n                    className=\"bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded flex items-center justify-center gap-x-2 w-full transition-colors\"\n                  >\n                    <PlusCircleIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    <span>{t('jobTicket.createNew')}</span>\n                  </Link>\n                </li>\n                \n                {/* Job Tickets Header */}\n                <li>\n                  <div className=\"text-sm font-semibold leading-6 text-white px-2 mb-3\">\n                    {t('nav.jobTickets')}\n                  </div>\n                </li>\n                \n                {/* Submitted Job Tickets section */}\n                <li>\n                  <button\n                    onClick={handleSubmittedTicketsClick}\n                    className={classNames(\n                      viewMode === 'submittedList'\n                        ? 'bg-gray-800 text-white'\n                        : 'text-gray-400 hover:text-white hover:bg-gray-800',\n                      'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold w-full text-left'\n                    )}\n                  >\n                    <DocumentCheckIcon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\n                    {t('nav.submitted')}\n                  </button>\n                </li>\n                \n                {/* Draft Job Tickets section */}\n                <li>\n                  <button\n                    onClick={handleDraftTicketsClick}\n                    className={classNames(\n                      viewMode === 'draftList'\n                        ? 'bg-gray-800 text-white'\n                        : 'text-gray-400 hover:text-white hover:bg-gray-800',\n                      'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold w-full text-left'\n                    )}\n                  >\n                    <DocumentTextIcon className=\"h-6 w-6 shrink-0\" aria-hidden=\"true\" />\n                    {t('nav.drafts')}\n                    {draftTickets.length > 0 && (\n                      <span className=\"ml-auto w-5 h-5 rounded-full bg-orange-500 flex items-center justify-center text-xs text-white\">\n                        {draftTickets.length}\n                      </span>\n                    )}\n                  </button>\n                </li>\n                \n                {/* Development Tools section - only visible in development mode */}\n                {process.env.NODE_ENV === 'development' && (\n                  <li className=\"mt-8\">\n                    <div className=\"text-xs font-semibold leading-6 text-gray-400 px-2 mb-2\">\n                      Development Tools\n                    </div>\n                    <ul className=\"-mx-2 space-y-1\">\n                      <li>\n                        <Link\n                          to=\"/auth-test\"\n                          className=\"text-gray-400 hover:text-white hover:bg-gray-800 group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold\"\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 shrink-0\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                          </svg>\n                          {t('nav.authTest')}\n                        </Link>\n                      </li>\n                    </ul>\n                  </li>\n                )}\n              </ul>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n});\n\nexport default memo(Sidebar);\n","/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { useTicket } from '../../../context/TicketContext';\nimport { useAuth } from '../../../context/AuthContext';\nimport { calculateHoursBetween } from '../../../utils/validators';\nimport { Card, Button, Input, Form, LoadingSpinner } from '../../ui';\nimport { useDebounce } from '../../../hooks';\n\n/**\n * BaseJobTicketForm - Core form component that centralizes common job ticket functionality\n * \n * This component provides the foundation for all job ticket forms with:\n * - Common fields (date, company, customer, location, work hours, drive hours, description)\n * - Form state management via React Hook Form\n * - Time calculation logic for work and drive hours\n * - Draft saving functionality\n * - Form submission handling\n * - Common UI elements and layout\n * - Performance optimizations (memoization, debouncing, etc.)\n * \n * Job-specific forms should extend this component by:\n * 1. Importing and using it as a base\n * 2. Adding job-specific fields\n * 3. Extending the form data with job-specific values\n * 4. Customizing validation rules if needed\n */\n\n/**\n * Base Job Ticket Form Component\n * Provides common functionality for all job ticket forms\n */\nconst BaseJobTicketForm = ({ \n  children, \n  onSubmit, \n  readOnly = false, \n  draftData = null \n}) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft, submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  const { user } = useAuth();\n  \n  // Setup React Hook Form with memoized default values\n  const defaultValues = useMemo(() => draftData || formData || {}, [draftData, formData]);\n  \n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Memoized calculation functions\n  const calculateWorkHours = useCallback(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      return calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n    }\n    return null;\n  }, [debouncedWorkStartTime, debouncedWorkEndTime]);\n  \n  const calculateDriveHours = useCallback(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      return calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n    }\n    return null;\n  }, [debouncedDriveStartTime, debouncedDriveEndTime]);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    const hours = calculateWorkHours();\n    if (hours !== null) {\n      setValue('workTotalHours', hours);\n    }\n  }, [calculateWorkHours, setValue]);\n  \n  useEffect(() => {\n    const hours = calculateDriveHours();\n    if (hours !== null) {\n      setValue('driveTotalHours', hours);\n    }\n  }, [calculateDriveHours, setValue]);\n  \n  // Auto-save form data when fields change - with debouncing\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        // Use a timeout to debounce updates to form data\n        const timeoutId = setTimeout(() => {\n          updateFormData(name, value[name]);\n        }, 500);\n        \n        return () => clearTimeout(timeoutId);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000);\n    }\n  }, [submitSuccess]);\n  \n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000);\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent recreation\n  const handleFormSubmit = useCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // If custom onSubmit is provided, use it\n      if (onSubmit) {\n        await onSubmit(savedDraft);\n        return;\n      }\n      \n      // Otherwise use default submit behavior\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n    }\n  }, [onSubmit, saveJobTicketAsDraft, submitJobTicket]);\n  \n  // Pre-fill submittedBy field with user's name if available\n  useEffect(() => {\n    if (user?.name && !watch('submittedBy')) {\n      setValue('submittedBy', user.name);\n    }\n  }, [user, setValue, watch]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`BaseJobTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('base-job-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <Form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-8 max-w-3xl mx-auto\">\n      {/* Job Date */}\n      <Input\n        label={t('jobTicket.date')}\n        type=\"date\"\n        id=\"jobDate\"\n        name=\"jobDate\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.jobDate}\n        readOnly={readOnly}\n      />\n      \n      {/* Company Name */}\n      <Input\n        label={t('jobTicket.companyName')}\n        type=\"text\"\n        id=\"companyName\"\n        name=\"companyName\"\n        register={register}\n        rules={{ required: true }}\n        error={errors.companyName}\n        readOnly={readOnly}\n      />\n      \n      {/* Customer Name */}\n      <Input\n        label={t('jobTicket.customerName')}\n        type=\"text\"\n        id=\"customerName\"\n        name=\"customerName\"\n        register={register}\n        error={errors.customerName}\n        readOnly={readOnly}\n      />\n      \n      {/* Location */}\n      <Input\n        label={t('jobTicket.location')}\n        type=\"text\"\n        id=\"location\"\n        name=\"location\"\n        register={register}\n        error={errors.location}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Type */}\n      <Input\n        label={t('jobTicket.workType')}\n        type=\"text\"\n        id=\"workType\"\n        name=\"workType\"\n        register={register}\n        error={errors.workType}\n        readOnly={readOnly}\n      />\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        error={errors.equipment}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.workStartTime')}\n          type=\"time\"\n          id=\"workStartTime\"\n          name=\"workStartTime\"\n          register={register}\n          error={errors.workStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workEndTime')}\n          type=\"time\"\n          id=\"workEndTime\"\n          name=\"workEndTime\"\n          register={register}\n          error={errors.workEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.workTotalTime')}\n          type=\"text\"\n          id=\"workTotalHours\"\n          name=\"workTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Drive Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.travelStartTime')}\n          type=\"time\"\n          id=\"driveStartTime\"\n          name=\"driveStartTime\"\n          register={register}\n          error={errors.driveStartTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.travelEndTime')}\n          type=\"time\"\n          id=\"driveEndTime\"\n          name=\"driveEndTime\"\n          register={register}\n          error={errors.driveEndTime}\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.travelTotalTime')}\n          type=\"text\"\n          id=\"driveTotalHours\"\n          name=\"driveTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Description of Work */}\n      <div>\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workDescription')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workDescription')}\n          />\n        </div>\n      </div>\n      \n      {/* Submitted By */}\n      <Input\n        label={t('jobTicket.submittedBy')}\n        type=\"text\"\n        id=\"submittedBy\"\n        name=\"submittedBy\"\n        register={register}\n        error={errors.submittedBy}\n        readOnly={readOnly}\n      />\n      \n      {/* Render children (job-specific fields) */}\n      {children}\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <Card className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </Card>\n      )}\n      \n      {showErrorMessage && (\n        <Card className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitError')}</span>\n        </Card>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              variant={isSubmitting ? \"disabled\" : \"primary\"}\n              size=\"lg\"\n            >\n              {isSubmitting ? (\n                <div className=\"flex items-center\">\n                  {t('jobTicket.submitting')}\n                  <LoadingSpinner size=\"sm\" className=\"ml-2\" />\n                </div>\n              ) : t('jobTicket.submitTicket')}\n            </Button>\n          </div>\n        </div>\n      )}\n    </Form>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(BaseJobTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PumpTechTicketForm - Job ticket form specialized for Pump Service Technicians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to pump technicians\n * - Equipment serviced field\n * - Parts used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized parts list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PumpTechTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Get parts list based on current language - memoized to prevent recreation on each render\n  const partsList = useMemo(() => [\n    { value: 'partLubricant', label: t('parts.lubricant') },\n    { value: 'partPumpSeal', label: t('parts.pumpSeal') },\n    { value: 'partThrustChamber', label: t('parts.thrustChamber') },\n    { value: 'partVFDBreaker', label: t('parts.vfdBreaker') },\n    { value: 'partServiceKit', label: t('parts.serviceKit') },\n    { value: 'partOther', label: t('parts.other') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent recreation on each render\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    // Find the selected part's label\n    const selectedPartObj = partsList.find(part => part.value === selectedPart);\n    if (!selectedPartObj) return;\n    \n    // Store both value and label as an object\n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, {\n      value: selectedPart,\n      label: selectedPartObj.label\n    }]);\n    setSelectedPart('');\n  }, [selectedPart, partsList, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent recreation on each render\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle part selection change - memoized to prevent recreation on each render\n  const handlePartChange = useCallback((e) => {\n    // Store both the value and label when selecting a part\n    const selectedValue = e.target.value;\n    const selectedOption = partsList.find(part => part.value === selectedValue);\n    setSelectedPart(selectedOption ? selectedValue : '');\n  }, [partsList]);\n  \n  // Memoize the parts list rendering for better performance\n  const partsListItems = useMemo(() => {\n    const parts = watch('parts') || [];\n    \n    if (parts.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noParts')}\n        </li>\n      );\n    }\n    \n    return parts.map((part, index) => {\n      // Get the label from the part object\n      // Handle both new format (object with value and label) and old format (string)\n      let partLabel;\n      if (typeof part === 'object' && part.label) {\n        partLabel = part.label;\n      } else if (typeof part === 'string') {\n        // Handle old format where part is just a string like 'partLubricant'\n        // Extract the part name by removing 'part' prefix and convert first letter to lowercase\n        const partName = part.replace(/^part/, '').charAt(0).toLowerCase() + part.replace(/^part/, '').slice(1);\n        partLabel = t(`parts.${partName}`);\n      } else {\n        // Fallback\n        partLabel = String(part);\n      }\n      \n      return (\n        <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n          <span>{partLabel}</span>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemovePart(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </li>\n      );\n    });\n  }, [watch, t, readOnly, handleRemovePart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pump-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment */}\n      <Input\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        placeholder={t('jobTicket.equipmentPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Parts Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.partsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedPart}\n                onChange={handlePartChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n            >\n              Add Part\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"parts\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {partsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PumpTechTicketForm);\n","import React, { useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Input } from '../../ui';\n\n/**\n * DriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Vehicle type selection\n * - Mileage tracking\n * - Trip type (local/long haul)\n * \n * Performance optimizations:\n * - Memoized vehicle types\n * - React.memo for preventing unnecessary re-renders\n */\nconst DriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { register, formState: { errors } } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // Memoize vehicle types to prevent recreation on each render\n  const vehicleTypes = useMemo(() => [\n    { value: '', label: t('common.select') },\n    { value: 'truck', label: t('vehicleTypes.truck') || 'Truck' },\n    { value: 'van', label: t('vehicleTypes.van') || 'Van' },\n    { value: 'car', label: t('vehicleTypes.car') || 'Car' }\n  ], [t]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`DriverTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('driver-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Driver-specific fields */}\n      <div>\n        <label htmlFor=\"vehicleType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.vehicleType') || 'Vehicle Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"vehicleType\"\n            name=\"vehicleType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('vehicleType', { required: true })}\n          >\n            {vehicleTypes.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          {errors.vehicleType && (\n            <p className=\"mt-1 text-sm text-red-500\">\n              {t('validation.required')}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      {/* Mileage */}\n      <Input\n        label={t('jobTicket.mileage') || 'Mileage'}\n        type=\"number\"\n        id=\"mileage\"\n        name=\"mileage\"\n        register={register}\n        rules={{ required: true, min: 0 }}\n        error={errors.mileage}\n        placeholder={t('jobTicket.mileagePlaceholder') || 'Enter total miles driven'}\n        readOnly={readOnly}\n      />\n      \n      {/* Trip Type */}\n      <div>\n        <label htmlFor=\"tripType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.tripType') || 'Trip Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"tripType\"\n            name=\"tripType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('tripType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"local\">{t('tripTypes.local') || 'Local'}</option>\n            <option value=\"longHaul\">{t('tripTypes.longHaul') || 'Long Haul'}</option>\n          </select>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * RoustaboutTicketForm - Job ticket form specialized for Roustabout workers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to roustabouts\n * - Equipment used field\n * - Materials used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized materials list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst RoustaboutTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected material in dropdown\n  const [selectedMaterial, setSelectedMaterial] = useState('');\n  \n  // Get materials list based on current language - memoized to prevent recreation on each render\n  const materialsList = useMemo(() => [\n    { value: t('materials.pipe'), label: t('materials.pipe') },\n    { value: t('materials.fittings'), label: t('materials.fittings') },\n    { value: t('materials.valves'), label: t('materials.valves') },\n    { value: t('materials.tools'), label: t('materials.tools') },\n    { value: t('materials.safety'), label: t('materials.safety') },\n    { value: t('materials.other'), label: t('materials.other') },\n  ], [t]);\n  \n  // Handle adding a material - memoized to prevent recreation on each render\n  const handleAddMaterial = useCallback(() => {\n    if (!selectedMaterial) return;\n    \n    const currentMaterials = watch('materials') || [];\n    setValue('materials', [...currentMaterials, selectedMaterial]);\n    setSelectedMaterial('');\n  }, [selectedMaterial, watch, setValue]);\n  \n  // Handle removing a material - memoized to prevent recreation on each render\n  const handleRemoveMaterial = useCallback((index) => {\n    const currentMaterials = watch('materials') || [];\n    const updatedMaterials = [...currentMaterials];\n    updatedMaterials.splice(index, 1);\n    setValue('materials', updatedMaterials);\n  }, [watch, setValue]);\n  \n  // Handle material selection change - memoized to prevent recreation on each render\n  const handleMaterialChange = useCallback((e) => {\n    setSelectedMaterial(e.target.value);\n  }, []);\n  \n  // Memoize the materials list rendering for better performance\n  const materialsListItems = useMemo(() => {\n    const materials = watch('materials') || [];\n    \n    if (materials.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noMaterials')}\n        </li>\n      );\n    }\n    \n    return materials.map((material, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{material}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveMaterial(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveMaterial]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Roustabout-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"construction\">{t('workTypes.construction')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"pipeline\">{t('workTypes.pipeline')}</option>\n            <option value=\"wellService\">{t('workTypes.wellService')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment Used */}\n      <Input\n        label={t('jobTicket.equipmentUsed')}\n        type=\"text\"\n        id=\"equipmentUsed\"\n        name=\"equipmentUsed\"\n        register={register}\n        placeholder={t('jobTicket.equipmentUsedPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Materials Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedMaterial}\n                onChange={handleMaterialChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {materialsList.map((material) => (\n                  <option key={material.value} value={material.value}>\n                    {material.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddMaterial}\n              disabled={!selectedMaterial}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"materials\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {materialsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Site Conditions */}\n      <div>\n        <label htmlFor=\"siteConditions\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.siteConditions')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"siteConditions\"\n            name=\"siteConditions\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.siteConditionsPlaceholder')}\n            {...register('siteConditions')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(RoustaboutTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * ElectricianTicketForm - Job ticket form specialized for Electricians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to electricians\n * - Voltage/amperage fields\n * - Components used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized components list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst ElectricianTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected component in dropdown\n  const [selectedComponent, setSelectedComponent] = useState('');\n  \n  // Get components list based on current language - memoized to prevent recreation on each render\n  const componentsList = useMemo(() => [\n    { value: t('components.wiring'), label: t('components.wiring') },\n    { value: t('components.breakers'), label: t('components.breakers') },\n    { value: t('components.switches'), label: t('components.switches') },\n    { value: t('components.panels'), label: t('components.panels') },\n    { value: t('components.motors'), label: t('components.motors') },\n    { value: t('components.other'), label: t('components.other') },\n  ], [t]);\n  \n  // Handle adding a component - memoized to prevent recreation on each render\n  const handleAddComponent = useCallback(() => {\n    if (!selectedComponent) return;\n    \n    const currentComponents = watch('components') || [];\n    setValue('components', [...currentComponents, selectedComponent]);\n    setSelectedComponent('');\n  }, [selectedComponent, watch, setValue]);\n  \n  // Handle removing a component - memoized to prevent recreation on each render\n  const handleRemoveComponent = useCallback((index) => {\n    const currentComponents = watch('components') || [];\n    const updatedComponents = [...currentComponents];\n    updatedComponents.splice(index, 1);\n    setValue('components', updatedComponents);\n  }, [watch, setValue]);\n  \n  // Handle component selection change - memoized to prevent recreation on each render\n  const handleComponentChange = useCallback((e) => {\n    setSelectedComponent(e.target.value);\n  }, []);\n  \n  // Memoize the components list rendering for better performance\n  const componentsListItems = useMemo(() => {\n    const components = watch('components') || [];\n    \n    if (components.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noComponents')}\n        </li>\n      );\n    }\n    \n    return components.map((component, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{component}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveComponent(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveComponent]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Electrician-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"troubleshooting\">{t('workTypes.troubleshooting')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Voltage/Amperage */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.voltage')}\n          type=\"text\"\n          id=\"voltage\"\n          name=\"voltage\"\n          register={register}\n          placeholder=\"e.g., 120V, 240V, 480V\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.amperage')}\n          type=\"text\"\n          id=\"amperage\"\n          name=\"amperage\"\n          register={register}\n          placeholder=\"e.g., 15A, 20A, 30A\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Components Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.componentsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedComponent}\n                onChange={handleComponentChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {componentsList.map((component) => (\n                  <option key={component.value} value={component.value}>\n                    {component.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddComponent}\n              disabled={!selectedComponent}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"components\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {componentsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Safety Measures */}\n      <div>\n        <label htmlFor=\"safetyMeasures\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.safetyMeasures')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"safetyMeasures\"\n            name=\"safetyMeasures\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.safetyMeasuresPlaceholder')}\n            {...register('safetyMeasures')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(ElectricianTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PipelineOperatorTicketForm - Job ticket form specialized for Pipeline Operators\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Pipeline-specific work types\n * - Pressure and flow readings\n * - Inspection points with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized inspection points list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PipelineOperatorTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for inspection point in form\n  const [inspectionPoint, setInspectionPoint] = useState('');\n  const [inspectionStatus, setInspectionStatus] = useState('pass');\n  const [inspectionNotes, setInspectionNotes] = useState('');\n  \n  // Handle adding an inspection point - memoized to prevent recreation on each render\n  const handleAddInspectionPoint = useCallback(() => {\n    if (!inspectionPoint) return;\n    \n    const currentInspections = watch('inspections') || [];\n    setValue('inspections', [\n      ...currentInspections, \n      { \n        point: inspectionPoint, \n        status: inspectionStatus,\n        notes: inspectionNotes\n      }\n    ]);\n    \n    // Reset form fields\n    setInspectionPoint('');\n    setInspectionStatus('pass');\n    setInspectionNotes('');\n  }, [inspectionPoint, inspectionStatus, inspectionNotes, watch, setValue]);\n  \n  // Handle removing an inspection point - memoized to prevent recreation on each render\n  const handleRemoveInspectionPoint = useCallback((index) => {\n    const currentInspections = watch('inspections') || [];\n    const updatedInspections = [...currentInspections];\n    updatedInspections.splice(index, 1);\n    setValue('inspections', updatedInspections);\n  }, [watch, setValue]);\n  \n  // Memoize the inspections list rendering for better performance\n  const inspectionListItems = useMemo(() => {\n    const inspections = watch('inspections') || [];\n    \n    if (inspections.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noInspections')}\n        </li>\n      );\n    }\n    \n    return inspections.map((inspection, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"font-medium\">{inspection.point}</span>\n            <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${\n              inspection.status === 'pass' \n                ? 'bg-green-200 text-green-800' \n                : 'bg-red-200 text-red-800'\n            }`}>\n              {inspection.status === 'pass' ? t('jobTicket.pass') : t('jobTicket.fail')}\n            </span>\n          </div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveInspectionPoint(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        {inspection.notes && (\n          <div className=\"mt-1 text-sm text-gray-300\">\n            {inspection.notes}\n          </div>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveInspectionPoint]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pipeline-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"monitoring\">{t('workTypes.monitoring')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"emergency\">{t('workTypes.emergency')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Pressure and Flow Readings */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.pressureReading')}\n          type=\"text\"\n          id=\"pressureReading\"\n          name=\"pressureReading\"\n          register={register}\n          placeholder=\"e.g., 65 PSI\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.flowReading')}\n          type=\"text\"\n          id=\"flowReading\"\n          name=\"flowReading\"\n          register={register}\n          placeholder=\"e.g., 250 GPM\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Pipeline Section */}\n      <Input\n        label={t('jobTicket.pipelineSection')}\n        type=\"text\"\n        id=\"pipelineSection\"\n        name=\"pipelineSection\"\n        register={register}\n        placeholder={t('jobTicket.pipelineSectionPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Inspection Points */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.inspectionPoints')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div>\n              <label htmlFor=\"inspectionPoint\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.inspectionPoint')}\n              </label>\n              <input\n                type=\"text\"\n                id=\"inspectionPoint\"\n                value={inspectionPoint}\n                onChange={(e) => setInspectionPoint(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.inspectionPointPlaceholder')}\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionStatus\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.status')}\n              </label>\n              <select\n                id=\"inspectionStatus\"\n                value={inspectionStatus}\n                onChange={(e) => setInspectionStatus(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"pass\">{t('jobTicket.pass')}</option>\n                <option value=\"fail\">{t('jobTicket.fail')}</option>\n              </select>\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionNotes\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.notes')}\n              </label>\n              <textarea\n                id=\"inspectionNotes\"\n                value={inspectionNotes}\n                onChange={(e) => setInspectionNotes(e.target.value)}\n                rows={2}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.notesPlaceholder')}\n              />\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddInspectionPoint}\n                disabled={!inspectionPoint}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"inspections\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {inspectionListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PipelineOperatorTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * TruckDriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Truck-specific work types\n * - Mileage tracking\n * - Load details with add/remove functionality\n * - Vehicle inspection checklist\n * \n * Performance optimizations:\n * - Memoized loads list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst TruckDriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for load details in form\n  const [loadDescription, setLoadDescription] = useState('');\n  const [loadWeight, setLoadWeight] = useState('');\n  const [loadDestination, setLoadDestination] = useState('');\n  \n  // Handle adding a load - memoized to prevent recreation on each render\n  const handleAddLoad = useCallback(() => {\n    if (!loadDescription || !loadDestination) return;\n    \n    const currentLoads = watch('loads') || [];\n    setValue('loads', [\n      ...currentLoads, \n      { \n        description: loadDescription, \n        weight: loadWeight,\n        destination: loadDestination\n      }\n    ]);\n    \n    // Reset form fields\n    setLoadDescription('');\n    setLoadWeight('');\n    setLoadDestination('');\n  }, [loadDescription, loadWeight, loadDestination, watch, setValue]);\n  \n  // Handle removing a load - memoized to prevent recreation on each render\n  const handleRemoveLoad = useCallback((index) => {\n    const currentLoads = watch('loads') || [];\n    const updatedLoads = [...currentLoads];\n    updatedLoads.splice(index, 1);\n    setValue('loads', updatedLoads);\n  }, [watch, setValue]);\n  \n  // Memoize the loads list rendering for better performance\n  const loadsListItems = useMemo(() => {\n    const loads = watch('loads') || [];\n    \n    if (loads.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noLoads')}\n        </li>\n      );\n    }\n    \n    return loads.map((load, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"font-medium\">{load.description}</div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveLoad(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        <div className=\"mt-1 grid grid-cols-2 gap-2 text-sm text-gray-300\">\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.weight')}: </span>\n            {load.weight || 'N/A'}\n          </div>\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.destination')}: </span>\n            {load.destination}\n          </div>\n        </div>\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveLoad]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Truck Driver-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"delivery\">{t('workTypes.delivery')}</option>\n            <option value=\"pickup\">{t('workTypes.pickup')}</option>\n            <option value=\"transport\">{t('workTypes.transport')}</option>\n            <option value=\"equipment\">{t('workTypes.equipment')}</option>\n            <option value=\"supplies\">{t('workTypes.supplies')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Vehicle Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.vehicleId')}\n          type=\"text\"\n          id=\"vehicleId\"\n          name=\"vehicleId\"\n          register={register}\n          placeholder=\"e.g., TRK-2023-104\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.vehicleType')}\n          type=\"text\"\n          id=\"vehicleType\"\n          name=\"vehicleType\"\n          register={register}\n          placeholder=\"e.g., Semi-truck, Pickup, Tanker\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Mileage Tracking */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.startingMileage')}\n          type=\"number\"\n          id=\"startingMileage\"\n          name=\"startingMileage\"\n          register={register}\n          placeholder=\"e.g., 45780\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.endingMileage')}\n          type=\"number\"\n          id=\"endingMileage\"\n          name=\"endingMileage\"\n          register={register}\n          placeholder=\"e.g., 45920\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.totalMileage')}\n          type=\"number\"\n          id=\"totalMileage\"\n          name=\"totalMileage\"\n          register={register}\n          readOnly={true}\n          value={\n            watch('endingMileage') && watch('startingMileage')\n              ? Math.max(0, Number(watch('endingMileage')) - Number(watch('startingMileage')))\n              : ''\n          }\n        />\n      </div>\n      \n      {/* Load Details */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.loadDetails')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              <div>\n                <label htmlFor=\"loadDescription\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.loadDescription')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDescription\"\n                  value={loadDescription}\n                  onChange={(e) => setLoadDescription(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.loadDescriptionPlaceholder')}\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadWeight\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.weight')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadWeight\"\n                  value={loadWeight}\n                  onChange={(e) => setLoadWeight(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder=\"e.g., 2500 lbs\"\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadDestination\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.destination')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDestination\"\n                  value={loadDestination}\n                  onChange={(e) => setLoadDestination(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.destinationPlaceholder')}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddLoad}\n                disabled={!loadDescription || !loadDestination}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"loads\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {loadsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Vehicle Inspection */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.vehicleInspection')}\n        </label>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionFuel\"\n              name=\"inspectionFuel\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionFuel')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionFuel\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.fuelChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionTires\"\n              name=\"inspectionTires\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionTires')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionTires\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.tiresChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionOil\"\n              name=\"inspectionOil\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionOil')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionOil\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.oilChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionLights\"\n              name=\"inspectionLights\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionLights')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionLights\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.lightsChecked')}\n            </label>\n          </div>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(TruckDriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * OtherTicketForm - Generic job ticket form for \"Other\" job types\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Customizable job type field\n * - Materials/equipment used with add/remove functionality\n * - Additional notes section\n * \n * Performance optimizations:\n * - Memoized items list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst OtherTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected item in dropdown\n  const [itemName, setItemName] = useState('');\n  const [itemQuantity, setItemQuantity] = useState('');\n  \n  // Handle adding an item - memoized to prevent recreation on each render\n  const handleAddItem = useCallback(() => {\n    if (!itemName) return;\n    \n    const currentItems = watch('items') || [];\n    setValue('items', [\n      ...currentItems, \n      { \n        name: itemName, \n        quantity: itemQuantity || '1'\n      }\n    ]);\n    \n    // Reset form fields\n    setItemName('');\n    setItemQuantity('');\n  }, [itemName, itemQuantity, watch, setValue]);\n  \n  // Handle removing an item - memoized to prevent recreation on each render\n  const handleRemoveItem = useCallback((index) => {\n    const currentItems = watch('items') || [];\n    const updatedItems = [...currentItems];\n    updatedItems.splice(index, 1);\n    setValue('items', updatedItems);\n  }, [watch, setValue]);\n  \n  // Memoize the items list rendering for better performance\n  const itemsListItems = useMemo(() => {\n    const items = watch('items') || [];\n    \n    if (items.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noItems')}\n        </li>\n      );\n    }\n    \n    return items.map((item, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>\n          {item.name}\n          {item.quantity && item.quantity !== '1' && (\n            <span className=\"ml-2 text-sm text-gray-400\">\n              ({t('jobTicket.quantity')}: {item.quantity})\n            </span>\n          )}\n        </span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveItem(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveItem]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Custom Job Type */}\n      <div>\n        <label htmlFor=\"customJobType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.customJobType')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"customJobType\"\n            name=\"customJobType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            placeholder={t('jobTicket.customJobTypePlaceholder')}\n            {...register('customJobType')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Type */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"other\">{t('workTypes.other')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Materials/Equipment Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsEquipmentUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <input\n                type=\"text\"\n                value={itemName}\n                onChange={(e) => setItemName(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.itemNamePlaceholder')}\n              />\n            </div>\n            <div className=\"w-24\">\n              <input\n                type=\"text\"\n                value={itemQuantity}\n                onChange={(e) => setItemQuantity(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.qty')}\n              />\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddItem}\n              disabled={!itemName}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"items\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {itemsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Additional Notes */}\n      <div>\n        <label htmlFor=\"additionalNotes\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.additionalNotes')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"additionalNotes\"\n            name=\"additionalNotes\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.additionalNotesPlaceholder')}\n            {...register('additionalNotes')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(OtherTicketForm);\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { calculateHoursBetween } from '../../utils/validators';\nimport { Input, Button, Form, Card } from '../ui';\nimport { useDebounce, useMemoizedCallback } from '../../hooks';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management with performance optimizations\n * \n * @param {Object} props - Component props\n * @param {boolean} props.readOnly - Whether the form is in read-only mode\n * @param {Object} props.draftData - Draft data to pre-populate the form\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      const hours = calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [debouncedWorkStartTime, debouncedWorkEndTime, setValue]);\n  \n  useEffect(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      const hours = calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [debouncedDriveStartTime, debouncedDriveEndTime, setValue]);\n  \n  // Auto-save form data when fields change - optimized with useCallback\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language - memoized to prevent re-creation\n  const partsList = useMemo(() => [\n    { value: t('partLubricant'), label: t('partLubricant') },\n    { value: t('partPumpSeal'), label: t('partPumpSeal') },\n    { value: t('partThrustChamber'), label: t('partThrustChamber') },\n    { value: t('partVFDBreaker'), label: t('partVFDBreaker') },\n    { value: t('partServiceKit'), label: t('partServiceKit') },\n    { value: t('partOther'), label: t('partOther') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent re-creation\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  }, [selectedPart, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent re-creation\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      const timer = setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      const timer = setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent re-creation\n  const onSubmit = useMemoizedCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  });\n  \n  return (\n    <Form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6 max-w-3xl mx-auto\">\n      <Card className=\"p-6\">\n        {/* Success message */}\n        {showSuccessMessage && (\n          <div className=\"mb-4 p-4 bg-green-900 bg-opacity-20 border border-green-700 rounded-md\">\n            <p className=\"text-green-400\">{t('jobTicket.submitSuccess')}</p>\n          </div>\n        )}\n        \n        {/* Error message */}\n        {showErrorMessage && (\n          <div className=\"mb-4 p-4 bg-red-900 bg-opacity-20 border border-red-700 rounded-md\">\n            <p className=\"text-red-400\">{submitError}</p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Job Date */}\n          <Input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            label={t('jobTicket.date')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.jobDate}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Company Name */}\n          <Input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            label={t('jobTicket.companyName')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.companyName}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Customer Name */}\n          <Input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            label={t('jobTicket.customerName')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Location */}\n          <Input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            label={t('jobTicket.location')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Work Type */}\n          <Input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            label={t('jobTicket.workType') || 'Work Type'}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Equipment */}\n          <Input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            label={t('jobTicket.equipment') || 'Equipment Serviced'}\n            register={register}\n            readOnly={readOnly}\n          />\n        </div>\n        \n        {/* Work Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.workTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              label={t('jobTicket.workStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              label={t('jobTicket.workEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"workTotalHours\"\n              name=\"workTotalHours\"\n              label={t('jobTicket.workTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Drive Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.travelTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              label={t('jobTicket.travelStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              label={t('jobTicket.travelEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"driveTotalHours\"\n              name=\"driveTotalHours\"\n              label={t('jobTicket.travelTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Parts Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.parts.title')}</h3>\n          \n          {!readOnly && (\n            <div className=\"flex space-x-2 mb-4\">\n              <select\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={selectedPart}\n                onChange={(e) => setSelectedPart(e.target.value)}\n              >\n                <option value=\"\">{t('selectPartsPlaceholder')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n              <Button \n                type=\"button\" \n                onClick={handleAddPart}\n                disabled={!selectedPart}\n                variant=\"secondary\"\n              >\n                {t('addPart')}\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"bg-gray-800 rounded-md border border-gray-700 p-4\">\n            {watch('parts')?.length > 0 ? (\n              <ul className=\"divide-y divide-gray-700\">\n                {watch('parts')?.map((part, index) => (\n                  <li key={index} className=\"py-2 flex justify-between items-center\">\n                    <span>{part}</span>\n                    {!readOnly && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => handleRemovePart(index)}\n                        variant=\"danger\"\n                        size=\"sm\"\n                      >\n                        {t('removePart')}\n                      </Button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-400\">{t('noParts', 'No parts added')}</p>\n            )}\n          </div>\n        </div>\n        \n        {/* Description */}\n        <div className=\"mt-8\">\n          <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workDescription')}\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"workDescription\"\n              name=\"workDescription\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              rows={4}\n              placeholder={t('jobTicket.workDescription')}\n              {...register('workDescription')}\n              readOnly={readOnly}\n            />\n          </div>\n        </div>\n        \n        {/* Submit Button */}\n        {!readOnly && (\n          <div className=\"mt-8 flex justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full md:w-auto\"\n            >\n              {isSubmitting ? t('submitting') : t('submit')}\n            </Button>\n          </div>\n        )}\n      </Card>\n    </Form>\n  );\n};\n\n// Use React.memo to prevent unnecessary re-renders\nexport default React.memo(JobTicketForm);\n","import * as React from \"react\";\nfunction Bars3Icon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\"\n  }));\n}\nconst ForwardRef = React.forwardRef(Bars3Icon);\nexport default ForwardRef;"],"names":["LanguageToggle","language","toggleLanguage","useLanguage","targetLanguage","instructionText","_jsxs","onClick","className","concat","title","tabIndex","children","_jsx","memo","React","_ref","svgRef","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","TicketContext","createContext","TicketProvider","useTicket","context","useContext","draftTickets","useDraftTickets","ticketForm","useTicketForm","ticketSubmission","useTicketSubmission","ticketView","useTicketView","combinedContext","useMemo","viewMode","setViewMode","navigateTo","console","warn","ticketMode","setTicketMode","formData","setFormData","updateFormData","updateFormField","handleInputChange","resetForm","addPart","removePart","setDraftTickets","selectedDraftTicket","setSelectedDraftTicket","saveJobTicketAsDraft","saveDraft","deleteDraftTicket","deleteDraft","loadDraftIntoForm","submitJobTicket","isSubmitting","submitError","submitSuccess","classNames","_len","arguments","length","classes","Array","_key","filter","Boolean","join","routes","Sidebar","forwardRef","sidebarOpen","setSidebarOpen","t","user","isAuthenticated","logout","useAuth","useLocation","usePrefetchRoute","handleCreateTicketClick","useCallback","handleSubmittedTicketsClick","handleDraftTicketsClick","handleLogout","Image","src","alt","lazy","logo_url","fallbackSrc","UserIcon","name","email","Link","to","PlusCircleIcon","DocumentCheckIcon","DocumentTextIcon","process","isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","BaseJobTicketForm","onSubmit","readOnly","draftData","defaultValues","register","handleSubmit","control","setValue","watch","formState","errors","useForm","mode","workStartTime","workEndTime","driveStartTime","driveEndTime","debouncedWorkStartTime","useDebounce","debouncedWorkEndTime","debouncedDriveStartTime","debouncedDriveEndTime","calculateWorkHours","calculateDriveHours","useEffect","hours","subscription","value","_ref2","type","timeoutId","setTimeout","clearTimeout","unsubscribe","showSuccessMessage","setShowSuccessMessage","useState","showErrorMessage","setShowErrorMessage","handleFormSubmit","async","savedDraft","data","error","renderStart","performance","now","renderTime","log","clearMarks","Form","Input","label","rules","required","jobDate","companyName","customerName","location","workType","equipment","htmlFor","_objectSpread","rows","submittedBy","Card","Button","disabled","variant","size","LoadingSpinner","PumpTechTicketForm","selectedPart","setSelectedPart","partsList","handleAddPart","selectedPartObj","find","part","currentParts","handleRemovePart","index","updatedParts","splice","handlePartChange","e","selectedValue","target","selectedOption","partsListItems","parts","partLabel","partName","replace","charAt","toLowerCase","slice","String","placeholder","onChange","Controller","defaultValue","render","field","DriverTicketForm","vehicleTypes","option","vehicleType","min","mileage","RoustaboutTicketForm","selectedMaterial","setSelectedMaterial","materialsList","handleAddMaterial","currentMaterials","handleRemoveMaterial","updatedMaterials","handleMaterialChange","materialsListItems","materials","material","ElectricianTicketForm","selectedComponent","setSelectedComponent","componentsList","handleAddComponent","currentComponents","handleRemoveComponent","updatedComponents","handleComponentChange","componentsListItems","components","component","PipelineOperatorTicketForm","inspectionPoint","setInspectionPoint","inspectionStatus","setInspectionStatus","inspectionNotes","setInspectionNotes","handleAddInspectionPoint","currentInspections","point","status","notes","handleRemoveInspectionPoint","updatedInspections","inspectionListItems","inspections","inspection","TruckDriverTicketForm","loadDescription","setLoadDescription","loadWeight","setLoadWeight","loadDestination","setLoadDestination","handleAddLoad","currentLoads","description","weight","destination","handleRemoveLoad","updatedLoads","loadsListItems","loads","load","Math","max","OtherTicketForm","itemName","setItemName","itemQuantity","setItemQuantity","handleAddItem","currentItems","quantity","handleRemoveItem","updatedItems","itemsListItems","items","item","JobTicketForm","_watch","_watch2","timer","useMemoizedCallback","errorText","step"],"sourceRoot":""}