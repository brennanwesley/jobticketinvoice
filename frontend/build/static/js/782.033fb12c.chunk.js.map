{"version":3,"file":"static/js/782.033fb12c.chunk.js","mappings":"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","sources":["utils/validators.js","components/tickets/JobTicketForm.js"],"sourcesContent":["/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useTicket } from '../../context/TicketContext';\nimport { calculateHoursBetween } from '../../utils/validators';\nimport { Input, Button, Form, Card } from '../ui';\nimport { useDebounce, useMemoizedCallback } from '../../hooks';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management with performance optimizations\n * \n * @param {Object} props - Component props\n * @param {boolean} props.readOnly - Whether the form is in read-only mode\n * @param {Object} props.draftData - Draft data to pre-populate the form\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData,\n    mode: 'onChange' // Validate on change for better UX\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      const hours = calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [debouncedWorkStartTime, debouncedWorkEndTime, setValue]);\n  \n  useEffect(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      const hours = calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [debouncedDriveStartTime, debouncedDriveEndTime, setValue]);\n  \n  // Auto-save form data when fields change - optimized with useCallback\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language - memoized to prevent re-creation\n  const partsList = useMemo(() => [\n    { value: t('partLubricant'), label: t('partLubricant') },\n    { value: t('partPumpSeal'), label: t('partPumpSeal') },\n    { value: t('partThrustChamber'), label: t('partThrustChamber') },\n    { value: t('partVFDBreaker'), label: t('partVFDBreaker') },\n    { value: t('partServiceKit'), label: t('partServiceKit') },\n    { value: t('partOther'), label: t('partOther') },\n  ], [t]);\n  \n  // Handle adding a part - memoized to prevent re-creation\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  }, [selectedPart, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent re-creation\n  const handleRemovePart = useCallback((index) => {\n    const currentParts = watch('parts') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('parts', updatedParts);\n  }, [watch, setValue]);\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      const timer = setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      const timer = setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer); // Clean up timer\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent re-creation\n  const onSubmit = useMemoizedCallback(async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  });\n  \n  return (\n    <Form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6 max-w-3xl mx-auto\">\n      <Card className=\"p-6\">\n        {/* Success message */}\n        {showSuccessMessage && (\n          <div className=\"mb-4 p-4 bg-green-900 bg-opacity-20 border border-green-700 rounded-md\">\n            <p className=\"text-green-400\">{t('jobTicket.submitSuccess')}</p>\n          </div>\n        )}\n        \n        {/* Error message */}\n        {showErrorMessage && (\n          <div className=\"mb-4 p-4 bg-red-900 bg-opacity-20 border border-red-700 rounded-md\">\n            <p className=\"text-red-400\">{submitError}</p>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Job Date */}\n          <Input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            label={t('jobTicket.date')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.jobDate}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Company Name */}\n          <Input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            label={t('jobTicket.companyName')}\n            register={register}\n            rules={{ required: true }}\n            error={errors.companyName}\n            errorText={t('errors.required')}\n            readOnly={readOnly}\n          />\n          \n          {/* Customer Name */}\n          <Input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            label={t('jobTicket.customerName')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Location */}\n          <Input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            label={t('jobTicket.location')}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Work Type */}\n          <Input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            label={t('jobTicket.workType') || 'Work Type'}\n            register={register}\n            readOnly={readOnly}\n          />\n          \n          {/* Equipment */}\n          <Input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            label={t('jobTicket.equipment') || 'Equipment Serviced'}\n            register={register}\n            readOnly={readOnly}\n          />\n        </div>\n        \n        {/* Work Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.workTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              label={t('jobTicket.workStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              label={t('jobTicket.workEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"workTotalHours\"\n              name=\"workTotalHours\"\n              label={t('jobTicket.workTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Drive Hours Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.travelTotalTime')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              label={t('jobTicket.travelStartTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              label={t('jobTicket.travelEndTime')}\n              register={register}\n              readOnly={readOnly}\n            />\n            \n            <Input\n              type=\"number\"\n              id=\"driveTotalHours\"\n              name=\"driveTotalHours\"\n              label={t('jobTicket.travelTotalTime')}\n              register={register}\n              readOnly={true}\n              step=\"0.01\"\n            />\n          </div>\n        </div>\n        \n        {/* Parts Section */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-lg font-medium text-gray-200 mb-4\">{t('jobTicket.parts.title')}</h3>\n          \n          {!readOnly && (\n            <div className=\"flex space-x-2 mb-4\">\n              <select\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                value={selectedPart}\n                onChange={(e) => setSelectedPart(e.target.value)}\n              >\n                <option value=\"\">{t('selectPartsPlaceholder')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n              <Button \n                type=\"button\" \n                onClick={handleAddPart}\n                disabled={!selectedPart}\n                variant=\"secondary\"\n              >\n                {t('addPart')}\n              </Button>\n            </div>\n          )}\n          \n          <div className=\"bg-gray-800 rounded-md border border-gray-700 p-4\">\n            {watch('parts')?.length > 0 ? (\n              <ul className=\"divide-y divide-gray-700\">\n                {watch('parts')?.map((part, index) => (\n                  <li key={index} className=\"py-2 flex justify-between items-center\">\n                    <span>{part}</span>\n                    {!readOnly && (\n                      <Button\n                        type=\"button\"\n                        onClick={() => handleRemovePart(index)}\n                        variant=\"danger\"\n                        size=\"sm\"\n                      >\n                        {t('removePart')}\n                      </Button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-400\">{t('noParts', 'No parts added')}</p>\n            )}\n          </div>\n        </div>\n        \n        {/* Description */}\n        <div className=\"mt-8\">\n          <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workDescription')}\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"workDescription\"\n              name=\"workDescription\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              rows={4}\n              placeholder={t('jobTicket.workDescription')}\n              {...register('workDescription')}\n              readOnly={readOnly}\n            />\n          </div>\n        </div>\n        \n        {/* Submit Button */}\n        {!readOnly && (\n          <div className=\"mt-8 flex justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full md:w-auto\"\n            >\n              {isSubmitting ? t('submitting') : t('submit')}\n            </Button>\n          </div>\n        )}\n      </Card>\n    </Form>\n  );\n};\n\n// Use React.memo to prevent unnecessary re-renders\nexport default React.memo(JobTicketForm);\n"],"names":["isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","JobTicketForm","_ref","_watch","_watch2","readOnly","draftData","t","useLanguage","formData","updateFormData","saveJobTicketAsDraft","useTicket","selectedPart","setSelectedPart","useState","register","handleSubmit","control","setValue","watch","formState","errors","useForm","defaultValues","mode","workStartTime","workEndTime","driveStartTime","driveEndTime","debouncedWorkStartTime","useDebounce","debouncedWorkEndTime","debouncedDriveStartTime","debouncedDriveEndTime","useEffect","hours","subscription","value","_ref2","name","type","unsubscribe","partsList","useMemo","label","handleAddPart","useCallback","currentParts","handleRemovePart","index","updatedParts","splice","submitJobTicket","isSubmitting","submitError","submitSuccess","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","timer","setTimeout","clearTimeout","onSubmit","useMemoizedCallback","async","savedDraft","data","error","console","_jsx","Form","className","children","_jsxs","Card","Input","id","rules","required","jobDate","errorText","companyName","step","onChange","e","target","part","Button","onClick","disabled","variant","length","size","htmlFor","_objectSpread","rows","placeholder","React"],"sourceRoot":""}