{"version":3,"file":"static/js/957.e78e099d.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/24/solid/esm/ArrowLeftIcon.js","../node_modules/@heroicons/react/24/outline/esm/StopIcon.js","../node_modules/@heroicons/react/24/solid/esm/ExclamationCircleIcon.js","components/JobTicketForm.js","utils/voiceParser.js","components/VoiceRecorder.js","../node_modules/@heroicons/react/24/outline/esm/PencilSquareIcon.js","../node_modules/@heroicons/react/24/outline/esm/MicrophoneIcon.js","context/VoiceContext.js"],"sourcesContent":["import * as React from \"react\";\nfunction ArrowLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M11.03 3.97a.75.75 0 010 1.06l-6.22 6.22H21a.75.75 0 010 1.5H4.81l6.22 6.22a.75.75 0 11-1.06 1.06l-7.5-7.5a.75.75 0 010-1.06l7.5-7.5a.75.75 0 011.06 0z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ArrowLeftIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StopIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M5.25 7.5A2.25 2.25 0 017.5 5.25h9a2.25 2.25 0 012.25 2.25v9a2.25 2.25 0 01-2.25 2.25h-9a2.25 2.25 0 01-2.25-2.25v-9z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(StopIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import React, { useState, useEffect, memo } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useTicket } from '../context/TicketContext';\nimport { calculateHoursBetween } from '../utils/validators';\n\n/**\n * Job Ticket Form Component\n * Uses React Hook Form for form management\n */\nconst JobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft } = useTicket();\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  \n  // Setup React Hook Form\n  const { register, handleSubmit, control, setValue, watch, formState: { errors } } = useForm({\n    defaultValues: draftData || formData\n  });\n  \n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const travelStartTime = watch('travelStartTime');\n  const travelEndTime = watch('travelEndTime');\n  \n  // Update total hours when start/end times change\n  useEffect(() => {\n    if (workStartTime && workEndTime) {\n      const hours = calculateHoursBetween(workStartTime, workEndTime);\n      if (hours !== null) {\n        setValue('workTotalHours', hours);\n      }\n    }\n  }, [workStartTime, workEndTime, setValue]);\n  \n  useEffect(() => {\n    if (travelStartTime && travelEndTime) {\n      const hours = calculateHoursBetween(travelStartTime, travelEndTime);\n      if (hours !== null) {\n        setValue('driveTotalHours', hours);\n      }\n    }\n  }, [travelStartTime, travelEndTime, setValue]);\n  \n  // Auto-save form data when fields change\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        updateFormData(name, value[name]);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Get parts list based on current language\n  const getPartsList = () => {\n    return [\n      { value: t('jobTicket.parts.lubricant'), label: t('jobTicket.parts.lubricant') },\n      { value: t('jobTicket.parts.pumpSeal'), label: t('jobTicket.parts.pumpSeal') },\n      { value: t('jobTicket.parts.thrustChamber'), label: t('jobTicket.parts.thrustChamber') },\n      { value: t('jobTicket.parts.vfdBreakerSwitch'), label: t('jobTicket.parts.vfdBreakerSwitch') },\n      { value: t('jobTicket.parts.serviceKit'), label: t('jobTicket.parts.serviceKit') },\n      { value: t('jobTicket.parts.other'), label: t('jobTicket.parts.other') },\n    ];\n  };\n  \n  // Handle adding a part\n  const handleAddPart = () => {\n    if (!selectedPart) return;\n    \n    const currentParts = watch('partsUsed') || [];\n    setValue('partsUsed', [...currentParts, selectedPart]);\n    setSelectedPart('');\n  };\n  \n  // Handle removing a part\n  const handleRemovePart = (index) => {\n    const currentParts = watch('partsUsed') || [];\n    const updatedParts = [...currentParts];\n    updatedParts.splice(index, 1);\n    setValue('partsUsed', updatedParts);\n  };\n  \n  // Handle form submission\n  const { submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  \n  // Use effects to handle success and error messages\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  \n  // Show success message when submitSuccess changes to true\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000); // Hide after 5 seconds\n    }\n  }, [submitSuccess]);\n  \n  // Show error message when submitError is set\n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000); // Hide after 5 seconds\n    }\n  }, [submitError]);\n  \n  // Handle form submission\n  const onSubmit = async (data) => {\n    try {\n      // Save to local storage first\n      const savedDraft = saveJobTicketAsDraft(data);\n      \n      // Then submit to API\n      await submitJobTicket(savedDraft);\n    } catch (error) {\n      console.error('Error submitting job ticket:', error);\n      // Error is already handled by the submitError state in TicketContext\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-8 max-w-3xl mx-auto\">\n      {/* Job Date */}\n      <div>\n        <label htmlFor=\"jobDate\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.date')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"date\"\n            id=\"jobDate\"\n            name=\"jobDate\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('jobDate', { required: true })}\n          />\n        </div>\n      </div>\n      \n      {/* Company Name */}\n      <div>\n        <label htmlFor=\"companyName\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.companyName')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"companyName\"\n            name=\"companyName\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('companyName', { required: true })}\n          />\n        </div>\n      </div>\n      \n      {/* Customer Name */}\n      <div>\n        <label htmlFor=\"customerName\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.customerName') || 'Customer Name'}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"customerName\"\n            name=\"customerName\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('customerName')}\n          />\n        </div>\n      </div>\n      \n      {/* Location */}\n      <div>\n        <label htmlFor=\"location\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.location')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('location')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Type */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workType')}\n          />\n        </div>\n      </div>\n      \n      {/* Equipment */}\n      <div>\n        <label htmlFor=\"equipment\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.equipment')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"equipment\"\n            name=\"equipment\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('equipment')}\n          />\n        </div>\n      </div>\n\n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"workStartTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workStartTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"workStartTime\"\n              name=\"workStartTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('workStartTime')}\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"workEndTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.workEndTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"workEndTime\"\n              name=\"workEndTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('workEndTime')}\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Total Work Hours (calculated) */}\n      <div>\n        <label htmlFor=\"workTotalHours\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workTotalTime')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"workTotalHours\"\n            name=\"workTotalHours\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={true}\n            {...register('workTotalHours')}\n          />\n        </div>\n      </div>\n      \n      {/* Travel Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"driveStartTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.travelStartTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"driveStartTime\"\n              name=\"driveStartTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('driveStartTime')}\n            />\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"driveEndTime\" className=\"block text-sm font-medium text-gray-300\">\n            {t('jobTicket.travelEndTime')}\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"time\"\n              id=\"driveEndTime\"\n              name=\"driveEndTime\"\n              className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              readOnly={readOnly}\n              {...register('driveEndTime')}\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Total Travel Hours (calculated) */}\n      <div>\n        <label htmlFor=\"driveTotalHours\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.travelTotalTime')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"driveTotalHours\"\n            name=\"driveTotalHours\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={true}\n            {...register('driveTotalHours')}\n          />\n        </div>\n      </div>\n      \n      {/* Travel Type */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.travelType')}\n        </label>\n        <div className=\"flex space-x-4\">\n          <Controller\n            name=\"travelType\"\n            control={control}\n            render={({ field }) => (\n              <>\n                <label className={`\n                  flex items-center justify-center px-3 py-2 rounded-md cursor-pointer\n                  ${field.value === 'oneWay' \n                    ? 'bg-orange-600 text-white' \n                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}\n                  ${readOnly ? 'pointer-events-none' : ''}\n                `}>\n                  <input\n                    type=\"radio\"\n                    value=\"oneWay\"\n                    className=\"sr-only\"\n                    disabled={readOnly}\n                    onChange={() => field.onChange('oneWay')}\n                    checked={field.value === 'oneWay'}\n                  />\n                  <span>{t('jobTicket.oneWay')}</span>\n                </label>\n                \n                <label className={`\n                  flex items-center justify-center px-3 py-2 rounded-md cursor-pointer\n                  ${field.value === 'roundTrip' \n                    ? 'bg-orange-600 text-white' \n                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}\n                  ${readOnly ? 'pointer-events-none' : ''}\n                `}>\n                  <input\n                    type=\"radio\"\n                    value=\"roundTrip\"\n                    className=\"sr-only\"\n                    disabled={readOnly}\n                    onChange={() => field.onChange('roundTrip')}\n                    checked={field.value === 'roundTrip'}\n                  />\n                  <span>{t('jobTicket.roundTrip')}</span>\n                </label>\n              </>\n            )}\n          />\n        </div>\n      </div>\n      \n      {/* Parts Used Section */}\n      <div className=\"max-w-3xl\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.parts.title')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex space-x-2 mb-2\">\n            <select\n              value={selectedPart}\n              onChange={(e) => setSelectedPart(e.target.value)}\n              className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            >\n              <option value=\"\">{t('jobTicket.parts.placeholder')}</option>\n              {getPartsList().map((part) => (\n                <option key={part.value} value={part.value}>\n                  {part.label}\n                </option>\n              ))}\n            </select>\n            \n            <button\n              type=\"button\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n              className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:opacity-50\"\n            >\n              {t('jobTicket.addPart')}\n            </button>\n          </div>\n        )}\n        \n        <div className=\"mt-2 space-y-2\">\n          {watch('partsUsed')?.map((part, index) => (\n            <div key={index} className=\"flex items-center justify-between bg-gray-700 px-3 py-2 rounded-md\">\n              <span>{part}</span>\n              {!readOnly && (\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemovePart(index)}\n                  className=\"text-gray-400 hover:text-white\"\n                >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Description of Work */}\n      <div>\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workDescription')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('workDescription')}\n          />\n        </div>\n      </div>\n      \n      {/* Submitted By */}\n      <div>\n        <label htmlFor=\"submittedBy\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.submittedBy')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"submittedBy\"\n            name=\"submittedBy\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            {...register('submittedBy')}\n          />\n        </div>\n      </div>\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </div>\n      )}\n      \n      {showErrorMessage && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitError')}</span>\n        </div>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={`inline-flex justify-center py-2 px-6 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${isSubmitting ? 'bg-gray-500' : 'bg-orange-600 hover:bg-orange-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition-colors duration-200`}\n            >\n              {isSubmitting ? t('common.submitting') : t('jobTicket.submit')}\n              {isSubmitting && (\n                <svg className=\"animate-spin ml-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n              )}\n            </button>\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default memo(JobTicketForm);\n","/**\n * Voice Parser Utility\n * \n * Parses transcribed text from voice input and extracts structured data\n * for job ticket form fields.\n */\n\n/**\n * Extract job ticket data from transcribed text\n * @param {string} text - The transcribed text from voice input\n * @returns {Object} - Extracted job ticket data\n */\nexport const parseJobTicketFromVoice = (text) => {\n  if (!text) return {};\n  \n  // Normalize text for consistent parsing\n  const normalizedText = text.toLowerCase().trim();\n  \n  // Initialize extracted data object\n  const extractedData = {};\n  \n  // Extract company name\n  extractedData.companyName = extractCompanyName(normalizedText);\n  \n  // Extract customer name\n  extractedData.customerName = extractCustomerName(normalizedText);\n  \n  // Extract location\n  extractedData.location = extractLocation(normalizedText);\n  \n  // Extract work type\n  extractedData.workType = extractWorkType(normalizedText);\n  \n  // Extract equipment\n  extractedData.equipment = extractEquipment(normalizedText);\n  \n  // Extract work description\n  extractedData.workDescription = extractWorkDescription(normalizedText);\n  \n  // Extract parts used\n  extractedData.partsUsed = extractPartsUsed(normalizedText);\n  \n  // Extract submitted by\n  extractedData.submittedBy = extractSubmittedBy(normalizedText);\n  \n  // Extract times\n  const times = extractTimes(normalizedText);\n  if (times.workStartTime) extractedData.workStartTime = times.workStartTime;\n  if (times.workEndTime) extractedData.workEndTime = times.workEndTime;\n  if (times.driveStartTime) extractedData.driveStartTime = times.driveStartTime;\n  if (times.driveEndTime) extractedData.driveEndTime = times.driveEndTime;\n  \n  // Extract travel type\n  extractedData.travelType = extractTravelType(normalizedText);\n  \n  // Extract job date\n  extractedData.jobDate = extractJobDate(normalizedText);\n  \n  return extractedData;\n};\n\n/**\n * Extract company name from text\n */\nconst extractCompanyName = (text) => {\n  // Common patterns for company name\n  const patterns = [\n    /(?:company|company name|for company|at company|with company)[:\\s]+([^.,]+)/i,\n    /(?:job|work)(?:\\s+is)?(?:\\s+for)?(?:\\s+company)?[:\\s]+([^.,]+)/i,\n    /(?:at|for)[:\\s]+([^.,]+?)(?:\\s+(?:in|at|on|job|work))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract customer name from text\n */\nconst extractCustomerName = (text) => {\n  // Common patterns for customer name\n  const patterns = [\n    /(?:customer|customer name|client|client name)[:\\s]+([^.,]+)/i,\n    /(?:for|with) customer[:\\s]+([^.,]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract location from text\n */\nconst extractLocation = (text) => {\n  // Common patterns for location\n  const patterns = [\n    /(?:location|site|address|place|facility|well|lease)[:\\s]+([^.,]+)/i,\n    /(?:at|in) (?:location|site|address|place|facility|well|lease)[:\\s]+([^.,]+)/i,\n    /(?:at|in)[:\\s]+([^.,]+?)(?:\\s+(?:on|for|to|performed|did|completed))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract work type from text\n */\nconst extractWorkType = (text) => {\n  // Common patterns for work type\n  const patterns = [\n    /(?:work type|type of work|job type)[:\\s]+([^.,]+)/i,\n    /(?:performed|did|completed)[:\\s]+([^.,]+?)(?:\\s+(?:at|on|for|work|job))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract equipment from text\n */\nconst extractEquipment = (text) => {\n  // Common patterns for equipment\n  const patterns = [\n    /(?:equipment|machine|pump|unit|system)[:\\s]+([^.,]+)/i,\n    /(?:worked on|serviced|repaired|maintained)[:\\s]+([^.,]+?)(?:\\s+(?:at|on|for|which|that))/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract work description from text\n */\nconst extractWorkDescription = (text) => {\n  // Common patterns for work description\n  const patterns = [\n    /(?:work description|description of work|work performed|job description)[:\\s]+([^.]+)/i,\n    /(?:performed|did|completed|work included)[:\\s]+([^.]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  // If no specific description found, use the entire text as fallback\n  return text;\n};\n\n/**\n * Extract parts used from text\n */\nconst extractPartsUsed = (text) => {\n  const parts = [];\n  \n  // Common part names to look for\n  const commonParts = [\n    'lubricant', 'pump seal', 'thrust chamber', \n    'vfd breaker', 'vfd switch', 'service kit', \n    'safety maintenance kit', 'maintenance kit'\n  ];\n  \n  // Check for parts used section\n  const partsSection = text.match(/(?:parts used|used parts|parts|replaced|installed)[:\\s]+([^.]+)/i);\n  \n  if (partsSection && partsSection[1]) {\n    const partsText = partsSection[1].toLowerCase();\n    \n    // Check for common parts in the parts section\n    commonParts.forEach(part => {\n      if (partsText.includes(part)) {\n        parts.push(part);\n      }\n    });\n  } else {\n    // If no specific parts section, check entire text\n    commonParts.forEach(part => {\n      if (text.includes(part)) {\n        parts.push(part);\n      }\n    });\n  }\n  \n  return parts;\n};\n\n/**\n * Extract submitted by from text\n */\nconst extractSubmittedBy = (text) => {\n  // Common patterns for submitted by\n  const patterns = [\n    /(?:submitted by|completed by|technician|tech|my name is|this is)[:\\s]+([^.,]+)/i,\n    /(?:submitted|completed)(?:\\s+by)?[:\\s]+([^.,]+)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = text.match(pattern);\n    if (match && match[1]) {\n      return match[1].trim();\n    }\n  }\n  \n  return '';\n};\n\n/**\n * Extract times from text\n */\nconst extractTimes = (text) => {\n  const times = {};\n  \n  // Time patterns (both 12h and 24h formats)\n  const timePattern = /(\\d{1,2})(?::(\\d{2}))?(?:\\s*(am|pm))?/i;\n  \n  // Work start time\n  const workStartMatch = text.match(/(?:work|job)(?:\\s+start(?:ed)?|\\s+begin|began)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (workStartMatch && workStartMatch[1]) {\n    const timeMatch = workStartMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.workStartTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Work end time\n  const workEndMatch = text.match(/(?:work|job)(?:\\s+end(?:ed)?|finished|complete(?:d)?)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (workEndMatch && workEndMatch[1]) {\n    const timeMatch = workEndMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.workEndTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Drive/travel start time\n  const driveStartMatch = text.match(/(?:drive|travel|trip)(?:\\s+start(?:ed)?|\\s+begin|began)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (driveStartMatch && driveStartMatch[1]) {\n    const timeMatch = driveStartMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.driveStartTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  // Drive/travel end time\n  const driveEndMatch = text.match(/(?:drive|travel|trip)(?:\\s+end(?:ed)?|finished|complete(?:d)?)(?:\\s+at)?[:\\s]+([^.,]+)/i);\n  if (driveEndMatch && driveEndMatch[1]) {\n    const timeMatch = driveEndMatch[1].match(timePattern);\n    if (timeMatch) {\n      times.driveEndTime = formatTimeString(timeMatch);\n    }\n  }\n  \n  return times;\n};\n\n/**\n * Format time string to HH:MM format\n */\nconst formatTimeString = (timeMatch) => {\n  let hours = parseInt(timeMatch[1], 10);\n  const minutes = timeMatch[2] ? timeMatch[2] : '00';\n  const ampm = timeMatch[3] ? timeMatch[3].toLowerCase() : null;\n  \n  // Convert to 24-hour format if needed\n  if (ampm === 'pm' && hours < 12) {\n    hours += 12;\n  } else if (ampm === 'am' && hours === 12) {\n    hours = 0;\n  }\n  \n  // Format as HH:MM\n  return `${hours.toString().padStart(2, '0')}:${minutes.padStart(2, '0')}`;\n};\n\n/**\n * Extract travel type from text\n */\nconst extractTravelType = (text) => {\n  if (text.includes('one way') || text.includes('oneway') || text.includes('one-way')) {\n    return 'oneWay';\n  } else if (text.includes('round trip') || text.includes('roundtrip') || text.includes('round-trip')) {\n    return 'roundTrip';\n  }\n  \n  return '';\n};\n\n/**\n * Extract job date from text\n */\nconst extractJobDate = (text) => {\n  // Common date patterns\n  const datePattern = /(\\d{1,2})[-./](\\d{1,2})[-./](\\d{2,4})/;\n  const dateTextPattern = /(?:date|job date|on)[:\\s]+([^.,]+)/i;\n  \n  // Check for date in format MM/DD/YYYY or similar\n  const dateMatch = text.match(datePattern);\n  if (dateMatch) {\n    const month = parseInt(dateMatch[1], 10);\n    const day = parseInt(dateMatch[2], 10);\n    let year = parseInt(dateMatch[3], 10);\n    \n    // Fix two-digit years\n    if (year < 100) {\n      year += 2000;\n    }\n    \n    // Format as YYYY-MM-DD for input[type=\"date\"]\n    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n  }\n  \n  // Check for date mentioned in text\n  const dateTextMatch = text.match(dateTextPattern);\n  if (dateTextMatch && dateTextMatch[1]) {\n    // Try to parse the date text - this is a simplified approach\n    const dateText = dateTextMatch[1].toLowerCase();\n    \n    // Check for \"today\", \"yesterday\", etc.\n    const today = new Date();\n    \n    if (dateText.includes('today')) {\n      return formatDateString(today);\n    } else if (dateText.includes('yesterday')) {\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      return formatDateString(yesterday);\n    } else if (dateText.includes('tomorrow')) {\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      return formatDateString(tomorrow);\n    }\n  }\n  \n  // Default to today's date if no date found\n  return formatDateString(new Date());\n};\n\n/**\n * Format date as YYYY-MM-DD\n */\nconst formatDateString = (date) => {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n};\n","import React, { memo, useState, useEffect } from 'react';\r\nimport { MicrophoneIcon, StopIcon, PencilSquareIcon } from '@heroicons/react/24/outline';\r\nimport { ArrowLeftIcon, ExclamationCircleIcon } from '@heroicons/react/24/solid';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport { useVoice } from '../context/VoiceContext';\r\nimport { useTicket } from '../context/TicketContext';\r\nimport JobTicketForm from './JobTicketForm';\r\nimport { parseJobTicketFromVoice } from '../utils/voiceParser';\r\n\r\n/**\r\n * Voice Recorder component for voice-based job ticket creation\r\n */\r\nconst VoiceRecorder = () => {\r\n  const { translations, t } = useLanguage();\r\n  const { \r\n    voiceStatus, \r\n    transcribedText, \r\n    transcriptionError, \r\n    startVoiceRecording, \r\n    stopVoiceRecording, \r\n    cancelVoiceRecording \r\n  } = useVoice();\r\n  \r\n  const { \r\n    setTicketMode, \r\n    setViewMode, \r\n    saveJobTicketAsDraft, \r\n    setSelectedDraftTicket,\r\n    updateFormData\r\n  } = useTicket();\r\n  \r\n  // State to store parsed job ticket data\r\n  const [parsedJobTicket, setParsedJobTicket] = useState({});\r\n  \r\n  // Parse transcribed text when it changes\r\n  useEffect(() => {\r\n    if (transcribedText && voiceStatus === 'captured') {\r\n      const extractedData = parseJobTicketFromVoice(transcribedText);\r\n      console.log('Parsed job ticket data:', extractedData);\r\n      setParsedJobTicket(extractedData);\r\n      \r\n      // Update form data with extracted values\r\n      Object.entries(extractedData).forEach(([field, value]) => {\r\n        if (value) {\r\n          updateFormData(field, value);\r\n        }\r\n      });\r\n    }\r\n  }, [transcribedText, voiceStatus, updateFormData]);\r\n  \r\n  // Handle back button click\r\n  const handleBackClick = () => {\r\n    setTicketMode(null);\r\n    setViewMode('landing');\r\n    cancelVoiceRecording();\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <button \r\n        onClick={handleBackClick}\r\n        className=\"flex items-center text-gray-400 hover:text-white mb-6\"\r\n      >\r\n        <ArrowLeftIcon className=\"h-4 w-4 mr-1\" />\r\n        {translations.back}\r\n      </button>\r\n      \r\n      {/* Listening state with animated microphone */}\r\n      {voiceStatus === 'listening' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          {/* Enhanced instruction text - larger and burnt orange */}\r\n          <p className=\"text-2xl md:text-3xl font-bold text-orange-500 mb-8\">\r\n            {translations.speakJobTicketInfo}\r\n          </p>\r\n          \r\n          <div className=\"relative mb-8\">\r\n            {/* Larger animated microphone with pulse effect */}\r\n            <div className=\"pulse-dot\">\r\n              <MicrophoneIcon className=\"h-20 w-20 mx-auto mb-4 text-orange-500\" />\r\n            </div>\r\n            \r\n            {/* Enhanced animated sound wave circles */}\r\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 -z-10\">\r\n              <div className=\"h-24 w-24 rounded-full bg-orange-500 opacity-20 pulse-ring\"></div>\r\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-32 w-32 rounded-full bg-orange-500 opacity-10 pulse-ring animation-delay-300\"></div>\r\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-40 w-40 rounded-full bg-orange-500 opacity-5 pulse-ring animation-delay-600\"></div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Animated waveform */}\r\n          <div className=\"waveform mb-8\">\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n            <div className=\"waveform-bar\"></div>\r\n          </div>\r\n          \r\n          <p className=\"text-xl font-medium mb-6\">{translations.listening}</p>\r\n          \r\n          {/* Control buttons */}\r\n          <div className=\"flex flex-col space-y-4 items-center\">\r\n            <div className=\"flex flex-wrap justify-center gap-4\">\r\n              <button \r\n                onClick={stopVoiceRecording}\r\n                className=\"bg-orange-700 hover:bg-orange-800 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <StopIcon className=\"h-5 w-5\" />\r\n                <span>{translations.stopRecording}</span>\r\n              </button>\r\n              \r\n              <button \r\n                onClick={cancelVoiceRecording}\r\n                className=\"bg-gray-700 hover:bg-gray-800 text-white px-6 py-2 rounded-lg transition-colors\"\r\n              >\r\n                {translations.cancelRecording}\r\n              </button>\r\n            </div>\r\n            \r\n            {/* Additional buttons for visual only - no functionality */}\r\n            <div className=\"flex flex-wrap justify-center gap-4 mt-4\">\r\n              <button \r\n                onClick={startVoiceRecording}\r\n                className=\"bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <MicrophoneIcon className=\"h-5 w-5\" />\r\n                <span>{translations.restartRecording}</span>\r\n              </button>\r\n              \r\n              <button \r\n                onClick={stopVoiceRecording}\r\n                className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n              >\r\n                <PencilSquareIcon className=\"h-5 w-5\" />\r\n                <span>{translations.allDoneCreateJobTicket}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Processing state */}\r\n      {voiceStatus === 'processing' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"mb-4\">\r\n            <svg className=\"animate-spin h-10 w-10 text-orange-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n          </div>\r\n          <p className=\"text-xl font-medium\">{translations.processingAudio}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Error state */}\r\n      {voiceStatus === 'error' && (\r\n        <div className=\"flex flex-col items-center\">\r\n          <div className=\"text-red-500 mb-4\">\r\n            <ExclamationCircleIcon className=\"h-16 w-16 mx-auto\" />\r\n          </div>\r\n          <p className=\"text-xl font-medium text-red-500 mb-4\">{transcriptionError}</p>\r\n          <button \r\n            onClick={() => setTicketMode(null)}\r\n            className=\"bg-orange-700 hover:bg-orange-800 text-white px-6 py-2 rounded-lg transition-colors\"\r\n          >\r\n            {translations.goBack}\r\n          </button>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Captured state with transcription and options */}\r\n      {voiceStatus === 'captured' && (\r\n        <div>\r\n          {/* Header with title and back button */}\r\n          <div className=\"flex justify-between items-center mb-6\">\r\n            <h2 className=\"text-2xl font-bold\">{t('jobTicket.voiceCaptured')}</h2>\r\n            <button \r\n              onClick={handleBackClick}\r\n              className=\"bg-gray-700 hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2\"\r\n            >\r\n              <ArrowLeftIcon className=\"h-5 w-5\" />\r\n              <span>{t('jobTicket.goBack')}</span>\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Prominent transcription display - the main feature requested */}\r\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 mb-8 border-2 border-orange-500\">\r\n            <h3 className=\"text-xl font-bold mb-3 text-orange-500\">{t('jobTicket.rawTranscription')}</h3>\r\n            <div className=\"bg-gray-100 dark:bg-gray-700 p-4 rounded-lg max-h-60 overflow-y-auto\">\r\n              <p className=\"text-gray-900 dark:text-gray-100 text-lg\">{transcribedText || t('jobTicket.noTranscriptionAvailable')}</p>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Action buttons - clearly separated and prominently displayed */}\r\n          <div className=\"flex flex-wrap gap-4 justify-center mb-8\">\r\n            <button \r\n              onClick={startVoiceRecording}\r\n              className=\"bg-orange-600 hover:bg-orange-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 text-lg\"\r\n            >\r\n              <MicrophoneIcon className=\"h-6 w-6\" />\r\n              <span>{t('jobTicket.restartRecording')}</span>\r\n            </button>\r\n            \r\n            <button\r\n              onClick={() => {\r\n                const newDraft = saveJobTicketAsDraft({ ...parsedJobTicket, workDescription: transcribedText });\r\n                setSelectedDraftTicket(newDraft);\r\n                setViewMode('draft');\r\n              }}\r\n              className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 text-lg\"\r\n            >\r\n              <PencilSquareIcon className=\"h-6 w-6\" />\r\n              <span>{t('jobTicket.submit')}</span>\r\n            </button>\r\n          </div>\r\n          \r\n          {/* Extracted data with collapsible section */}\r\n          <div className=\"bg-gray-800 rounded-lg p-4 mb-6 border border-gray-700\">\r\n            <div className=\"flex justify-between items-center cursor-pointer\" \r\n                 onClick={() => {\r\n                   const detailsEl = document.getElementById('extractedDataDetails');\r\n                   if (detailsEl) detailsEl.open = !detailsEl.open;\r\n                 }}>\r\n              <h3 className=\"text-lg font-medium\">{t('jobTicket.extractedData')}</h3>\r\n              <span className=\"text-sm text-gray-400\">(Click to expand/collapse)</span>\r\n            </div>\r\n            \r\n            <details id=\"extractedDataDetails\" className=\"mt-2\">\r\n              <summary className=\"sr-only\">Extracted Data Details</summary>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4 pl-4 border-l-2 border-gray-700\">\r\n                {Object.entries(parsedJobTicket).map(([key, value]) => {\r\n                  // Skip empty values and arrays\r\n                  if (!value || (Array.isArray(value) && value.length === 0)) return null;\r\n                  \r\n                  // Format the key for display\r\n                  const formattedKey = key.replace(/([A-Z])/g, ' $1')\r\n                    .replace(/^./, str => str.toUpperCase());\r\n                  \r\n                  // Format the value for display\r\n                  const formattedValue = Array.isArray(value) \r\n                    ? value.join(', ')\r\n                    : value;\r\n                  \r\n                  return (\r\n                    <div key={key} className=\"flex\">\r\n                      <span className=\"font-medium text-gray-400 mr-2\">{formattedKey}:</span>\r\n                      <span className=\"text-white\">{formattedValue}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n                \r\n                {/* Recognition quality indicator */}\r\n                <div className=\"col-span-2 mt-4 flex items-center\">\r\n                  <span className=\"text-sm text-gray-400 mr-2\">{t('jobTicket.recognitionQuality')}:</span>\r\n                  <div className=\"flex space-x-1\">\r\n                    {Object.keys(parsedJobTicket).filter(key => !!parsedJobTicket[key]).length >= 5 ? (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\r\n                        <span className=\"ml-2 text-green-500 text-xs\">Good</span>\r\n                      </>\r\n                    ) : Object.keys(parsedJobTicket).filter(key => !!parsedJobTicket[key]).length >= 3 ? (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-yellow-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-yellow-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <span className=\"ml-2 text-yellow-500 text-xs\">Fair</span>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <div className=\"h-2 w-2 rounded-full bg-red-500\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <div className=\"h-2 w-2 rounded-full bg-gray-600\"></div>\r\n                        <span className=\"ml-2 text-red-500 text-xs\">Poor</span>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </details>\r\n          </div>\r\n          \r\n          {/* Optional: Form with prefilled data (collapsed by default) */}\r\n          <div className=\"bg-gray-800 rounded-lg p-4 mb-6 border border-gray-700\">\r\n            <div className=\"flex justify-between items-center cursor-pointer\"\r\n                 onClick={() => {\r\n                   const formEl = document.getElementById('jobTicketFormDetails');\r\n                   if (formEl) formEl.open = !formEl.open;\r\n                 }}>\r\n              <h3 className=\"text-lg font-medium\">{t('jobTicket.editForm')}</h3>\r\n              <span className=\"text-sm text-gray-400\">(Click to expand/collapse)</span>\r\n            </div>\r\n            \r\n            <details id=\"jobTicketFormDetails\" className=\"mt-2\">\r\n              <summary className=\"sr-only\">Job Ticket Form</summary>\r\n              <div className=\"mt-4\">\r\n                <JobTicketForm />\r\n              </div>\r\n            </details>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(VoiceRecorder);\r\n","import * as React from \"react\";\nfunction PencilSquareIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10\"\n  }));\n}\nconst ForwardRef = React.forwardRef(PencilSquareIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction MicrophoneIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 18.75a6 6 0 006-6v-1.5m-6 7.5a6 6 0 01-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 01-3-3V4.5a3 3 0 116 0v8.25a3 3 0 01-3 3z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(MicrophoneIcon);\nexport default ForwardRef;","import React, { createContext, useState, useContext, useRef, useCallback, useEffect } from 'react';\r\nimport { useLanguage } from './LanguageContext';\r\n\r\n// Create the context\r\nconst VoiceContext = createContext();\r\n\r\n/**\r\n * Provider component for voice recording context\r\n * @param {Object} props - Component props\r\n * @returns {React.Component} Provider component\r\n */\r\nexport const VoiceProvider = ({ children }) => {\r\n  const { t } = useLanguage();\r\n  \r\n  // Voice recording states\r\n  const [voiceStatus, setVoiceStatus] = useState(null); // null, 'listening', 'processing', 'captured', or 'error'\r\n  const [transcribedText, setTranscribedText] = useState('');\r\n  const [transcriptionError, setTranscriptionError] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  \r\n  // Refs\r\n  const recognitionRef = useRef(null);\r\n  const silenceTimerRef = useRef(null);\r\n  \r\n  // Initialize Web Speech API\r\n  useEffect(() => {\r\n    // Check if browser supports speech recognition\r\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\r\n      console.error('Speech recognition not supported');\r\n      return;\r\n    }\r\n    \r\n    // Create speech recognition instance\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    recognitionRef.current = new SpeechRecognition();\r\n    \r\n    // Configure speech recognition\r\n    recognitionRef.current.continuous = true;\r\n    recognitionRef.current.interimResults = true;\r\n    recognitionRef.current.lang = 'en-US';\r\n    \r\n    // Clean up on unmount\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        try {\r\n          recognitionRef.current.stop();\r\n        } catch (e) {\r\n          console.error('Error stopping recognition:', e);\r\n        }\r\n      }\r\n      \r\n      if (silenceTimerRef.current) {\r\n        clearTimeout(silenceTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // Reset silence timer\r\n  const resetSilenceTimer = useCallback(() => {\r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n    }\r\n    \r\n    silenceTimerRef.current = setTimeout(() => {\r\n      if (isListening) {\r\n        stopVoiceRecording();\r\n        setTranscriptionError(t('listeningTimeout'));\r\n        setVoiceStatus('error');\r\n      }\r\n    }, 15000); // 15 seconds of silence\r\n  }, [isListening, t]);\r\n  \r\n  // Start voice recording\r\n  const startVoiceRecording = useCallback(() => {\r\n    if (!recognitionRef.current) {\r\n      setTranscriptionError(t('browserNotSupported'));\r\n      setVoiceStatus('error');\r\n      return;\r\n    }\r\n    \r\n    setTranscribedText('');\r\n    setTranscriptionError('');\r\n    setVoiceStatus('listening');\r\n    setIsListening(true);\r\n    \r\n    try {\r\n      // Set up event handlers\r\n      recognitionRef.current.onstart = () => {\r\n        console.log('Voice recognition started');\r\n        resetSilenceTimer();\r\n      };\r\n      \r\n      recognitionRef.current.onresult = (event) => {\r\n        resetSilenceTimer();\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0].transcript)\r\n          .join(' ');\r\n        setTranscribedText(transcript);\r\n      };\r\n      \r\n      recognitionRef.current.onerror = (event) => {\r\n        console.error('Speech recognition error', event.error);\r\n        if (event.error === 'no-speech') {\r\n          setTranscriptionError(t('noSpeechDetected'));\r\n        } else if (event.error === 'not-allowed') {\r\n          setTranscriptionError(t('microphoneError'));\r\n        } else {\r\n          setTranscriptionError(t('transcriptionError'));\r\n        }\r\n        setVoiceStatus('error');\r\n        setIsListening(false);\r\n        \r\n        if (silenceTimerRef.current) {\r\n          clearTimeout(silenceTimerRef.current);\r\n        }\r\n      };\r\n      \r\n      recognitionRef.current.onend = () => {\r\n        console.log('Voice recognition ended');\r\n        if (isListening && voiceStatus === 'listening') {\r\n          // If we're still supposed to be listening, restart\r\n          try {\r\n            recognitionRef.current.start();\r\n          } catch (e) {\r\n            console.error('Error restarting recognition:', e);\r\n          }\r\n        } else {\r\n          setIsListening(false);\r\n          if (voiceStatus === 'listening') {\r\n            setVoiceStatus('captured');\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Start recognition\r\n      recognitionRef.current.start();\r\n    } catch (error) {\r\n      console.error('Error starting voice recognition:', error);\r\n      setTranscriptionError(t('transcriptionError'));\r\n      setVoiceStatus('error');\r\n      setIsListening(false);\r\n    }\r\n  }, [isListening, resetSilenceTimer, t, voiceStatus]);\r\n  \r\n  // Stop voice recording\r\n  const stopVoiceRecording = useCallback(() => {\r\n    if (recognitionRef.current && isListening) {\r\n      try {\r\n        recognitionRef.current.stop();\r\n        console.log('Voice recognition stopped');\r\n      } catch (e) {\r\n        console.error('Error stopping recognition:', e);\r\n      }\r\n    }\r\n    \r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n      silenceTimerRef.current = null;\r\n    }\r\n    \r\n    setIsListening(false);\r\n    setVoiceStatus('processing');\r\n    \r\n    // Simulate processing delay\r\n    setTimeout(() => {\r\n      if (transcribedText) {\r\n        setVoiceStatus('captured');\r\n      } else {\r\n        setTranscriptionError(t('noSpeechDetected'));\r\n        setVoiceStatus('error');\r\n      }\r\n    }, 1000);\r\n  }, [isListening, t, transcribedText]);\r\n  \r\n  // Cancel voice recording\r\n  const cancelVoiceRecording = useCallback(() => {\r\n    if (recognitionRef.current && isListening) {\r\n      try {\r\n        recognitionRef.current.stop();\r\n        console.log('Voice recognition cancelled');\r\n      } catch (e) {\r\n        console.error('Error stopping recognition:', e);\r\n      }\r\n    }\r\n    \r\n    if (silenceTimerRef.current) {\r\n      clearTimeout(silenceTimerRef.current);\r\n      silenceTimerRef.current = null;\r\n    }\r\n    \r\n    setIsListening(false);\r\n    setVoiceStatus(null);\r\n    setTranscribedText('');\r\n    setTranscriptionError('');\r\n  }, [isListening]);\r\n  \r\n  // Context value\r\n  const contextValue = {\r\n    voiceStatus,\r\n    setVoiceStatus,\r\n    transcribedText,\r\n    setTranscribedText,\r\n    transcriptionError,\r\n    setTranscriptionError,\r\n    isListening,\r\n    startVoiceRecording,\r\n    stopVoiceRecording,\r\n    cancelVoiceRecording\r\n  };\r\n  \r\n  return (\r\n    <VoiceContext.Provider value={contextValue}>\r\n      {children}\r\n    </VoiceContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Custom hook to use the voice context\r\n * @returns {Object} Voice context value\r\n */\r\nexport const useVoice = () => {\r\n  const context = useContext(VoiceContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useVoice must be used within a VoiceProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default VoiceContext;\r\n"],"names":["React","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","viewBox","fill","ref","id","fillRule","d","clipRule","strokeWidth","stroke","strokeLinecap","strokeLinejoin","JobTicketForm","_watch","readOnly","draftData","t","useLanguage","formData","updateFormData","saveJobTicketAsDraft","useTicket","selectedPart","setSelectedPart","useState","register","handleSubmit","control","setValue","watch","formState","errors","useForm","defaultValues","workStartTime","workEndTime","travelStartTime","travelEndTime","useEffect","hours","calculateHoursBetween","subscription","value","_ref2","name","type","unsubscribe","submitJobTicket","isSubmitting","submitError","submitSuccess","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","setTimeout","_jsxs","onSubmit","async","savedDraft","data","error","console","className","children","_jsx","htmlFor","_objectSpread","required","Controller","render","_ref3","field","_Fragment","concat","disabled","onChange","checked","e","target","label","map","part","onClick","handleAddPart","currentParts","index","updatedParts","splice","handleRemovePart","rows","role","cx","cy","r","memo","extractCompanyName","text","patterns","pattern","match","trim","extractCustomerName","extractLocation","extractWorkType","extractEquipment","extractWorkDescription","extractPartsUsed","parts","commonParts","partsSection","partsText","toLowerCase","forEach","includes","push","extractSubmittedBy","extractTimes","times","timePattern","workStartMatch","timeMatch","formatTimeString","workEndMatch","driveStartMatch","driveStartTime","driveEndMatch","driveEndTime","parseInt","minutes","ampm","toString","padStart","extractTravelType","extractJobDate","dateMatch","month","day","year","dateTextMatch","dateText","today","Date","formatDateString","yesterday","setDate","getDate","tomorrow","date","getFullYear","getMonth","VoiceRecorder","translations","voiceStatus","transcribedText","transcriptionError","startVoiceRecording","stopVoiceRecording","cancelVoiceRecording","useVoice","setTicketMode","setViewMode","setSelectedDraftTicket","parsedJobTicket","setParsedJobTicket","extractedData","normalizedText","companyName","customerName","location","workType","equipment","workDescription","partsUsed","submittedBy","travelType","jobDate","parseJobTicketFromVoice","log","entries","handleBackClick","ArrowLeftIcon","back","speakJobTicketInfo","MicrophoneIcon","listening","StopIcon","stopRecording","cancelRecording","restartRecording","PencilSquareIcon","allDoneCreateJobTicket","processingAudio","ExclamationCircleIcon","goBack","newDraft","detailsEl","document","getElementById","open","key","Array","isArray","length","formattedKey","replace","str","toUpperCase","formattedValue","join","keys","filter","formEl","VoiceContext","createContext","VoiceProvider","setVoiceStatus","setTranscribedText","setTranscriptionError","isListening","setIsListening","recognitionRef","useRef","silenceTimerRef","window","SpeechRecognition","webkitSpeechRecognition","current","continuous","interimResults","lang","stop","clearTimeout","resetSilenceTimer","useCallback","onstart","onresult","event","transcript","from","results","result","onerror","onend","start","contextValue","Provider","context","useContext","Error"],"sourceRoot":""}