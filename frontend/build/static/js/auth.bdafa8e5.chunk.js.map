{"version":3,"file":"static/js/auth.bdafa8e5.chunk.js","mappings":"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","sources":["components/TechnicianSignupPage.js","components/LanguageToggle.js","components/LoginForm.js","components/LoginPage.js","components/ManagerSignupForm.js","components/SignupPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { LoadingSpinner, Button, Input } from './ui';\n\n/**\n * Technician Signup Page\n * Handles token-based invitation acceptance for field technicians\n */\nconst TechnicianSignupPage = () => {\n  const { t } = useLanguage();\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  \n  // Get token from URL params\n  const token = searchParams.get('token');\n  \n  // State management\n  const [invitationData, setInvitationData] = useState(null);\n  const [isValidatingToken, setIsValidatingToken] = useState(true);\n  const [tokenError, setTokenError] = useState(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState(null);\n  \n  // Form data\n  const [formData, setFormData] = useState({\n    name: '',\n    password: '',\n    confirmPassword: ''\n  });\n  \n  // Form validation errors\n  const [errors, setErrors] = useState({});\n\n  // Validate token on component mount\n  useEffect(() => {\n    if (!token) {\n      setTokenError(t('techSignup.errors.noToken'));\n      setIsValidatingToken(false);\n      return;\n    }\n\n    validateInvitationToken();\n  }, [token]);\n\n  // Validate invitation token\n  const validateInvitationToken = async () => {\n    try {\n      setIsValidatingToken(true);\n      setTokenError(null);\n\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\n      const response = await fetch(`${apiUrl}/invitations/check/${token}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      \n      if (!result.valid) {\n        setTokenError(result.message || t('techSignup.errors.invalidToken'));\n        return;\n      }\n\n      // Token is valid, set invitation data and prefill form\n      setInvitationData(result.invitation);\n      setFormData(prev => ({\n        ...prev,\n        name: result.invitation.name || ''\n      }));\n\n    } catch (error) {\n      console.error('Token validation error:', error);\n      setTokenError(t('techSignup.errors.validationFailed'));\n    } finally {\n      setIsValidatingToken(false);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear field-specific error when user types\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n\n  // Validate form data\n  const validateForm = () => {\n    const newErrors = {};\n\n    // Name validation\n    if (!formData.name.trim()) {\n      newErrors.name = t('validation.nameRequired');\n    } else if (formData.name.trim().length < 2) {\n      newErrors.name = t('validation.nameMinLength');\n    }\n\n    // Password validation\n    if (!formData.password) {\n      newErrors.password = t('validation.passwordRequired');\n    } else if (formData.password.length < 8) {\n      newErrors.password = t('validation.passwordMinLength');\n    }\n\n    // Confirm password validation\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = t('validation.confirmPasswordRequired');\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = t('validation.passwordMismatch');\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setSubmitError(null);\n\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\n      const response = await fetch(`${apiUrl}/invitations/accept/${token}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token: token,\n          password: formData.password,\n          name: formData.name.trim()\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const userData = await response.json();\n      \n      // Account created successfully, now log in the user\n      try {\n        await login(invitationData.email, formData.password);\n        \n        // Navigate to appropriate dashboard based on role\n        navigate('/dashboard');\n      } catch (loginError) {\n        console.error('Auto-login error:', loginError);\n        // Account was created but auto-login failed, redirect to login page with success message\n        navigate('/login', { \n          state: { \n            message: t('techSignup.errors.accountCreated'),\n            email: invitationData.email \n          }\n        });\n      }\n\n    } catch (error) {\n      console.error('Signup error:', error);\n      setSubmitError(error.message || t('techSignup.errors.signupFailed'));\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Render loading state\n  if (isValidatingToken) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center px-4\">\n        <div className=\"bg-gray-800 rounded-lg shadow-xl p-8 w-full max-w-md\">\n          <div className=\"text-center\">\n            <LoadingSpinner size=\"lg\" variant=\"primary\" />\n            <h2 className=\"mt-4 text-xl font-semibold text-white\">\n              {t('techSignup.validatingInvitation')}\n            </h2>\n            <p className=\"mt-2 text-gray-400\">\n              {t('techSignup.pleaseWait')}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state for invalid token\n  if (tokenError) {\n    return (\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center px-4\">\n        <div className=\"bg-gray-800 rounded-lg shadow-xl p-8 w-full max-w-md\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4\">\n              <svg className=\"h-6 w-6 text-red-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 19.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <h2 className=\"text-xl font-semibold text-white mb-2\">\n              {t('techSignup.invalidInvitation')}\n            </h2>\n            <p className=\"text-gray-400 mb-6\">\n              {tokenError}\n            </p>\n            <Button\n              onClick={() => navigate('/')}\n              variant=\"primary\"\n              className=\"w-full\"\n            >\n              {t('common.goHome')}\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render signup form\n  return (\n    <div className=\"min-h-screen bg-gray-900 flex items-center justify-center px-4\">\n      <div className=\"bg-gray-800 rounded-lg shadow-xl p-8 w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-2xl font-bold text-white mb-2\">\n            {t('techSignup.title')}\n          </h1>\n          <p className=\"text-gray-400\">\n            {t('techSignup.subtitle')}\n          </p>\n        </div>\n\n        {/* Invitation Info */}\n        {invitationData && (\n          <div className=\"bg-gray-700 rounded-lg p-4 mb-6\">\n            <h3 className=\"text-sm font-medium text-gray-300 mb-2\">\n              {t('techSignup.invitationDetails')}\n            </h3>\n            <div className=\"space-y-1 text-sm\">\n              <p className=\"text-white\">\n                <span className=\"text-gray-400\">{t('common.email')}:</span> {invitationData.email}\n              </p>\n              {invitationData.job_type && (\n                <p className=\"text-white\">\n                  <span className=\"text-gray-400\">{t('common.jobType')}:</span> {invitationData.job_type}\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Signup Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Full Name */}\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n              {t('common.fullName')} *\n            </label>\n            <Input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              value={formData.name}\n              onChange={handleInputChange}\n              placeholder={t('techSignup.placeholders.fullName')}\n              error={errors.name}\n              required\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Password */}\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n              {t('common.password')} *\n            </label>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              value={formData.password}\n              onChange={handleInputChange}\n              placeholder={t('techSignup.placeholders.password')}\n              error={errors.password}\n              required\n              className=\"w-full\"\n            />\n            <p className=\"mt-1 text-xs text-gray-400\">\n              {t('validation.passwordRequirements')}\n            </p>\n          </div>\n\n          {/* Confirm Password */}\n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n              {t('common.confirmPassword')} *\n            </label>\n            <Input\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              type=\"password\"\n              value={formData.confirmPassword}\n              onChange={handleInputChange}\n              placeholder={t('techSignup.placeholders.confirmPassword')}\n              error={errors.confirmPassword}\n              required\n              className=\"w-full\"\n            />\n          </div>\n\n          {/* Submit Error */}\n          {submitError && (\n            <div className=\"bg-red-900/50 border border-red-500 rounded-lg p-3\">\n              <p className=\"text-red-200 text-sm\">{submitError}</p>\n            </div>\n          )}\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            variant=\"primary\"\n            disabled={isSubmitting}\n            className=\"w-full\"\n          >\n            {isSubmitting ? (\n              <div className=\"flex items-center justify-center\">\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                {t('techSignup.creating')}\n              </div>\n            ) : (\n              t('techSignup.createAccount')\n            )}\n          </Button>\n        </form>\n\n        {/* Footer */}\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-gray-400\">\n            {t('techSignup.footer')}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TechnicianSignupPage;\n","import React, { memo } from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\n\r\n/**\r\n * Language Toggle component\r\n * Provides a button to switch between English and Spanish\r\n */\r\nconst LanguageToggle = () => {\r\n  const { language, toggleLanguage } = useLanguage();\r\n  \r\n  // Determine which language to show in the toggle button (opposite of current)\r\n  const targetLanguage = language === 'en' ? 'Español' : 'English';\r\n  const instructionText = language === 'es' ? 'click for' : 'haga clic para';\r\n  \r\n  return (\r\n    <button\r\n      onClick={toggleLanguage}\r\n      className=\"absolute top-0 right-0 m-4 px-3 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-md transition-colors flex items-center focus:outline-none focus:ring-2 focus:ring-orange-700\"\r\n      aria-label={`${instructionText} ${targetLanguage}`}\r\n      title={`${instructionText} ${targetLanguage}`}\r\n      tabIndex={0}\r\n    >\r\n      <span className=\"text-xs italic text-white mr-1\">{instructionText}</span>\r\n      <span>{targetLanguage}</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default memo(LanguageToggle);\r\n","import React, { useState } from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { Link, useNavigate } from 'react-router-dom';\n\n/**\n * Login Form component\n * Handles user authentication\n */\nconst LoginForm = () => {\n  const { t } = useLanguage();\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  \n  // Error and loading states\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState(null);\n  \n  // Handle input change\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear field-specific error when user types\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n  \n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n    \n    // Email validation\n    if (!formData.email.trim()) {\n      newErrors.email = t('validation.emailRequired');\n    }\n    \n    // Password validation\n    if (!formData.password) {\n      newErrors.password = t('validation.passwordRequired');\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Validate form\n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setSubmitError(null);\n    \n    try {\n      // Login user\n      const result = await login(formData.email, formData.password);\n      \n      if (result.success) {\n        // Regular user flow - redirect based on role\n        // Use the user data returned from the login function\n        const userData = result.user;\n        \n        if (userData && (userData.role === 'manager' || userData.role === 'admin')) {\n          navigate('/manager-dashboard');\n        } else {\n          navigate('/dashboard');\n        }\n      } else {\n        setSubmitError(result.error);\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setSubmitError(t('errors.loginFailed'));\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className=\"max-w-md mx-auto bg-slate-800 rounded-lg shadow-lg p-8\">\n      <h2 className=\"text-2xl font-bold text-center mb-6\">\n        {t('login.title')}\n      </h2>\n      \n      {submitError && (\n        <div className=\"bg-red-500 bg-opacity-20 border border-red-500 text-red-500 px-4 py-3 rounded mb-4\">\n          {submitError}\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Email Field */}\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('login.email')}\n          </label>\n          <input\n            type=\"text\" /* Changed from type=\"email\" to type=\"text\" to allow non-email usernames */\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.email ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n            placeholder=\"Email or Admin Username\" /* Updated placeholder */\n          />\n          {errors.email && <p className=\"mt-1 text-sm text-red-500\">{errors.email}</p>}\n        </div>\n        \n        {/* Password Field */}\n        <div>\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('login.password')}\n          </label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.password ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.password && <p className=\"mt-1 text-sm text-red-500\">{errors.password}</p>}\n        </div>\n        \n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isSubmitting ? t('common.submitting') : t('login.signIn')}\n        </button>\n      </form>\n      \n      <div className=\"mt-6 text-center\">\n        <p className=\"text-gray-400 text-sm mb-2\">\n          {t('login.noAccount')}\n        </p>\n        <Link to=\"/signup\" className=\"text-orange-500 hover:text-orange-400 font-medium\">\n          {t('login.createAccount')}\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\r\nimport { useLanguage } from '../context/LanguageContext';\r\nimport LoginForm from './LoginForm';\r\nimport LanguageToggle from './LanguageToggle';\r\nimport { QuestionMarkCircleIcon } from '@heroicons/react/24/outline';\r\n\r\n/**\r\n * Login Page component\r\n * Displays the login form with appropriate context\r\n */\r\nconst LoginPage = () => {\r\n  const { t, language } = useLanguage();\r\n  \r\n  // Handle help button click (placeholder for future functionality)\r\n  const handleHelpClick = () => {\r\n    console.log('Help button clicked');\r\n    // Future functionality will be added here\r\n  };\r\n  \r\n  return (\r\n    <div className=\"min-h-screen bg-slate-900 py-12 px-4 relative\">\r\n      {/* Language Toggle */}\r\n      <div className=\"h-14 relative\">\r\n        <LanguageToggle />\r\n      </div>\r\n      <div className=\"max-w-md mx-auto mb-8\">\r\n        <h1 className=\"text-3xl font-bold text-center text-white mb-2\">\r\n          {t('login.title')}\r\n        </h1>\r\n        <p className=\"text-gray-400 text-center\">\r\n          {t('login.description')}\r\n        </p>\r\n      </div>\r\n      \r\n      <LoginForm />\r\n      \r\n      {/* Need Help button */}\r\n      <div className=\"fixed bottom-4 right-4 z-20\">\r\n        <button\r\n          onClick={handleHelpClick}\r\n          className=\"flex items-center space-x-2 bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-full transition-colors shadow-lg\"\r\n          aria-label=\"Need Help\"\r\n        >\r\n          <QuestionMarkCircleIcon className=\"h-5 w-5 text-white\" />\r\n          <span className=\"text-sm\">\r\n            {language === 'en' ? 'Need Help' : '¿Necesita Ayuda?'}\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useRef } from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport { useAuth } from '../context/AuthContext';\nimport { Link, useNavigate } from 'react-router-dom';\n\n/**\n * Manager Signup Form component\n * Handles registration for manager users with company logo upload\n */\nconst ManagerSignupForm = () => {\n  const { t } = useLanguage();\n  const { register, uploadLogo } = useAuth();\n  const navigate = useNavigate();\n  const fileInputRef = useRef(null);\n  \n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    company_name: '',\n    password: '',\n    confirmPassword: '',\n  });\n  \n  // Logo state\n  const [logo, setLogo] = useState(null);\n  const [logoPreview, setLogoPreview] = useState(null);\n  \n  // Error and loading states\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState(null);\n  \n  // Handle input change\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear field-specific error when user types\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n  \n  // Handle logo file selection\n  const handleLogoChange = (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\n    if (!validTypes.includes(file.type)) {\n      setErrors(prev => ({ \n        ...prev, \n        logo: t('validation.invalidFileType') \n      }));\n      return;\n    }\n    \n    // Validate file size (max 2MB)\n    if (file.size > 2 * 1024 * 1024) {\n      setErrors(prev => ({ \n        ...prev, \n        logo: t('validation.fileTooLarge') \n      }));\n      return;\n    }\n    \n    // Set logo file and create preview\n    setLogo(file);\n    setLogoPreview(URL.createObjectURL(file));\n    \n    // Clear logo error\n    if (errors.logo) {\n      setErrors(prev => ({ ...prev, logo: null }));\n    }\n  };\n  \n  // Clear logo selection\n  const handleClearLogo = () => {\n    setLogo(null);\n    setLogoPreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  \n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n    \n    // Name validation\n    if (!formData.name.trim()) {\n      newErrors.name = t('validation.nameRequired');\n    }\n    \n    // Email validation\n    if (!formData.email.trim()) {\n      newErrors.email = t('validation.emailRequired');\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = t('validation.emailInvalid');\n    }\n    \n    // Company name validation\n    if (!formData.company_name.trim()) {\n      newErrors.company_name = t('validation.companyNameRequired');\n    }\n    \n    // Password validation\n    if (!formData.password) {\n      newErrors.password = t('validation.passwordRequired');\n    } else if (formData.password.length < 8) {\n      newErrors.password = t('validation.passwordLength');\n    }\n    \n    // Confirm password validation\n    if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = t('validation.passwordsDoNotMatch');\n    }\n    \n    // Logo validation (optional for initial signup)\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Validate form\n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setSubmitError(null);\n    \n    try {\n      // Register user\n      const result = await register({\n        name: formData.name,\n        email: formData.email,\n        password: formData.password,\n        role: 'manager',\n        company_name: formData.company_name\n      });\n      \n      if (result.success) {\n        console.log('Manager signup successful, user data:', result.user);\n        \n        // Upload logo if provided\n        if (logo) {\n          const logoResult = await uploadLogo(logo);\n          if (!logoResult.success) {\n            console.warn('Logo upload failed:', logoResult.error);\n            // Continue anyway as this is not critical\n          }\n        }\n        \n        // Wait a moment for authentication state to be fully set\n        setTimeout(() => {\n          console.log('Redirecting to manager dashboard...');\n          navigate('/manager-dashboard');\n        }, 100);\n      } else {\n        setSubmitError(result.error);\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      setSubmitError(t('errors.registrationFailed'));\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className=\"max-w-md mx-auto bg-slate-800 rounded-lg shadow-lg p-8\">\n      <h2 className=\"text-2xl font-bold text-center mb-6\">\n        {t('signup.managerSignup')}\n      </h2>\n      \n      {submitError && (\n        <div className=\"bg-red-500 bg-opacity-20 border border-red-500 text-red-500 px-4 py-3 rounded mb-4\">\n          {submitError}\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Name Field */}\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.name')} *\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.name ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.name && <p className=\"mt-1 text-sm text-red-500\">{errors.name}</p>}\n        </div>\n        \n        {/* Email Field */}\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.email')} *\n          </label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.email ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.email && <p className=\"mt-1 text-sm text-red-500\">{errors.email}</p>}\n        </div>\n        \n        {/* Company Name Field */}\n        <div>\n          <label htmlFor=\"company_name\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.company')} *\n          </label>\n          <input\n            type=\"text\"\n            id=\"company_name\"\n            name=\"company_name\"\n            value={formData.company_name}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.company_name ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.company_name && <p className=\"mt-1 text-sm text-red-500\">{errors.company_name}</p>}\n        </div>\n        \n        {/* Logo Upload Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.companyLogo')}\n          </label>\n          <div className={`border-2 border-dashed rounded-lg p-4 ${errors.logo ? 'border-red-500' : 'border-gray-600'} hover:border-orange-500 transition-colors`}>\n            {logoPreview ? (\n              <div className=\"flex flex-col items-center\">\n                <img \n                  src={logoPreview} \n                  alt=\"Company logo preview\" \n                  className=\"max-h-32 max-w-full mb-2 rounded\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={handleClearLogo}\n                  className=\"text-sm text-red-500 hover:text-red-400\"\n                >\n                  {t('common.remove')}\n                </button>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                </svg>\n                <p className=\"mt-1 text-sm text-gray-400\">\n                  {t('signup.dragDropOrClick')}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {t('signup.logoRequirements')}\n                </p>\n                <input\n                  type=\"file\"\n                  id=\"logo\"\n                  name=\"logo\"\n                  accept=\"image/jpeg,image/png,image/gif\"\n                  onChange={handleLogoChange}\n                  ref={fileInputRef}\n                  className=\"hidden\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"mt-2 inline-flex items-center px-3 py-1 border border-gray-600 text-sm leading-4 font-medium rounded-md text-gray-300 bg-slate-700 hover:bg-slate-600 transition-colors\"\n                >\n                  {t('signup.selectFile')}\n                </button>\n              </div>\n            )}\n          </div>\n          {errors.logo && <p className=\"mt-1 text-sm text-red-500\">{errors.logo}</p>}\n        </div>\n        \n        {/* Password Field */}\n        <div>\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.password')} * <span className=\"text-gray-400 font-normal\">(minimum of 8 characters required)</span>\n          </label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.password ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.password && <p className=\"mt-1 text-sm text-red-500\">{errors.password}</p>}\n        </div>\n        \n        {/* Confirm Password Field */}\n        <div>\n          <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n            {t('signup.confirmPassword')} *\n          </label>\n          <input\n            type=\"password\"\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            value={formData.confirmPassword}\n            onChange={handleChange}\n            className={`w-full px-4 py-2 bg-slate-700 border ${errors.confirmPassword ? 'border-red-500' : 'border-gray-600'} rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 text-white placeholder-gray-400`}\n          />\n          {errors.confirmPassword && <p className=\"mt-1 text-sm text-red-500\">{errors.confirmPassword}</p>}\n        </div>\n        \n        {/* Submit Button */}\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-md transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isSubmitting ? t('common.submitting') : 'Create Account'}\n        </button>\n      </form>\n      \n      <div className=\"mt-6 text-center\">\n        <Link to=\"/signup/role\" className=\"text-orange-500 hover:text-orange-400 font-medium\">\n          &larr; {t('common.back')}\n        </Link>\n      </div>\n      \n      <div className=\"mt-4 text-center\">\n        <p className=\"text-gray-400 text-sm mb-2\">\n          {t('signup.alreadyHaveAccount')}\n        </p>\n        <Link to=\"/login\" className=\"text-orange-500 hover:text-orange-400 font-medium\">\n          {t('signup.loginInstead')}\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ManagerSignupForm;\n","import React from 'react';\nimport { useLanguage } from '../context/LanguageContext';\nimport ManagerSignupForm from './ManagerSignupForm';\nimport LanguageToggle from './LanguageToggle';\n\n/**\n * Signup Page component\n * As of June 11, 2025: Only managers may self-register. \n * Technicians are invited/onboarded by their manager via the dashboard.\n * \n * This page now directly shows the Manager signup form without role selection.\n * The role selection step has been removed to prevent technician self-registration.\n */\nconst SignupPage = () => {\n  const { t } = useLanguage();\n  \n  return (\n    <div className=\"min-h-screen bg-slate-900 py-12 px-4 relative\">\n      {/* Language Toggle */}\n      <div className=\"h-14 relative\">\n        <LanguageToggle />\n      </div>\n      <div className=\"max-w-md mx-auto mb-8\">\n        <h1 className=\"text-3xl font-bold text-center text-white mb-2\">\n          {t('signup.managerTitle')}\n        </h1>\n        <p className=\"text-gray-400 text-center mb-4\">\n          {t('signup.managerOnlyDescription')}\n        </p>\n        <div className=\"bg-blue-900/30 border border-blue-500/50 rounded-lg p-4 mb-4\">\n          <p className=\"text-blue-200 text-sm text-center\">\n            {t('signup.technicianNote')}\n          </p>\n        </div>\n      </div>\n      \n      <ManagerSignupForm />\n    </div>\n  );\n};\n\nexport default SignupPage;\n"],"names":["TechnicianSignupPage","t","useLanguage","login","useAuth","navigate","useNavigate","searchParams","useSearchParams","token","get","invitationData","setInvitationData","useState","isValidatingToken","setIsValidatingToken","tokenError","setTokenError","isSubmitting","setIsSubmitting","submitError","setSubmitError","formData","setFormData","name","password","confirmPassword","errors","setErrors","useEffect","validateInvitationToken","async","apiUrl","process","response","fetch","concat","ok","Error","status","statusText","result","json","valid","message","invitation","prev","_objectSpread","error","console","handleInputChange","e","value","target","_jsx","className","children","_jsxs","LoadingSpinner","size","variant","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Button","onClick","email","job_type","onSubmit","preventDefault","validateForm","newErrors","trim","length","Object","keys","method","headers","body","JSON","stringify","errorData","catch","detail","loginError","state","htmlFor","Input","id","type","onChange","placeholder","required","disabled","LanguageToggle","language","toggleLanguage","targetLanguage","instructionText","title","tabIndex","memo","LoginForm","handleChange","success","userData","user","role","Link","to","LoginPage","handleHelpClick","log","QuestionMarkCircleIcon","ManagerSignupForm","register","uploadLogo","fileInputRef","useRef","company_name","logo","setLogo","logoPreview","setLogoPreview","test","logoResult","warn","setTimeout","src","alt","handleClearLogo","current","xmlns","accept","file","files","includes","URL","createObjectURL","ref","_fileInputRef$current","click","SignupPage"],"sourceRoot":""}