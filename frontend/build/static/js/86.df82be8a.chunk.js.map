{"version":3,"file":"static/js/86.df82be8a.chunk.js","mappings":"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","sources":["utils/validators.js","components/ui/EnhancedInput.js","components/ui/EnhancedSelect.js","components/ui/DateInput.js","components/tickets/forms/BaseJobTicketForm.js","components/tickets/forms/GenericJobTicketForm.js","components/tickets/forms/PumpTechTicketForm.js","components/tickets/forms/DriverTicketForm.js","components/tickets/forms/RoustaboutTicketForm.js","components/tickets/forms/ElectricianTicketForm.js","components/tickets/forms/PipelineOperatorTicketForm.js","components/tickets/forms/TruckDriverTicketForm.js","components/tickets/forms/OtherTicketForm.js"],"sourcesContent":["/**\r\n * Utility functions for form validation\r\n */\r\n\r\n/**\r\n * Validates that a string is not empty\r\n * @param {string} value - The value to check\r\n * @returns {boolean} True if value is not empty\r\n */\r\nexport const isNotEmpty = (value) => {\r\n  return value !== undefined && value !== null && value.trim() !== '';\r\n};\r\n\r\n/**\r\n * Validates that a number is positive\r\n * @param {number} value - The value to check\r\n * @returns {boolean} True if value is a positive number\r\n */\r\nexport const isPositiveNumber = (value) => {\r\n  const num = parseFloat(value);\r\n  return !isNaN(num) && num > 0;\r\n};\r\n\r\n/**\r\n * Validates that a date is not in the future\r\n * @param {string} dateString - Date string in YYYY-MM-DD format\r\n * @returns {boolean} True if date is valid and not in the future\r\n */\r\nexport const isValidPastOrPresentDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  \r\n  const inputDate = new Date(dateString);\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  return inputDate instanceof Date && !isNaN(inputDate) && inputDate <= today;\r\n};\r\n\r\n/**\r\n * Validates a time string in HH:MM format\r\n * @param {string} timeString - Time string in HH:MM format\r\n * @returns {boolean} True if time string is valid\r\n */\r\nexport const isValidTimeFormat = (timeString) => {\r\n  if (!timeString) return false;\r\n  \r\n  const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;\r\n  return timeRegex.test(timeString);\r\n};\r\n\r\n/**\r\n * Calculates hours between two time strings\r\n * @param {string} startTime - Start time in HH:MM format\r\n * @param {string} endTime - End time in HH:MM format\r\n * @returns {number} Hours difference or null if invalid input\r\n */\r\nexport const calculateHoursBetween = (startTime, endTime) => {\r\n  if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {\r\n    return null;\r\n  }\r\n  \r\n  const [startHour, startMinute] = startTime.split(':').map(Number);\r\n  const [endHour, endMinute] = endTime.split(':').map(Number);\r\n  \r\n  let hoursDiff = endHour - startHour;\r\n  let minutesDiff = endMinute - startMinute;\r\n  \r\n  if (minutesDiff < 0) {\r\n    hoursDiff--;\r\n    minutesDiff += 60;\r\n  }\r\n  \r\n  if (hoursDiff < 0) {\r\n    hoursDiff += 24; // Assuming work can span overnight\r\n  }\r\n  \r\n  return parseFloat((hoursDiff + (minutesDiff / 60)).toFixed(2));\r\n};\r\n\r\n/**\r\n * Validates an email address format\r\n * @param {string} email - The email address to validate\r\n * @returns {boolean} True if email format is valid\r\n */\r\nexport const isValidEmail = (email) => {\r\n  if (!email) return false;\r\n  \r\n  // Basic email validation regex\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validates password strength\r\n * @param {string} password - The password to validate\r\n * @returns {object} Validation result with isValid flag and message\r\n */\r\nexport const validatePassword = (password) => {\r\n  if (!password) {\r\n    return { isValid: false, message: 'Password is required' };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\r\n  }\r\n  \r\n  // Additional password strength checks could be added here\r\n  // e.g., requiring uppercase, lowercase, numbers, special characters\r\n  \r\n  return { isValid: true, message: 'Password is valid' };\r\n};\r\n\r\n/**\r\n * Validates that two passwords match\r\n * @param {string} password - The original password\r\n * @param {string} confirmPassword - The confirmation password\r\n * @returns {boolean} True if passwords match\r\n */\r\nexport const passwordsMatch = (password, confirmPassword) => {\r\n  return password === confirmPassword;\r\n};\r\n\r\n/**\r\n * Validates a file type against allowed types\r\n * @param {File} file - The file to validate\r\n * @param {Array} allowedTypes - Array of allowed MIME types\r\n * @returns {boolean} True if file type is allowed\r\n */\r\nexport const isValidFileType = (file, allowedTypes) => {\r\n  if (!file || !allowedTypes || !allowedTypes.length) return false;\r\n  return allowedTypes.includes(file.type);\r\n};\r\n\r\n/**\r\n * Validates file size against maximum size\r\n * @param {File} file - The file to validate\r\n * @param {number} maxSizeInBytes - Maximum allowed size in bytes\r\n * @returns {boolean} True if file size is within limit\r\n */\r\nexport const isValidFileSize = (file, maxSizeInBytes) => {\r\n  if (!file || !maxSizeInBytes) return false;\r\n  return file.size <= maxSizeInBytes;\r\n};\r\n","import React from 'react';\n\n/**\n * EnhancedInput - A simplified input component with improved visibility\n * \n * @param {Object} props - Component props\n * @param {string} props.id - Input ID\n * @param {string} props.name - Input name\n * @param {string} props.type - Input type (text, email, password, etc.)\n * @param {string} props.label - Input label\n * @param {string} props.placeholder - Input placeholder\n * @param {boolean} props.required - Whether input is required\n * @param {boolean} props.disabled - Whether input is disabled\n * @param {boolean} props.readOnly - Whether input is read-only\n * @param {string} props.error - Error message\n * @param {Object} props.register - React Hook Form register function\n */\nconst EnhancedInput = ({\n  id,\n  name,\n  type = 'text',\n  label,\n  placeholder,\n  required = false,\n  disabled = false,\n  readOnly = false,\n  error,\n  register,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div className=\"mb-4\">\n      {/* Label with improved visibility */}\n      {label && (\n        <label \n          htmlFor={id} \n          className=\"block text-sm font-medium text-white mb-1\" // Changed from text-gray-300 to text-white for better visibility\n        >\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      )}\n      \n      {/* Input field */}\n      <div className=\"relative\">\n        <input\n          id={id}\n          name={name}\n          type={type}\n          className={`\n            bg-gray-800 \n            block \n            w-full \n            rounded-md \n            border-2 \n            border-orange-400 \n            text-white \n            shadow-sm \n            focus:border-orange-500 \n            focus:ring-orange-500 \n            sm:text-sm\n            ${error ? 'border-red-500' : ''}\n            ${className}\n          `}\n          placeholder={placeholder}\n          disabled={disabled}\n          readOnly={readOnly}\n          autoComplete=\"off\"\n          {...(register && register(name))}\n          {...rest}\n        />\n      </div>\n      \n      {/* Error message */}\n      {error && (\n        <p className=\"mt-1 text-xs text-red-500\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedInput;\n","import React from 'react';\n\n/**\n * EnhancedSelect - A simplified select component with improved visibility\n * \n * @param {Object} props - Component props\n * @param {string} props.id - Select ID\n * @param {string} props.name - Select name\n * @param {string} props.label - Select label\n * @param {boolean} props.required - Whether select is required\n * @param {boolean} props.disabled - Whether select is disabled\n * @param {boolean} props.readOnly - Whether select is read-only\n * @param {string} props.error - Error message\n * @param {Object} props.register - React Hook Form register function\n * @param {React.ReactNode} props.children - Select options\n */\nconst EnhancedSelect = ({\n  id,\n  name,\n  label,\n  required = false,\n  disabled = false,\n  readOnly = false,\n  error,\n  register,\n  children,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div className=\"mb-4\">\n      {/* Label with improved visibility */}\n      {label && (\n        <label \n          htmlFor={id} \n          className=\"block text-sm font-medium text-white mb-1\" // Changed from text-gray-300 to text-white for better visibility\n        >\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      )}\n      \n      {/* Select field */}\n      <div className=\"relative\">\n        <select\n          id={id}\n          name={name}\n          className={`\n            bg-gray-800 \n            block \n            w-full \n            rounded-md \n            border-2 \n            border-orange-400 \n            text-white \n            shadow-sm \n            focus:border-orange-500 \n            focus:ring-orange-500 \n            sm:text-sm\n            ${error ? 'border-red-500' : ''}\n            ${className}\n          `}\n          disabled={disabled}\n          autoComplete=\"off\"\n          {...(register && register(name))}\n          {...rest}\n        >\n          {children}\n        </select>\n      </div>\n      \n      {/* Error message */}\n      {error && (\n        <p className=\"mt-1 text-xs text-red-500\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedSelect;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { CalendarIcon } from '@heroicons/react/24/outline';\nimport { useLanguage } from '../../context/LanguageContext';\n\n// Create a simplified version of the Input component for date input\nconst DateInputField = ({\n  id,\n  name,\n  label,\n  placeholder,\n  required = false,\n  disabled = false,\n  readOnly = false,\n  error,\n  value,\n  onChange,\n  onBlur,\n  onFocus,\n  suffix,\n  className = '',\n  ...rest\n}) => {\n  return (\n    <div>\n      {label && (\n        <label htmlFor={id} className=\"block text-sm font-medium text-white mb-1\">\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      )}\n      <div className=\"relative mt-1\">\n        <input\n          id={id}\n          name={name}\n          type=\"text\"\n          className={`bg-gray-800 block w-full rounded-md border-2 border-orange-400 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm ${className} ${error ? 'border-red-500' : ''}`}\n          placeholder={placeholder}\n          disabled={disabled}\n          readOnly={readOnly}\n          value={value || ''}\n          onChange={onChange}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          autoComplete=\"off\"\n          {...rest}\n        />\n        \n        {/* Suffix (calendar icon) */}\n        {suffix && (\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            {suffix}\n          </div>\n        )}\n      </div>\n      \n      {/* Error message */}\n      {error && (\n        <p className=\"mt-1 text-xs text-red-500\">{error}</p>\n      )}\n    </div>\n  );\n};\n\n/**\n * DateInput - A specialized input component for date selection\n * Supports both keyboard entry and calendar picker on desktop\n * Uses native date pickers on mobile with year locked to 2025\n * \n * @param {Object} props - Component props\n * @param {string} props.id - Input ID\n * @param {string} props.name - Input name\n * @param {string} props.label - Input label\n * @param {boolean} props.required - Whether input is required\n * @param {boolean} props.disabled - Whether input is disabled\n * @param {boolean} props.readOnly - Whether input is read-only\n * @param {string} props.error - Error message\n * @param {Object} props.register - React Hook Form register function\n * @param {Function} props.setValue - React Hook Form setValue function\n * @param {Function} props.onChange - Change handler function\n */\nconst DateInput = ({\n  id,\n  name,\n  label,\n  required = false,\n  disabled = false,\n  readOnly = false,\n  error,\n  register,\n  setValue,\n  onChange,\n  ...rest\n}) => {\n  const { t } = useLanguage();\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const calendarRef = useRef(null);\n  const inputRef = useRef(null);\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  \n  // Close calendar when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (calendarRef.current && !calendarRef.current.contains(event.target)) {\n        setShowCalendar(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  \n  // Handle date selection from calendar\n  const handleDateSelect = (e) => {\n    const date = e.target.value;\n    setSelectedDate(date);\n    setShowCalendar(false);\n    \n    // Format date for display (MM/DD/YYYY)\n    if (date) {\n      const [year, month, day] = date.split('-');\n      const formattedDate = `${month}/${day}/${year}`;\n      setInputValue(formattedDate);\n    }\n    \n    // Update form value if using React Hook Form\n    if (setValue) {\n      setValue(name, date, { shouldValidate: true });\n    }\n    \n    // Call custom onChange if provided\n    if (onChange) {\n      const event = {\n        target: {\n          name,\n          value: date\n        }\n      };\n      onChange(event);\n    }\n  };\n  \n  // Handle manual input\n  const handleInputChange = (e) => {\n    const value = e.target.value;\n    setInputValue(value);\n    \n    // Try to parse the date from MM/DD/YYYY format\n    if (value && value.length >= 8) {\n      const parts = value.split('/');\n      if (parts.length === 3) {\n        const month = parts[0].padStart(2, '0');\n        const day = parts[1].padStart(2, '0');\n        let year = parts[2];\n        \n        // Force year to be 2025\n        year = '2025';\n        \n        const isoDate = `${year}-${month}-${day}`;\n        setSelectedDate(isoDate);\n        \n        // Update form value\n        if (setValue) {\n          setValue(name, isoDate, { shouldValidate: true });\n        }\n      }\n    }\n  };\n  \n  // Toggle calendar visibility\n  const toggleCalendar = () => {\n    if (!disabled && !readOnly) {\n      setShowCalendar(!showCalendar);\n    }\n  };\n  \n  // Create a custom suffix with calendar icon\n  const calendarSuffix = (\n    <div \n      className=\"cursor-pointer\" \n      onClick={toggleCalendar}\n      aria-label=\"Open date picker\"\n    >\n      <CalendarIcon className=\"h-5 w-5 text-gray-400\" />\n    </div>\n  );\n  \n  // For mobile devices, use the native date picker with year locked to 2025\n  if (isMobile) {\n    return (\n      <div className=\"relative\">\n        <label htmlFor={id} className=\"block text-sm font-medium text-white mb-1\">\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n        <div className=\"mt-1 relative\">\n          <input\n            id={id}\n            name={name}\n            type=\"date\"\n            className={`bg-gray-800 block w-full rounded-md border-2 border-orange-400 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm ${error ? 'border-red-500' : ''}`}\n            disabled={disabled}\n            readOnly={readOnly}\n            autoComplete=\"off\"\n            onChange={(e) => {\n              // Extract date components\n              const dateValue = e.target.value;\n              if (dateValue) {\n                // Force year to be 2025 for mobile\n                const [year, month, day] = dateValue.split('-');\n                const fixedDate = `2025-${month}-${day}`;\n                \n                // Update with fixed date\n                if (setValue) {\n                  setValue(name, fixedDate, { shouldValidate: true });\n                }\n                \n                setSelectedDate(fixedDate);\n                \n                // Format for display\n                const formattedDate = `${month}/${day}/2025`;\n                setInputValue(formattedDate);\n                \n                // Call custom onChange if provided\n                if (onChange) {\n                  const modifiedEvent = {\n                    target: {\n                      name,\n                      value: fixedDate\n                    }\n                  };\n                  onChange(modifiedEvent);\n                }\n              }\n            }}\n            {...(register && register(name))}\n            {...rest}\n          />\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n            {calendarSuffix}\n          </div>\n        </div>\n        {error && <p className=\"mt-1 text-xs text-red-500\">{error}</p>}\n      </div>\n    );\n  }\n  \n  // For desktop, show calendar popup\n  return (\n    <div className=\"relative\">\n      <DateInputField\n        id={id}\n        name={name}\n        label={label}\n        required={required}\n        disabled={disabled}\n        readOnly={readOnly}\n        error={error}\n        value={inputValue}\n        onChange={handleInputChange}\n        suffix={calendarSuffix}\n        placeholder=\"MM/DD/YYYY\"\n        {...(register && { ...register(name) })}\n        {...rest}\n      />\n      \n      {showCalendar && (\n        <div \n          ref={calendarRef}\n          className=\"absolute z-10 mt-1 bg-gray-800 border border-gray-700 rounded-md shadow-lg p-4\"\n        >\n          <div className=\"text-white text-sm mb-2\">{t('jobTicket.selectDate') || 'Select a date'}</div>\n          <input\n            type=\"date\"\n            className=\"bg-gray-800 text-white border border-gray-700 rounded-md p-2\"\n            onChange={handleDateSelect}\n            // Lock year to 2025 for desktop calendar\n            min=\"2025-01-01\"\n            max=\"2025-12-31\"\n            defaultValue=\"2025-06-08\" // Set today's date as default\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DateInput;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { useTicket } from '../../../context/TicketContext';\nimport { useAuth } from '../../../context/AuthContext';\nimport { calculateHoursBetween } from '../../../utils/validators';\nimport { Card, Button, Form, LoadingSpinner } from '../../ui';\nimport EnhancedInput from '../../ui/EnhancedInput';\nimport EnhancedSelect from '../../ui/EnhancedSelect';\nimport DateInput from '../../ui/DateInput';\nimport { useDebounce } from '../../../hooks';\n\n/**\n * BaseJobTicketForm - Core form component that centralizes common job ticket functionality\n * \n * This component provides the foundation for all job ticket forms with:\n * - Common fields (date, company, customer, location, work hours, drive hours, description)\n * - Form state management via React Hook Form\n * - Time calculation logic for work and drive hours\n * - Draft saving functionality\n * - Form submission handling\n * - Common UI elements and layout\n * - Performance optimizations (memoization, debouncing, etc.)\n * \n * Job-specific forms should extend this component by:\n * 1. Importing and using it as a base\n * 2. Adding job-specific fields\n * 3. Extending the form data with job-specific values\n * 4. Customizing validation rules if needed\n */\n\n/**\n * Base Job Ticket Form Component\n * Provides common functionality for all job ticket forms\n */\nconst BaseJobTicketForm = ({ \n  children, \n  onSubmit, \n  readOnly = false, \n  draftData = null \n}) => {\n  const { t } = useLanguage();\n  const { formData, updateFormData, saveJobTicketAsDraft, submitJobTicket, isSubmitting, submitError, submitSuccess } = useTicket();\n  const { user } = useAuth();\n  \n  // Setup React Hook Form with memoized default values\n  const defaultValues = useMemo(() => draftData || formData || {}, [draftData, formData]);\n  \n  const navigate = useNavigate();\n\n  const { register, handleSubmit, control, setValue, watch, reset, formState: { errors } } = useForm({\n    defaultValues,\n    mode: 'onChange' // Validate on change for better UX\n  });\n\n  const resetForm = useCallback(() => {\n    reset();\n    updateFormData({});\n  }, [reset, updateFormData]);\n\n  // Watch time fields to calculate totals\n  const workStartTime = watch('workStartTime');\n  const workEndTime = watch('workEndTime');\n  const driveStartTime = watch('driveStartTime');\n  const driveEndTime = watch('driveEndTime');\n  \n  // Debounce time calculations to prevent excessive re-renders\n  const debouncedWorkStartTime = useDebounce(workStartTime, 300);\n  const debouncedWorkEndTime = useDebounce(workEndTime, 300);\n  const debouncedDriveStartTime = useDebounce(driveStartTime, 300);\n  const debouncedDriveEndTime = useDebounce(driveEndTime, 300);\n  \n  // Memoized calculation functions\n  const calculateWorkHours = useCallback(() => {\n    if (debouncedWorkStartTime && debouncedWorkEndTime) {\n      return calculateHoursBetween(debouncedWorkStartTime, debouncedWorkEndTime);\n    }\n    return null;\n  }, [debouncedWorkStartTime, debouncedWorkEndTime]);\n  \n  const calculateDriveHours = useCallback(() => {\n    if (debouncedDriveStartTime && debouncedDriveEndTime) {\n      return calculateHoursBetween(debouncedDriveStartTime, debouncedDriveEndTime);\n    }\n    return null;\n  }, [debouncedDriveStartTime, debouncedDriveEndTime]);\n  \n  // Update total hours when start/end times change - with debounced values\n  useEffect(() => {\n    const hours = calculateWorkHours();\n    if (hours !== null) {\n      setValue('workTotalHours', hours);\n    }\n  }, [calculateWorkHours, setValue]);\n  \n  useEffect(() => {\n    const hours = calculateDriveHours();\n    if (hours !== null) {\n      setValue('driveTotalHours', hours);\n    }\n  }, [calculateDriveHours, setValue]);\n  \n  // Auto-save form data when fields change - with debouncing\n  useEffect(() => {\n    const subscription = watch((value, { name, type }) => {\n      if (type === 'change' && name) {\n        // Use a timeout to debounce updates to form data\n        const timeoutId = setTimeout(() => {\n          updateFormData(name, value[name]);\n        }, 500);\n        \n        return () => clearTimeout(timeoutId);\n      }\n    });\n    \n    return () => subscription.unsubscribe();\n  }, [watch, updateFormData]);\n  \n  // Form state - use local state for UI feedback since context state might be shared\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [submissionProgress, setSubmissionProgress] = useState(0);\n  const [isSubmittingLocal, setIsSubmittingLocal] = useState(false);\n\n  useEffect(() => {\n    if (submitSuccess) {\n      setShowSuccessMessage(true);\n      setTimeout(() => setShowSuccessMessage(false), 5000);\n    }\n  }, [submitSuccess]);\n  \n  useEffect(() => {\n    if (submitError) {\n      setShowErrorMessage(true);\n      setTimeout(() => setShowErrorMessage(false), 5000);\n    }\n  }, [submitError]);\n  \n  // Handle form submission - memoized to prevent recreation\n  const handleFormSubmit = async (data) => {\n    setIsSubmittingLocal(true);\n    setShowSuccessMessage(false);\n    setShowErrorMessage(false);\n    setErrorMessage('');\n    \n    try {\n      // Submit to API first - only save as draft if successful\n      const result = await submitJobTicket(data, setSubmissionProgress);\n      \n      if (result.success) {\n        // Save as submitted ticket\n        const draftData = {\n          ...data,\n          status: 'submitted',\n          id: result.id || data.id || `ticket-${Date.now()}`\n        };\n        saveJobTicketAsDraft(draftData);\n        \n        setShowSuccessMessage(true);\n        resetForm();\n        \n        // Navigate to success page after delay\n        setTimeout(() => {\n          navigate('/ticket-submitted', { \n            state: { \n              ticketNumber: result.ticketNumber,\n              message: result.message\n            } \n          });\n        }, 1500);\n      } else {\n        // Show specific error message from API\n        setShowErrorMessage(true);\n        setErrorMessage(result.message || 'Failed to submit job ticket');\n        console.error('Submission failed:', result.error);\n      }\n    } catch (error) {\n      setShowErrorMessage(true);\n      setErrorMessage(error.message || 'An unexpected error occurred');\n      console.error('Error in form submission:', error);\n    } finally {\n      setIsSubmittingLocal(false);\n      setSubmissionProgress(0);\n    }\n  };\n  \n  // Pre-fill submittedBy field with user's name if available\n  useEffect(() => {\n    if (user?.name && !watch('submittedBy')) {\n      setValue('submittedBy', user.name);\n    }\n  }, [user, setValue, watch]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`BaseJobTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('base-job-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <Form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-8 max-w-3xl mx-auto\" autoComplete=\"off\" hideSubmitButton={true}>\n      {/* Job Date */}\n      <DateInput\n        label={t('jobTicket.date')}\n        id=\"jobDate\"\n        name=\"jobDate\"\n        register={register}\n        setValue={setValue}\n        rules={{ required: true }}\n        error={errors.jobDate ? t('validation.required') : undefined}\n        readOnly={readOnly}\n      />\n      \n      {/* Company Name */}\n      <EnhancedInput\n        label={t('jobTicket.companyName')}\n        type=\"text\"\n        id=\"companyName\"\n        name=\"companyName\"\n        register={register}\n        required={true}\n        error={errors.companyName && t('jobTicket.validation.companyRequired')}\n        readOnly={readOnly}\n      />\n      \n      {/* Customer Name */}\n      <EnhancedInput\n        label={t('jobTicket.customerName')}\n        type=\"text\"\n        id=\"customerName\"\n        name=\"customerName\"\n        register={register}\n        error={errors.customerName}\n        readOnly={readOnly}\n      />\n      \n      {/* Location */}\n      <EnhancedInput\n        label={t('jobTicket.location')}\n        type=\"text\"\n        id=\"location\"\n        name=\"location\"\n        register={register}\n        required={true}\n        error={errors.location && t('jobTicket.validation.locationRequired')}\n        readOnly={readOnly}\n      />\n      \n      {/* Work Type field removed to eliminate duplication */}\n      \n      {/* Equipment */}\n      <EnhancedInput\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        error={errors.equipment}\n        readOnly={readOnly}\n      />\n      \n      {/* Description of Work */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"workDescription\" className=\"block text-sm font-medium text-white mb-1\">\n          {t('jobTicket.workDescription')}\n          {<span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"workDescription\"\n            name=\"workDescription\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-2 border-orange-400 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            placeholder=\"Enter your work description here...\"\n            readOnly={readOnly}\n            {...register('workDescription', { required: true })}\n          />\n        </div>\n        {errors.workDescription && (\n          <p className=\"mt-1 text-xs text-red-500\">{t('jobTicket.validation.workDescriptionRequired')}</p>\n        )}\n      </div>\n      \n      {/* Work Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <EnhancedInput\n          label={t('jobTicket.workStartTime')}\n          type=\"time\"\n          id=\"workStartTime\"\n          name=\"workStartTime\"\n          register={register}\n          error={errors.workStartTime && t('jobTicket.validation.timeFormatInvalid')}\n          readOnly={readOnly}\n        />\n        <EnhancedInput\n          label={t('jobTicket.workEndTime')}\n          type=\"time\"\n          id=\"workEndTime\"\n          name=\"workEndTime\"\n          register={register}\n          error={errors.workEndTime && t('jobTicket.validation.timeFormatInvalid')}\n          readOnly={readOnly}\n        />\n        <EnhancedInput\n          label={t('jobTicket.workTotalTime')}\n          type=\"text\"\n          id=\"workTotalHours\"\n          name=\"workTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n      {/* Drive Hours */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <EnhancedInput\n          label={t('jobTicket.travelStartTime')}\n          type=\"time\"\n          id=\"driveStartTime\"\n          name=\"driveStartTime\"\n          register={register}\n          error={errors.driveStartTime && t('jobTicket.validation.timeFormatInvalid')}\n          readOnly={readOnly}\n        />\n        <EnhancedInput\n          label={t('jobTicket.travelEndTime')}\n          type=\"time\"\n          id=\"driveEndTime\"\n          name=\"driveEndTime\"\n          register={register}\n          error={errors.driveEndTime && t('jobTicket.validation.timeFormatInvalid')}\n          readOnly={readOnly}\n        />\n        <EnhancedInput\n          label={t('jobTicket.travelTotalTime')}\n          type=\"text\"\n          id=\"driveTotalHours\"\n          name=\"driveTotalHours\"\n          register={register}\n          readOnly={true}\n        />\n      </div>\n      \n\n      \n      {/* Submitted By field moved to bottom of form */}\n      \n      {/* Render children (job-specific fields) */}\n      {children}\n      \n      {/* Customer Signature (using original submittedBy field name for data consistency) */}\n      <div className=\"mt-6 mb-4\">\n        <EnhancedInput\n          label=\"Customer Signature\"\n          type=\"text\"\n          id=\"submittedBy\"\n          name=\"submittedBy\"\n          register={register}\n          error={errors.submittedBy}\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Status Messages */}\n      {showSuccessMessage && (\n        <Card className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.success')}!</strong>\n          <span className=\"block sm:inline\"> {t('jobTicket.submitted')}</span>\n        </Card>\n      )}\n      \n      {showErrorMessage && (\n        <Card className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\n          <strong className=\"font-bold\">{t('common.error')}!</strong>\n          <span className=\"block sm:inline\"> {errorMessage || t('jobTicket.submitError')}</span>\n        </Card>\n      )}\n      \n      {/* Submit Button */}\n      {!readOnly && (\n        <div className=\"pt-5\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmittingLocal}\n              variant={isSubmittingLocal ? \"disabled\" : \"success\"}\n              size=\"lg\"\n            >\n              {isSubmittingLocal ? (\n                <div className=\"flex items-center\">\n                  {t('jobTicket.submitting')}\n                  <LoadingSpinner size=\"sm\" className=\"ml-2\" />\n                </div>\n              ) : \"Submit Job Ticket!\"}\n            </Button>\n          </div>\n        </div>\n      )}\n    </Form>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(BaseJobTicketForm);\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Card } from '../../ui';\n\n/**\n * GenericJobTicketForm - Generic job ticket form for all users\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * This form is used as the default/fallback form when no job-specific form is available\n * or for admin users who don't have a specific job type.\n */\nconst GenericJobTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue, formState } = useForm({\n    defaultValues: draftData || {parts: []}\n  });\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  // Local state to track parts (for immediate UI updates)\n  const [partsArray, setPartsArray] = useState([]);\n  \n  // Get parts list based on current language - memoized to prevent recreation on each render\n  const partsList = useMemo(() => [\n    { value: 'partLubricant', label: t('parts.lubricant') },\n    { value: 'partPumpSeal', label: t('parts.pumpSeal') },\n    { value: 'partThrustChamber', label: t('parts.thrustChamber') },\n    { value: 'partVFDBreaker', label: t('parts.vfdBreaker') },\n    { value: 'partServiceKit', label: t('parts.serviceKit') },\n    { value: 'partOther', label: t('parts.other') },\n  ], [t]);\n  \n  // Initialize parts array from draft data if available\n  useEffect(() => {\n    if (draftData && draftData.parts) {\n      setPartsArray(draftData.parts);\n    }\n  }, [draftData]);\n\n  // Handle adding a part - memoized to prevent recreation on each render\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    // Find the selected part's label\n    const selectedPartObj = partsList.find(part => part.value === selectedPart);\n    if (!selectedPartObj) return;\n    \n    // Create new part object\n    const newPart = {\n      value: selectedPart,\n      label: selectedPartObj.label\n    };\n    \n    // Update local state for immediate UI update\n    setPartsArray(prevParts => [...prevParts, newPart]);\n    \n    // Update form state\n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, newPart]);\n    \n    // Reset selected part\n    setSelectedPart('');\n    \n    console.log('Part added:', newPart);\n    console.log('Current parts array:', [...currentParts, newPart]);\n  }, [selectedPart, partsList, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent recreation on each render\n  const handleRemovePart = useCallback((index) => {\n    // Update local state for immediate UI update\n    setPartsArray(prevParts => {\n      const updatedParts = [...prevParts];\n      updatedParts.splice(index, 1);\n      return updatedParts;\n    });\n    \n    // Update form state\n    const currentParts = watch('parts') || [];\n    const updatedFormParts = [...currentParts];\n    updatedFormParts.splice(index, 1);\n    setValue('parts', updatedFormParts);\n    \n    console.log('Part removed at index:', index);\n  }, [watch, setValue]);\n  \n  // Handle part selection change - memoized to prevent recreation on each render\n  const handlePartChange = useCallback((e) => {\n    const selectedValue = e.target.value;\n    setSelectedPart(selectedValue);\n  }, []);\n  \n  // Memoize the parts list rendering for better performance\n  const partsListItems = useMemo(() => {\n    console.log('Rendering parts list with:', partsArray); // Debug log to see what parts are available\n    \n    if (!partsArray || partsArray.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.parts.noParts')}\n        </li>\n      );\n    }\n    \n    return partsArray.map((part, index) => {\n      // Get the label from the part object\n      // Handle both new format (object with value and label) and old format (string)\n      let partLabel;\n      if (typeof part === 'object' && part.label) {\n        partLabel = part.label;\n      } else if (typeof part === 'string') {\n        // Handle old format where part is just a string\n        const partName = part.replace(/^part/, '').charAt(0).toLowerCase() + part.replace(/^part/, '').slice(1);\n        partLabel = t(`jobTicket.parts.${partName}`);\n      } else {\n        // Fallback\n        partLabel = String(part);\n      }\n      \n      return (\n        <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n          <span className=\"text-white\">{partLabel}</span>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemovePart(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </li>\n      );\n    });\n  }, [partsArray, t, readOnly, handleRemovePart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Generic form fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-2 border-orange-400 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"other\">{t('workTypes.other')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Parts Used */}\n      <div>\n        <label className=\"block text-base font-medium text-gray-300 mb-2 text-lg\">\n          {t('jobTicket.partsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedPart}\n                onChange={handlePartChange}\n                className=\"bg-gray-800 block w-full rounded-md border-2 border-orange-400 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"custom\"\n              size=\"md\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n              className=\"bg-orange-600 hover:bg-orange-700 text-black font-medium\"\n            >\n              {t('jobTicket.addPart')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"parts\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {partsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(GenericJobTicketForm);\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport { Card, Button } from '../../ui';\nimport EnhancedInput from '../../ui/EnhancedInput';\nimport EnhancedSelect from '../../ui/EnhancedSelect';\nimport BaseJobTicketForm from './BaseJobTicketForm';\n\n/**\n * PumpTechTicketForm - Job ticket form specialized for Pump Service Technicians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to pump technicians\n * - Equipment serviced field\n * - Parts used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized parts list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PumpTechTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue, formState } = useForm({\n    defaultValues: draftData || {parts: []}\n  });\n  \n  // State for selected part in dropdown\n  const [selectedPart, setSelectedPart] = useState('');\n  // Local state to track parts (for immediate UI updates)\n  const [partsArray, setPartsArray] = useState([]);\n  \n  // Get parts list based on current language - memoized to prevent recreation on each render\n  const partsList = useMemo(() => [\n    { value: 'partLubricant', label: t('parts.lubricant') },\n    { value: 'partPumpSeal', label: t('parts.pumpSeal') },\n    { value: 'partThrustChamber', label: t('parts.thrustChamber') },\n    { value: 'partVFDBreaker', label: t('parts.vfdBreaker') },\n    { value: 'partServiceKit', label: t('parts.serviceKit') },\n    { value: 'partOther', label: t('parts.other') },\n  ], [t]);\n  \n  // Initialize parts array from draft data if available\n  useEffect(() => {\n    if (draftData && draftData.parts) {\n      setPartsArray(draftData.parts);\n    }\n  }, [draftData]);\n\n  // Handle adding a part - memoized to prevent recreation on each render\n  const handleAddPart = useCallback(() => {\n    if (!selectedPart) return;\n    \n    // Find the selected part's label\n    const selectedPartObj = partsList.find(part => part.value === selectedPart);\n    if (!selectedPartObj) return;\n    \n    // Create new part object\n    const newPart = {\n      value: selectedPart,\n      label: selectedPartObj.label\n    };\n    \n    // Update local state for immediate UI update\n    setPartsArray(prevParts => [...prevParts, newPart]);\n    \n    // Update form state\n    const currentParts = watch('parts') || [];\n    setValue('parts', [...currentParts, newPart]);\n    \n    // Reset selected part\n    setSelectedPart('');\n    \n    console.log('Part added:', newPart);\n    console.log('Current parts array:', [...currentParts, newPart]);\n  }, [selectedPart, partsList, watch, setValue]);\n  \n  // Handle removing a part - memoized to prevent recreation on each render\n  const handleRemovePart = useCallback((index) => {\n    // Update local state for immediate UI update\n    setPartsArray(prevParts => {\n      const updatedParts = [...prevParts];\n      updatedParts.splice(index, 1);\n      return updatedParts;\n    });\n    \n    // Update form state\n    const currentParts = watch('parts') || [];\n    const updatedFormParts = [...currentParts];\n    updatedFormParts.splice(index, 1);\n    setValue('parts', updatedFormParts);\n    \n    console.log('Part removed at index:', index);\n  }, [watch, setValue]);\n  \n  // Handle part selection change - memoized to prevent recreation on each render\n  const handlePartChange = useCallback((e) => {\n    // Store both the value and label when selecting a part\n    const selectedValue = e.target.value;\n    const selectedOption = partsList.find(part => part.value === selectedValue);\n    setSelectedPart(selectedOption ? selectedValue : '');\n  }, [partsList]);\n  \n  // Memoize the parts list rendering for better performance\n  const partsListItems = useMemo(() => {\n    console.log('Rendering parts list with:', partsArray); // Debug log to see what parts are available\n    \n    if (!partsArray || partsArray.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.parts.noParts')}\n        </li>\n      );\n    }\n    \n    return partsArray.map((part, index) => {\n      // Get the label from the part object\n      // Handle both new format (object with value and label) and old format (string)\n      let partLabel;\n      if (typeof part === 'object' && part.label) {\n        partLabel = part.label;\n      } else if (typeof part === 'string') {\n        // Handle old format where part is just a string\n        const partName = part.replace(/^part/, '').charAt(0).toLowerCase() + part.replace(/^part/, '').slice(1);\n        partLabel = t(`jobTicket.parts.${partName}`);\n      } else {\n        // Fallback\n        partLabel = String(part);\n      }\n      \n      return (\n        <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n          <span className=\"text-white\">{partLabel}</span>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemovePart(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </li>\n      );\n    });\n  }, [partsArray, t, readOnly, handleRemovePart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pump-specific fields */}\n      <EnhancedSelect\n        id=\"workType\"\n        name=\"workType\"\n        label={t('jobTicket.workType')}\n        register={register}\n        disabled={readOnly}\n      >\n        <option value=\"\">{t('common.select')}</option>\n        <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n        <option value=\"repair\">{t('workTypes.repair')}</option>\n        <option value=\"installation\">{t('workTypes.installation')}</option>\n        <option value=\"inspection\">{t('workTypes.inspection')}</option>\n      </EnhancedSelect>\n      \n      {/* Equipment */}\n      <EnhancedInput\n        label={t('jobTicket.equipment')}\n        type=\"text\"\n        id=\"equipment\"\n        name=\"equipment\"\n        register={register}\n        placeholder={t('jobTicket.equipmentPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Parts Used */}\n      <div className=\"mb-4\">\n        <label className=\"block text-base font-medium text-white mb-2 text-lg\">\n          {t('jobTicket.parts.title')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <EnhancedSelect\n                id=\"partSelect\"\n                name=\"partSelect\"\n                value={selectedPart}\n                onChange={handlePartChange}\n              >\n                <option value=\"\">{t('jobTicket.parts.placeholder')}</option>\n                {partsList.map((part) => (\n                  <option key={part.value} value={part.value}>\n                    {part.label}\n                  </option>\n                ))}\n              </EnhancedSelect>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"custom\"\n              size=\"md\"\n              onClick={handleAddPart}\n              disabled={!selectedPart}\n              className=\"bg-orange-600 hover:bg-orange-700 text-black font-medium\"\n            >\n              {t('jobTicket.addPart')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"parts\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {partsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PumpTechTicketForm);\n","import React, { useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Input } from '../../ui';\n\n/**\n * DriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Vehicle type selection\n * - Mileage tracking\n * - Trip type (local/long haul)\n * \n * Performance optimizations:\n * - Memoized vehicle types\n * - React.memo for preventing unnecessary re-renders\n */\nconst DriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { register, formState: { errors } } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // Memoize vehicle types to prevent recreation on each render\n  const vehicleTypes = useMemo(() => [\n    { value: '', label: t('common.select') },\n    { value: 'truck', label: t('vehicleTypes.truck') || 'Truck' },\n    { value: 'van', label: t('vehicleTypes.van') || 'Van' },\n    { value: 'car', label: t('vehicleTypes.car') || 'Car' }\n  ], [t]);\n  \n  // Performance monitoring\n  const renderStart = useMemo(() => performance.now(), []);\n  \n  React.useEffect(() => {\n    const renderTime = performance.now() - renderStart;\n    console.log(`DriverTicketForm rendered in ${renderTime.toFixed(2)}ms`);\n    \n    return () => {\n      performance.clearMarks('driver-ticket-form-render');\n    };\n  }, [renderStart]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Driver-specific fields */}\n      <div>\n        <label htmlFor=\"vehicleType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.vehicleType') || 'Vehicle Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"vehicleType\"\n            name=\"vehicleType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('vehicleType', { required: true })}\n          >\n            {vehicleTypes.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          {errors.vehicleType && (\n            <p className=\"mt-1 text-sm text-red-500\">\n              {t('validation.required')}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      {/* Mileage */}\n      <Input\n        label={t('jobTicket.mileage') || 'Mileage'}\n        type=\"number\"\n        id=\"mileage\"\n        name=\"mileage\"\n        register={register}\n        rules={{ required: true, min: 0 }}\n        error={errors.mileage}\n        placeholder={t('jobTicket.mileagePlaceholder') || 'Enter total miles driven'}\n        readOnly={readOnly}\n      />\n      \n      {/* Trip Type */}\n      <div>\n        <label htmlFor=\"tripType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.tripType') || 'Trip Type'}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"tripType\"\n            name=\"tripType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('tripType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"local\">{t('tripTypes.local') || 'Local'}</option>\n            <option value=\"longHaul\">{t('tripTypes.longHaul') || 'Long Haul'}</option>\n          </select>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(DriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * RoustaboutTicketForm - Job ticket form specialized for Roustabout workers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to roustabouts\n * - Equipment used field\n * - Materials used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized materials list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst RoustaboutTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected material in dropdown\n  const [selectedMaterial, setSelectedMaterial] = useState('');\n  \n  // Get materials list based on current language - memoized to prevent recreation on each render\n  const materialsList = useMemo(() => [\n    { value: t('materials.pipe'), label: t('materials.pipe') },\n    { value: t('materials.fittings'), label: t('materials.fittings') },\n    { value: t('materials.valves'), label: t('materials.valves') },\n    { value: t('materials.tools'), label: t('materials.tools') },\n    { value: t('materials.safety'), label: t('materials.safety') },\n    { value: t('materials.other'), label: t('materials.other') },\n  ], [t]);\n  \n  // Handle adding a material - memoized to prevent recreation on each render\n  const handleAddMaterial = useCallback(() => {\n    if (!selectedMaterial) return;\n    \n    const currentMaterials = watch('materials') || [];\n    setValue('materials', [...currentMaterials, selectedMaterial]);\n    setSelectedMaterial('');\n  }, [selectedMaterial, watch, setValue]);\n  \n  // Handle removing a material - memoized to prevent recreation on each render\n  const handleRemoveMaterial = useCallback((index) => {\n    const currentMaterials = watch('materials') || [];\n    const updatedMaterials = [...currentMaterials];\n    updatedMaterials.splice(index, 1);\n    setValue('materials', updatedMaterials);\n  }, [watch, setValue]);\n  \n  // Handle material selection change - memoized to prevent recreation on each render\n  const handleMaterialChange = useCallback((e) => {\n    setSelectedMaterial(e.target.value);\n  }, []);\n  \n  // Memoize the materials list rendering for better performance\n  const materialsListItems = useMemo(() => {\n    const materials = watch('materials') || [];\n    \n    if (materials.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noMaterials')}\n        </li>\n      );\n    }\n    \n    return materials.map((material, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{material}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveMaterial(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveMaterial]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Roustabout-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"construction\">{t('workTypes.construction')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"pipeline\">{t('workTypes.pipeline')}</option>\n            <option value=\"wellService\">{t('workTypes.wellService')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Equipment Used */}\n      <Input\n        label={t('jobTicket.equipmentUsed')}\n        type=\"text\"\n        id=\"equipmentUsed\"\n        name=\"equipmentUsed\"\n        register={register}\n        placeholder={t('jobTicket.equipmentUsedPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Materials Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedMaterial}\n                onChange={handleMaterialChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {materialsList.map((material) => (\n                  <option key={material.value} value={material.value}>\n                    {material.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddMaterial}\n              disabled={!selectedMaterial}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"materials\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {materialsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Site Conditions */}\n      <div>\n        <label htmlFor=\"siteConditions\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.siteConditions')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"siteConditions\"\n            name=\"siteConditions\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.siteConditionsPlaceholder')}\n            {...register('siteConditions')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(RoustaboutTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * ElectricianTicketForm - Job ticket form specialized for Electricians\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Work type selection specific to electricians\n * - Voltage/amperage fields\n * - Components used management with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized components list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst ElectricianTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected component in dropdown\n  const [selectedComponent, setSelectedComponent] = useState('');\n  \n  // Get components list based on current language - memoized to prevent recreation on each render\n  const componentsList = useMemo(() => [\n    { value: t('components.wiring'), label: t('components.wiring') },\n    { value: t('components.breakers'), label: t('components.breakers') },\n    { value: t('components.switches'), label: t('components.switches') },\n    { value: t('components.panels'), label: t('components.panels') },\n    { value: t('components.motors'), label: t('components.motors') },\n    { value: t('components.other'), label: t('components.other') },\n  ], [t]);\n  \n  // Handle adding a component - memoized to prevent recreation on each render\n  const handleAddComponent = useCallback(() => {\n    if (!selectedComponent) return;\n    \n    const currentComponents = watch('components') || [];\n    setValue('components', [...currentComponents, selectedComponent]);\n    setSelectedComponent('');\n  }, [selectedComponent, watch, setValue]);\n  \n  // Handle removing a component - memoized to prevent recreation on each render\n  const handleRemoveComponent = useCallback((index) => {\n    const currentComponents = watch('components') || [];\n    const updatedComponents = [...currentComponents];\n    updatedComponents.splice(index, 1);\n    setValue('components', updatedComponents);\n  }, [watch, setValue]);\n  \n  // Handle component selection change - memoized to prevent recreation on each render\n  const handleComponentChange = useCallback((e) => {\n    setSelectedComponent(e.target.value);\n  }, []);\n  \n  // Memoize the components list rendering for better performance\n  const componentsListItems = useMemo(() => {\n    const components = watch('components') || [];\n    \n    if (components.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noComponents')}\n        </li>\n      );\n    }\n    \n    return components.map((component, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>{component}</span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveComponent(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveComponent]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Electrician-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"troubleshooting\">{t('workTypes.troubleshooting')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Voltage/Amperage */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.voltage')}\n          type=\"text\"\n          id=\"voltage\"\n          name=\"voltage\"\n          register={register}\n          placeholder=\"e.g., 120V, 240V, 480V\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.amperage')}\n          type=\"text\"\n          id=\"amperage\"\n          name=\"amperage\"\n          register={register}\n          placeholder=\"e.g., 15A, 20A, 30A\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Components Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.componentsUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <select\n                value={selectedComponent}\n                onChange={handleComponentChange}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"\">{t('common.select')}</option>\n                {componentsList.map((component) => (\n                  <option key={component.value} value={component.value}>\n                    {component.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddComponent}\n              disabled={!selectedComponent}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"components\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {componentsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Safety Measures */}\n      <div>\n        <label htmlFor=\"safetyMeasures\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.safetyMeasures')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"safetyMeasures\"\n            name=\"safetyMeasures\"\n            rows={3}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.safetyMeasuresPlaceholder')}\n            {...register('safetyMeasures')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(ElectricianTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * PipelineOperatorTicketForm - Job ticket form specialized for Pipeline Operators\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Pipeline-specific work types\n * - Pressure and flow readings\n * - Inspection points with add/remove functionality\n * \n * Performance optimizations:\n * - Memoized inspection points list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst PipelineOperatorTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for inspection point in form\n  const [inspectionPoint, setInspectionPoint] = useState('');\n  const [inspectionStatus, setInspectionStatus] = useState('pass');\n  const [inspectionNotes, setInspectionNotes] = useState('');\n  \n  // Handle adding an inspection point - memoized to prevent recreation on each render\n  const handleAddInspectionPoint = useCallback(() => {\n    if (!inspectionPoint) return;\n    \n    const currentInspections = watch('inspections') || [];\n    setValue('inspections', [\n      ...currentInspections, \n      { \n        point: inspectionPoint, \n        status: inspectionStatus,\n        notes: inspectionNotes\n      }\n    ]);\n    \n    // Reset form fields\n    setInspectionPoint('');\n    setInspectionStatus('pass');\n    setInspectionNotes('');\n  }, [inspectionPoint, inspectionStatus, inspectionNotes, watch, setValue]);\n  \n  // Handle removing an inspection point - memoized to prevent recreation on each render\n  const handleRemoveInspectionPoint = useCallback((index) => {\n    const currentInspections = watch('inspections') || [];\n    const updatedInspections = [...currentInspections];\n    updatedInspections.splice(index, 1);\n    setValue('inspections', updatedInspections);\n  }, [watch, setValue]);\n  \n  // Memoize the inspections list rendering for better performance\n  const inspectionListItems = useMemo(() => {\n    const inspections = watch('inspections') || [];\n    \n    if (inspections.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noInspections')}\n        </li>\n      );\n    }\n    \n    return inspections.map((inspection, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"font-medium\">{inspection.point}</span>\n            <span className={`ml-2 px-2 py-0.5 rounded-full text-xs ${\n              inspection.status === 'pass' \n                ? 'bg-green-200 text-green-800' \n                : 'bg-red-200 text-red-800'\n            }`}>\n              {inspection.status === 'pass' ? t('jobTicket.pass') : t('jobTicket.fail')}\n            </span>\n          </div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveInspectionPoint(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        {inspection.notes && (\n          <div className=\"mt-1 text-sm text-gray-300\">\n            {inspection.notes}\n          </div>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveInspectionPoint]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Pipeline-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"monitoring\">{t('workTypes.monitoring')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"emergency\">{t('workTypes.emergency')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Pressure and Flow Readings */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.pressureReading')}\n          type=\"text\"\n          id=\"pressureReading\"\n          name=\"pressureReading\"\n          register={register}\n          placeholder=\"e.g., 65 PSI\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.flowReading')}\n          type=\"text\"\n          id=\"flowReading\"\n          name=\"flowReading\"\n          register={register}\n          placeholder=\"e.g., 250 GPM\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Pipeline Section */}\n      <Input\n        label={t('jobTicket.pipelineSection')}\n        type=\"text\"\n        id=\"pipelineSection\"\n        name=\"pipelineSection\"\n        register={register}\n        placeholder={t('jobTicket.pipelineSectionPlaceholder')}\n        readOnly={readOnly}\n      />\n      \n      {/* Inspection Points */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.inspectionPoints')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div>\n              <label htmlFor=\"inspectionPoint\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.inspectionPoint')}\n              </label>\n              <input\n                type=\"text\"\n                id=\"inspectionPoint\"\n                value={inspectionPoint}\n                onChange={(e) => setInspectionPoint(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.inspectionPointPlaceholder')}\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionStatus\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.status')}\n              </label>\n              <select\n                id=\"inspectionStatus\"\n                value={inspectionStatus}\n                onChange={(e) => setInspectionStatus(e.target.value)}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n              >\n                <option value=\"pass\">{t('jobTicket.pass')}</option>\n                <option value=\"fail\">{t('jobTicket.fail')}</option>\n              </select>\n            </div>\n            \n            <div>\n              <label htmlFor=\"inspectionNotes\" className=\"block text-xs font-medium text-gray-400\">\n                {t('jobTicket.notes')}\n              </label>\n              <textarea\n                id=\"inspectionNotes\"\n                value={inspectionNotes}\n                onChange={(e) => setInspectionNotes(e.target.value)}\n                rows={2}\n                className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.notesPlaceholder')}\n              />\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddInspectionPoint}\n                disabled={!inspectionPoint}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"inspections\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {inspectionListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(PipelineOperatorTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * TruckDriverTicketForm - Job ticket form specialized for Truck Drivers\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Truck-specific work types\n * - Mileage tracking\n * - Load details with add/remove functionality\n * - Vehicle inspection checklist\n * \n * Performance optimizations:\n * - Memoized loads list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst TruckDriverTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for load details in form\n  const [loadDescription, setLoadDescription] = useState('');\n  const [loadWeight, setLoadWeight] = useState('');\n  const [loadDestination, setLoadDestination] = useState('');\n  \n  // Handle adding a load - memoized to prevent recreation on each render\n  const handleAddLoad = useCallback(() => {\n    if (!loadDescription || !loadDestination) return;\n    \n    const currentLoads = watch('loads') || [];\n    setValue('loads', [\n      ...currentLoads, \n      { \n        description: loadDescription, \n        weight: loadWeight,\n        destination: loadDestination\n      }\n    ]);\n    \n    // Reset form fields\n    setLoadDescription('');\n    setLoadWeight('');\n    setLoadDestination('');\n  }, [loadDescription, loadWeight, loadDestination, watch, setValue]);\n  \n  // Handle removing a load - memoized to prevent recreation on each render\n  const handleRemoveLoad = useCallback((index) => {\n    const currentLoads = watch('loads') || [];\n    const updatedLoads = [...currentLoads];\n    updatedLoads.splice(index, 1);\n    setValue('loads', updatedLoads);\n  }, [watch, setValue]);\n  \n  // Memoize the loads list rendering for better performance\n  const loadsListItems = useMemo(() => {\n    const loads = watch('loads') || [];\n    \n    if (loads.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noLoads')}\n        </li>\n      );\n    }\n    \n    return loads.map((load, index) => (\n      <li key={index} className=\"bg-gray-700 rounded px-3 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"font-medium\">{load.description}</div>\n          {!readOnly && (\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => handleRemoveLoad(index)}\n            >\n              {t('common.remove')}\n            </Button>\n          )}\n        </div>\n        <div className=\"mt-1 grid grid-cols-2 gap-2 text-sm text-gray-300\">\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.weight')}: </span>\n            {load.weight || 'N/A'}\n          </div>\n          <div>\n            <span className=\"text-gray-400\">{t('jobTicket.destination')}: </span>\n            {load.destination}\n          </div>\n        </div>\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveLoad]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Truck Driver-specific fields */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"delivery\">{t('workTypes.delivery')}</option>\n            <option value=\"pickup\">{t('workTypes.pickup')}</option>\n            <option value=\"transport\">{t('workTypes.transport')}</option>\n            <option value=\"equipment\">{t('workTypes.equipment')}</option>\n            <option value=\"supplies\">{t('workTypes.supplies')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Vehicle Information */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Input\n          label={t('jobTicket.vehicleId')}\n          type=\"text\"\n          id=\"vehicleId\"\n          name=\"vehicleId\"\n          register={register}\n          placeholder=\"e.g., TRK-2023-104\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.vehicleType')}\n          type=\"text\"\n          id=\"vehicleType\"\n          name=\"vehicleType\"\n          register={register}\n          placeholder=\"e.g., Semi-truck, Pickup, Tanker\"\n          readOnly={readOnly}\n        />\n      </div>\n      \n      {/* Mileage Tracking */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Input\n          label={t('jobTicket.startingMileage')}\n          type=\"number\"\n          id=\"startingMileage\"\n          name=\"startingMileage\"\n          register={register}\n          placeholder=\"e.g., 45780\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.endingMileage')}\n          type=\"number\"\n          id=\"endingMileage\"\n          name=\"endingMileage\"\n          register={register}\n          placeholder=\"e.g., 45920\"\n          readOnly={readOnly}\n        />\n        <Input\n          label={t('jobTicket.totalMileage')}\n          type=\"number\"\n          id=\"totalMileage\"\n          name=\"totalMileage\"\n          register={register}\n          readOnly={true}\n          value={\n            watch('endingMileage') && watch('startingMileage')\n              ? Math.max(0, Number(watch('endingMileage')) - Number(watch('startingMileage')))\n              : ''\n          }\n        />\n      </div>\n      \n      {/* Load Details */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.loadDetails')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"space-y-3 mb-3 bg-gray-800 p-4 rounded-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              <div>\n                <label htmlFor=\"loadDescription\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.loadDescription')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDescription\"\n                  value={loadDescription}\n                  onChange={(e) => setLoadDescription(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.loadDescriptionPlaceholder')}\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadWeight\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.weight')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadWeight\"\n                  value={loadWeight}\n                  onChange={(e) => setLoadWeight(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder=\"e.g., 2500 lbs\"\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"loadDestination\" className=\"block text-xs font-medium text-gray-400\">\n                  {t('jobTicket.destination')}\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"loadDestination\"\n                  value={loadDestination}\n                  onChange={(e) => setLoadDestination(e.target.value)}\n                  className=\"mt-1 bg-gray-700 block w-full rounded-md border-gray-600 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                  placeholder={t('jobTicket.destinationPlaceholder')}\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"primary\"\n                size=\"md\"\n                onClick={handleAddLoad}\n                disabled={!loadDescription || !loadDestination}\n              >\n                {t('common.add')}\n              </Button>\n            </div>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[300px] overflow-y-auto\">\n          <Controller\n            name=\"loads\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {loadsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Vehicle Inspection */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.vehicleInspection')}\n        </label>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionFuel\"\n              name=\"inspectionFuel\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionFuel')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionFuel\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.fuelChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionTires\"\n              name=\"inspectionTires\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionTires')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionTires\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.tiresChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionOil\"\n              name=\"inspectionOil\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionOil')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionOil\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.oilChecked')}\n            </label>\n          </div>\n          <div className=\"flex items-center\">\n            <input\n              id=\"inspectionLights\"\n              name=\"inspectionLights\"\n              type=\"checkbox\"\n              className=\"h-4 w-4 rounded border-gray-700 text-orange-600 focus:ring-orange-500\"\n              {...register('inspectionLights')}\n              disabled={readOnly}\n            />\n            <label htmlFor=\"inspectionLights\" className=\"ml-2 block text-sm text-gray-300\">\n              {t('jobTicket.lightsChecked')}\n            </label>\n          </div>\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(TruckDriverTicketForm);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useLanguage } from '../../../context/LanguageContext';\nimport BaseJobTicketForm from './BaseJobTicketForm';\nimport { Button, Input, Card } from '../../ui';\n\n/**\n * OtherTicketForm - Generic job ticket form for \"Other\" job types\n * \n * Inherits from BaseJobTicketForm:\n * - All common fields (date, company, customer, location, hours, description)\n * - Form submission and draft functionality\n * - Time calculation logic\n * \n * Unique to this form:\n * - Customizable job type field\n * - Materials/equipment used with add/remove functionality\n * - Additional notes section\n * \n * Performance optimizations:\n * - Memoized items list\n * - Memoized event handlers\n * - React.memo for preventing unnecessary re-renders\n */\nconst OtherTicketForm = ({ readOnly = false, draftData = null }) => {\n  const { t } = useLanguage();\n  const { control, register, watch, setValue } = useForm({\n    defaultValues: draftData || {}\n  });\n  \n  // State for selected item in dropdown\n  const [itemName, setItemName] = useState('');\n  const [itemQuantity, setItemQuantity] = useState('');\n  \n  // Handle adding an item - memoized to prevent recreation on each render\n  const handleAddItem = useCallback(() => {\n    if (!itemName) return;\n    \n    const currentItems = watch('items') || [];\n    setValue('items', [\n      ...currentItems, \n      { \n        name: itemName, \n        quantity: itemQuantity || '1'\n      }\n    ]);\n    \n    // Reset form fields\n    setItemName('');\n    setItemQuantity('');\n  }, [itemName, itemQuantity, watch, setValue]);\n  \n  // Handle removing an item - memoized to prevent recreation on each render\n  const handleRemoveItem = useCallback((index) => {\n    const currentItems = watch('items') || [];\n    const updatedItems = [...currentItems];\n    updatedItems.splice(index, 1);\n    setValue('items', updatedItems);\n  }, [watch, setValue]);\n  \n  // Memoize the items list rendering for better performance\n  const itemsListItems = useMemo(() => {\n    const items = watch('items') || [];\n    \n    if (items.length === 0) {\n      return (\n        <li className=\"text-gray-500 text-center py-2\">\n          {t('jobTicket.noItems')}\n        </li>\n      );\n    }\n    \n    return items.map((item, index) => (\n      <li key={index} className=\"flex items-center justify-between bg-gray-700 rounded px-3 py-2\">\n        <span>\n          {item.name}\n          {item.quantity && item.quantity !== '1' && (\n            <span className=\"ml-2 text-sm text-gray-400\">\n              ({t('jobTicket.quantity')}: {item.quantity})\n            </span>\n          )}\n        </span>\n        {!readOnly && (\n          <Button\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => handleRemoveItem(index)}\n          >\n            {t('common.remove')}\n          </Button>\n        )}\n      </li>\n    ));\n  }, [watch, t, readOnly, handleRemoveItem]);\n  \n  return (\n    <BaseJobTicketForm readOnly={readOnly} draftData={draftData}>\n      {/* Custom Job Type */}\n      <div>\n        <label htmlFor=\"customJobType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.customJobType')}\n        </label>\n        <div className=\"mt-1\">\n          <input\n            type=\"text\"\n            id=\"customJobType\"\n            name=\"customJobType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            placeholder={t('jobTicket.customJobTypePlaceholder')}\n            {...register('customJobType')}\n          />\n        </div>\n      </div>\n      \n      {/* Work Type */}\n      <div>\n        <label htmlFor=\"workType\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.workType')}\n        </label>\n        <div className=\"mt-1\">\n          <select\n            id=\"workType\"\n            name=\"workType\"\n            className=\"bg-gray-800 block w-full max-w-md rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            disabled={readOnly}\n            {...register('workType')}\n          >\n            <option value=\"\">{t('common.select')}</option>\n            <option value=\"maintenance\">{t('workTypes.maintenance')}</option>\n            <option value=\"repair\">{t('workTypes.repair')}</option>\n            <option value=\"installation\">{t('workTypes.installation')}</option>\n            <option value=\"inspection\">{t('workTypes.inspection')}</option>\n            <option value=\"other\">{t('workTypes.other')}</option>\n          </select>\n        </div>\n      </div>\n      \n      {/* Materials/Equipment Used */}\n      <div>\n        <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n          {t('jobTicket.materialsEquipmentUsed')}\n        </label>\n        \n        {!readOnly && (\n          <div className=\"flex items-end space-x-2 mb-3\">\n            <div className=\"flex-grow\">\n              <input\n                type=\"text\"\n                value={itemName}\n                onChange={(e) => setItemName(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.itemNamePlaceholder')}\n              />\n            </div>\n            <div className=\"w-24\">\n              <input\n                type=\"text\"\n                value={itemQuantity}\n                onChange={(e) => setItemQuantity(e.target.value)}\n                className=\"bg-gray-800 block w-full rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n                placeholder={t('jobTicket.qty')}\n              />\n            </div>\n            <Button\n              type=\"button\"\n              variant=\"primary\"\n              size=\"md\"\n              onClick={handleAddItem}\n              disabled={!itemName}\n            >\n              {t('common.add')}\n            </Button>\n          </div>\n        )}\n        \n        <Card className=\"bg-gray-800 p-3 min-h-[100px] max-h-[200px] overflow-y-auto\">\n          <Controller\n            name=\"items\"\n            control={control}\n            defaultValue={[]}\n            render={({ field }) => (\n              <ul className=\"space-y-2\">\n                {itemsListItems}\n              </ul>\n            )}\n          />\n        </Card>\n      </div>\n      \n      {/* Additional Notes */}\n      <div>\n        <label htmlFor=\"additionalNotes\" className=\"block text-sm font-medium text-gray-300\">\n          {t('jobTicket.additionalNotes')}\n        </label>\n        <div className=\"mt-1\">\n          <textarea\n            id=\"additionalNotes\"\n            name=\"additionalNotes\"\n            rows={4}\n            className=\"bg-gray-800 block w-full max-w-2xl rounded-md border-gray-700 text-white shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\n            readOnly={readOnly}\n            placeholder={t('jobTicket.additionalNotesPlaceholder')}\n            {...register('additionalNotes')}\n          />\n        </div>\n      </div>\n    </BaseJobTicketForm>\n  );\n};\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(OtherTicketForm);\n"],"names":["isValidTimeFormat","timeString","test","calculateHoursBetween","startTime","endTime","startHour","startMinute","split","map","Number","endHour","endMinute","hoursDiff","minutesDiff","parseFloat","toFixed","_ref","id","name","type","label","placeholder","required","disabled","readOnly","error","register","className","rest","_objectWithoutProperties","_excluded","_jsxs","children","htmlFor","_jsx","_objectSpread","concat","autoComplete","DateInputField","value","onChange","onBlur","onFocus","suffix","_ref2","setValue","_excluded2","t","useLanguage","showCalendar","setShowCalendar","useState","selectedDate","setSelectedDate","inputValue","setInputValue","calendarRef","useRef","isMobile","navigator","userAgent","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","calendarSuffix","onClick","toggleCalendar","CalendarIcon","e","dateValue","year","month","day","fixedDate","shouldValidate","formattedDate","length","parts","padStart","isoDate","ref","date","min","max","defaultValue","BaseJobTicketForm","onSubmit","draftData","formData","updateFormData","saveJobTicketAsDraft","submitJobTicket","isSubmitting","submitError","submitSuccess","useTicket","user","useAuth","defaultValues","useMemo","navigate","useNavigate","handleSubmit","control","watch","reset","formState","errors","useForm","mode","resetForm","useCallback","workStartTime","workEndTime","driveStartTime","driveEndTime","debouncedWorkStartTime","useDebounce","debouncedWorkEndTime","debouncedDriveStartTime","debouncedDriveEndTime","calculateWorkHours","calculateDriveHours","hours","subscription","timeoutId","setTimeout","clearTimeout","unsubscribe","showSuccessMessage","setShowSuccessMessage","showErrorMessage","setShowErrorMessage","errorMessage","setErrorMessage","submissionProgress","setSubmissionProgress","isSubmittingLocal","setIsSubmittingLocal","renderStart","performance","now","renderTime","console","log","clearMarks","Form","async","result","data","success","status","Date","state","ticketNumber","message","hideSubmitButton","DateInput","rules","jobDate","undefined","EnhancedInput","companyName","customerName","location","equipment","rows","workDescription","submittedBy","Card","Button","variant","size","LoadingSpinner","React","GenericJobTicketForm","selectedPart","setSelectedPart","partsArray","setPartsArray","partsList","handleAddPart","selectedPartObj","find","part","newPart","prevParts","currentParts","handleRemovePart","index","updatedParts","splice","updatedFormParts","handlePartChange","selectedValue","partsListItems","partLabel","partName","replace","charAt","toLowerCase","slice","String","Controller","render","field","PumpTechTicketForm","selectedOption","EnhancedSelect","DriverTicketForm","vehicleTypes","option","vehicleType","Input","mileage","RoustaboutTicketForm","selectedMaterial","setSelectedMaterial","materialsList","handleAddMaterial","currentMaterials","handleRemoveMaterial","updatedMaterials","handleMaterialChange","materialsListItems","materials","material","ElectricianTicketForm","selectedComponent","setSelectedComponent","componentsList","handleAddComponent","currentComponents","handleRemoveComponent","updatedComponents","handleComponentChange","componentsListItems","components","component","PipelineOperatorTicketForm","inspectionPoint","setInspectionPoint","inspectionStatus","setInspectionStatus","inspectionNotes","setInspectionNotes","handleAddInspectionPoint","currentInspections","point","notes","handleRemoveInspectionPoint","updatedInspections","inspectionListItems","inspections","inspection","TruckDriverTicketForm","loadDescription","setLoadDescription","loadWeight","setLoadWeight","loadDestination","setLoadDestination","handleAddLoad","currentLoads","description","weight","destination","handleRemoveLoad","updatedLoads","loadsListItems","loads","load","Math","OtherTicketForm","itemName","setItemName","itemQuantity","setItemQuantity","handleAddItem","currentItems","quantity","handleRemoveItem","updatedItems","itemsListItems","items","item"],"sourceRoot":""}