{"version":3,"file":"static/js/submitted-tickets.b9071996.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/24/outline/esm/ExclamationCircleIcon.js","components/tickets/SubmittedTicketList.js"],"sourcesContent":["import * as React from \"react\";\nfunction ExclamationCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z\"\n  }));\n}\nconst ForwardRef = React.forwardRef(ExclamationCircleIcon);\nexport default ForwardRef;","import React, { useState, useCallback, useMemo } from 'react';\nimport { useLanguage } from '../../context/LanguageContext';\nimport { useAuth } from '../../context/AuthContext';\nimport { useApiCache, useMemoizedCallback } from '../../hooks';\nimport { Card, Button, VirtualList, LoadingSpinner } from '../ui';\nimport { ExclamationCircleIcon } from '@heroicons/react/24/outline';\n\n/**\n * Submitted Ticket List Component\n * Displays a table of submitted job tickets with responsive design\n */\nconst SubmittedTicketList = () => {\n  const { t } = useLanguage();\n  const { user } = useAuth();\n  \n  // Use the API cache hook for fetching submitted tickets\n  // This will cache the results for 5 minutes by default\n  const { \n    data: ticketsResponse, \n    isLoading: loading, \n    error: apiError,\n    refetch\n  } = useApiCache('/api/job-tickets/?status=submitted', {\n    cacheTime: 3 * 60 * 1000, // 3 minutes cache\n    onError: (err) => console.error('Error fetching submitted tickets:', err)\n  });\n  \n  // Extract tickets from the response\n  const tickets = ticketsResponse?.data || [];\n  \n  // Format error message\n  const error = apiError ? t('errors.fetchFailed') : null;\n\n  // Format date for display - memoized to prevent recreation on each render\n  const formatDate = useCallback((dateString) => {\n    if (!dateString) return '-';\n    try {\n      return new Date(dateString).toLocaleDateString();\n    } catch (e) {\n      return dateString;\n    }\n  }, []);\n\n  // Truncate text with ellipsis - memoized to prevent recreation on each render\n  const truncateText = useCallback((text, maxLength = 50) => {\n    if (!text) return '';\n    return text.length > maxLength ? `${text.substring(0, maxLength)}...` : text;\n  }, []);\n\n  // View ticket details - memoized to prevent recreation on each render\n  const handleViewTicket = useCallback((ticketId) => {\n    // Implement view ticket functionality\n    console.log('View ticket:', ticketId);\n    // This would typically navigate to a ticket detail page\n  }, []);\n  \n  // Memoize tickets data to prevent unnecessary re-renders\n  const memoizedTickets = useMemo(() => tickets || [], [tickets]);\n\n  return (\n    <div className=\"py-6 px-4\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\n        {t('jobTicket.submitted')}\n      </h1>\n\n      {loading ? (\n        <div className=\"flex justify-center items-center py-12\">\n          <LoadingSpinner size=\"lg\" variant=\"primary\" />\n        </div>\n      ) : (\n        <Card className=\"overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-700\">\n              <thead>\n                <tr>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-24 sm:w-auto\">\n                    {t('jobTicket.date')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.company')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-48 sm:w-1/4\">\n                    {t('jobTicket.location')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider w-16 sm:w-auto\">\n                    {t('jobTicket.hours')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                    {t('jobTicket.description')}\n                  </th>\n                  <th className=\"sticky top-0 bg-gray-800 px-6 py-3 text-right text-xs font-medium text-gray-400 uppercase tracking-wider w-20\">\n                    {t('common.actions')}\n                  </th>\n                </tr>\n              </thead>\n              {/* Error State */}\n              {error ? (\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"flex items-center justify-center space-x-2 text-red-500\">\n                        <ExclamationCircleIcon className=\"h-5 w-5\" />\n                        <span>{error}</span>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => refetch()} \n                          className=\"ml-3\"\n                        >\n                          {t('common.retry')}\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : memoizedTickets.length === 0 ? (\n                /* Empty State */\n                <tbody>\n                  <tr>\n                    <td colSpan=\"6\" className=\"px-6 py-4\">\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-400\">{t('jobTicket.noSubmitted')}</p>\n                      </div>\n                    </td>\n                  </tr>\n                </tbody>\n              ) : (\n                /* Data State with Virtualized List */\n                <tbody className=\"divide-y divide-gray-700\">\n                  <VirtualList\n                    items={memoizedTickets}\n                    height={400}\n                    itemHeight={64}\n                    renderItem={(ticket) => (\n                      <TicketRow\n                        key={ticket.id}\n                        ticket={ticket}\n                        formatDate={formatDate}\n                        handleViewTicket={handleViewTicket}\n                        t={t}\n                      />\n                    )}\n                    overscan={5}\n                    emptyComponent={\n                      <tr>\n                        <td colSpan=\"6\" className=\"px-6 py-4\">\n                          <div className=\"text-center py-8\">\n                            <LoadingSpinner size=\"md\" />\n                          </div>\n                        </td>\n                      </tr>\n                    }\n                  />\n                </tbody>\n              )}\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};\n\n// Memoized Ticket Row component to prevent unnecessary re-renders\nconst TicketRow = React.memo(({ ticket, formatDate, handleViewTicket, t }) => {\n  // Calculate total hours once\n  const totalHours = useMemo(() => {\n    return parseFloat(ticket.work_total_hours || 0) + parseFloat(ticket.travel_total_hours || 0);\n  }, [ticket.work_total_hours, ticket.travel_total_hours]);\n  \n  return (\n    <tr className=\"hover:bg-gray-700\">\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {formatDate(ticket.job_date)}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.company_name || t('jobTicket.untitledTicket')}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.location || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n        {totalHours}\n      </td>\n      <td className=\"px-6 py-4 text-sm\">\n        <div className=\"truncate\">\n          {ticket.description || '-'}\n        </div>\n      </td>\n      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => handleViewTicket(ticket.id)}\n          className=\"text-orange-500 hover:text-orange-400\"\n          aria-label={`${t('common.view')} ${ticket.company_name || t('jobTicket.untitledTicket')}`}\n        >\n          {t('common.view')}\n        </Button>\n      </td>\n    </tr>\n  );\n});\n\n// Export memoized component to prevent unnecessary re-renders\nexport default React.memo(SubmittedTicketList);\n"],"names":["React","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","SubmittedTicketList","t","useLanguage","user","useAuth","data","ticketsResponse","isLoading","loading","error","apiError","refetch","useApiCache","cacheTime","onError","err","console","tickets","formatDate","useCallback","dateString","Date","toLocaleDateString","e","handleViewTicket","text","maxLength","arguments","length","undefined","concat","substring","ticketId","log","memoizedTickets","useMemo","_jsxs","className","children","_jsx","LoadingSpinner","size","variant","Card","colSpan","ExclamationCircleIcon","Button","onClick","VirtualList","items","height","itemHeight","renderItem","ticket","TicketRow","overscan","emptyComponent","totalHours","parseFloat","work_total_hours","travel_total_hours","job_date","company_name","location","description"],"sourceRoot":""}